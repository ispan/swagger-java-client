/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DkCloudDataModelPermissionCustomerPermissionModel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:57:09.866Z")



public class DkCloudDataModelPermissionCustomerPermissionModel {
  /**
   * Gets or Sets customers
   */
  @JsonAdapter(CustomersEnum.Adapter.class)
  public enum CustomersEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    CustomersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomersEnum fromValue(String text) {
      for (CustomersEnum b : CustomersEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CustomersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomersEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CustomersEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Customers")
  private CustomersEnum customers = null;

  /**
   * Gets or Sets customerDashboard
   */
  @JsonAdapter(CustomerDashboardEnum.Adapter.class)
  public enum CustomerDashboardEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    CustomerDashboardEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerDashboardEnum fromValue(String text) {
      for (CustomerDashboardEnum b : CustomerDashboardEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CustomerDashboardEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerDashboardEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerDashboardEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CustomerDashboardEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("CustomerDashboard")
  private CustomerDashboardEnum customerDashboard = null;

  /**
   * Gets or Sets groups
   */
  @JsonAdapter(GroupsEnum.Adapter.class)
  public enum GroupsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    GroupsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupsEnum fromValue(String text) {
      for (GroupsEnum b : GroupsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<GroupsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return GroupsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Groups")
  private GroupsEnum groups = null;

  /**
   * Gets or Sets invoices
   */
  @JsonAdapter(InvoicesEnum.Adapter.class)
  public enum InvoicesEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    InvoicesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoicesEnum fromValue(String text) {
      for (InvoicesEnum b : InvoicesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InvoicesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoicesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoicesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InvoicesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Invoices")
  private InvoicesEnum invoices = null;

  /**
   * Gets or Sets projects
   */
  @JsonAdapter(ProjectsEnum.Adapter.class)
  public enum ProjectsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    ProjectsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectsEnum fromValue(String text) {
      for (ProjectsEnum b : ProjectsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProjectsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProjectsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Projects")
  private ProjectsEnum projects = null;

  /**
   * Gets or Sets contacts
   */
  @JsonAdapter(ContactsEnum.Adapter.class)
  public enum ContactsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    ContactsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContactsEnum fromValue(String text) {
      for (ContactsEnum b : ContactsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ContactsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContactsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContactsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ContactsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Contacts")
  private ContactsEnum contacts = null;

  /**
   * Gets or Sets itemReccivers
   */
  @JsonAdapter(ItemRecciversEnum.Adapter.class)
  public enum ItemRecciversEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    ItemRecciversEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemRecciversEnum fromValue(String text) {
      for (ItemRecciversEnum b : ItemRecciversEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ItemRecciversEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemRecciversEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemRecciversEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ItemRecciversEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ItemReccivers")
  private ItemRecciversEnum itemReccivers = null;

  /**
   * Gets or Sets memoes
   */
  @JsonAdapter(MemoesEnum.Adapter.class)
  public enum MemoesEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    MemoesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MemoesEnum fromValue(String text) {
      for (MemoesEnum b : MemoesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MemoesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MemoesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MemoesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MemoesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Memoes")
  private MemoesEnum memoes = null;

  /**
   * Gets or Sets attributes
   */
  @JsonAdapter(AttributesEnum.Adapter.class)
  public enum AttributesEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    AttributesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttributesEnum fromValue(String text) {
      for (AttributesEnum b : AttributesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AttributesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttributesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttributesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AttributesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Attributes")
  private AttributesEnum attributes = null;

  /**
   * Gets or Sets attachments
   */
  @JsonAdapter(AttachmentsEnum.Adapter.class)
  public enum AttachmentsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    AttachmentsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttachmentsEnum fromValue(String text) {
      for (AttachmentsEnum b : AttachmentsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AttachmentsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttachmentsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttachmentsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AttachmentsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Attachments")
  private AttachmentsEnum attachments = null;

  /**
   * Gets or Sets modifications
   */
  @JsonAdapter(ModificationsEnum.Adapter.class)
  public enum ModificationsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    ModificationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModificationsEnum fromValue(String text) {
      for (ModificationsEnum b : ModificationsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ModificationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModificationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModificationsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModificationsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Modifications")
  private ModificationsEnum modifications = null;

  /**
   * Gets or Sets settings
   */
  @JsonAdapter(SettingsEnum.Adapter.class)
  public enum SettingsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    SettingsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SettingsEnum fromValue(String text) {
      for (SettingsEnum b : SettingsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SettingsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SettingsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SettingsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SettingsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Settings")
  private SettingsEnum settings = null;

  /**
   * Gets or Sets transactions
   */
  @JsonAdapter(TransactionsEnum.Adapter.class)
  public enum TransactionsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    TransactionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionsEnum fromValue(String text) {
      for (TransactionsEnum b : TransactionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TransactionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransactionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Transactions")
  private TransactionsEnum transactions = null;

  /**
   * Gets or Sets enabled
   */
  @JsonAdapter(EnabledEnum.Adapter.class)
  public enum EnabledEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled"),
    
    BLOCKED("Blocked");

    private String value;

    EnabledEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnabledEnum fromValue(String text) {
      for (EnabledEnum b : EnabledEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EnabledEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnabledEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnabledEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EnabledEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Enabled")
  private EnabledEnum enabled = null;

  public DkCloudDataModelPermissionCustomerPermissionModel customers(CustomersEnum customers) {
    this.customers = customers;
    return this;
  }

   /**
   * Get customers
   * @return customers
  **/
  @ApiModelProperty(value = "")
  public CustomersEnum getCustomers() {
    return customers;
  }

  public void setCustomers(CustomersEnum customers) {
    this.customers = customers;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel customerDashboard(CustomerDashboardEnum customerDashboard) {
    this.customerDashboard = customerDashboard;
    return this;
  }

   /**
   * Get customerDashboard
   * @return customerDashboard
  **/
  @ApiModelProperty(value = "")
  public CustomerDashboardEnum getCustomerDashboard() {
    return customerDashboard;
  }

  public void setCustomerDashboard(CustomerDashboardEnum customerDashboard) {
    this.customerDashboard = customerDashboard;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel groups(GroupsEnum groups) {
    this.groups = groups;
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @ApiModelProperty(value = "")
  public GroupsEnum getGroups() {
    return groups;
  }

  public void setGroups(GroupsEnum groups) {
    this.groups = groups;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel invoices(InvoicesEnum invoices) {
    this.invoices = invoices;
    return this;
  }

   /**
   * Get invoices
   * @return invoices
  **/
  @ApiModelProperty(value = "")
  public InvoicesEnum getInvoices() {
    return invoices;
  }

  public void setInvoices(InvoicesEnum invoices) {
    this.invoices = invoices;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel projects(ProjectsEnum projects) {
    this.projects = projects;
    return this;
  }

   /**
   * Get projects
   * @return projects
  **/
  @ApiModelProperty(value = "")
  public ProjectsEnum getProjects() {
    return projects;
  }

  public void setProjects(ProjectsEnum projects) {
    this.projects = projects;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel contacts(ContactsEnum contacts) {
    this.contacts = contacts;
    return this;
  }

   /**
   * Get contacts
   * @return contacts
  **/
  @ApiModelProperty(value = "")
  public ContactsEnum getContacts() {
    return contacts;
  }

  public void setContacts(ContactsEnum contacts) {
    this.contacts = contacts;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel itemReccivers(ItemRecciversEnum itemReccivers) {
    this.itemReccivers = itemReccivers;
    return this;
  }

   /**
   * Get itemReccivers
   * @return itemReccivers
  **/
  @ApiModelProperty(value = "")
  public ItemRecciversEnum getItemReccivers() {
    return itemReccivers;
  }

  public void setItemReccivers(ItemRecciversEnum itemReccivers) {
    this.itemReccivers = itemReccivers;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel memoes(MemoesEnum memoes) {
    this.memoes = memoes;
    return this;
  }

   /**
   * Get memoes
   * @return memoes
  **/
  @ApiModelProperty(value = "")
  public MemoesEnum getMemoes() {
    return memoes;
  }

  public void setMemoes(MemoesEnum memoes) {
    this.memoes = memoes;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel attributes(AttributesEnum attributes) {
    this.attributes = attributes;
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @ApiModelProperty(value = "")
  public AttributesEnum getAttributes() {
    return attributes;
  }

  public void setAttributes(AttributesEnum attributes) {
    this.attributes = attributes;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel attachments(AttachmentsEnum attachments) {
    this.attachments = attachments;
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @ApiModelProperty(value = "")
  public AttachmentsEnum getAttachments() {
    return attachments;
  }

  public void setAttachments(AttachmentsEnum attachments) {
    this.attachments = attachments;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel modifications(ModificationsEnum modifications) {
    this.modifications = modifications;
    return this;
  }

   /**
   * Get modifications
   * @return modifications
  **/
  @ApiModelProperty(value = "")
  public ModificationsEnum getModifications() {
    return modifications;
  }

  public void setModifications(ModificationsEnum modifications) {
    this.modifications = modifications;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel settings(SettingsEnum settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @ApiModelProperty(value = "")
  public SettingsEnum getSettings() {
    return settings;
  }

  public void setSettings(SettingsEnum settings) {
    this.settings = settings;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel transactions(TransactionsEnum transactions) {
    this.transactions = transactions;
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @ApiModelProperty(value = "")
  public TransactionsEnum getTransactions() {
    return transactions;
  }

  public void setTransactions(TransactionsEnum transactions) {
    this.transactions = transactions;
  }

  public DkCloudDataModelPermissionCustomerPermissionModel enabled(EnabledEnum enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @ApiModelProperty(value = "")
  public EnabledEnum getEnabled() {
    return enabled;
  }

  public void setEnabled(EnabledEnum enabled) {
    this.enabled = enabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DkCloudDataModelPermissionCustomerPermissionModel dkCloudDataModelPermissionCustomerPermissionModel = (DkCloudDataModelPermissionCustomerPermissionModel) o;
    return Objects.equals(this.customers, dkCloudDataModelPermissionCustomerPermissionModel.customers) &&
        Objects.equals(this.customerDashboard, dkCloudDataModelPermissionCustomerPermissionModel.customerDashboard) &&
        Objects.equals(this.groups, dkCloudDataModelPermissionCustomerPermissionModel.groups) &&
        Objects.equals(this.invoices, dkCloudDataModelPermissionCustomerPermissionModel.invoices) &&
        Objects.equals(this.projects, dkCloudDataModelPermissionCustomerPermissionModel.projects) &&
        Objects.equals(this.contacts, dkCloudDataModelPermissionCustomerPermissionModel.contacts) &&
        Objects.equals(this.itemReccivers, dkCloudDataModelPermissionCustomerPermissionModel.itemReccivers) &&
        Objects.equals(this.memoes, dkCloudDataModelPermissionCustomerPermissionModel.memoes) &&
        Objects.equals(this.attributes, dkCloudDataModelPermissionCustomerPermissionModel.attributes) &&
        Objects.equals(this.attachments, dkCloudDataModelPermissionCustomerPermissionModel.attachments) &&
        Objects.equals(this.modifications, dkCloudDataModelPermissionCustomerPermissionModel.modifications) &&
        Objects.equals(this.settings, dkCloudDataModelPermissionCustomerPermissionModel.settings) &&
        Objects.equals(this.transactions, dkCloudDataModelPermissionCustomerPermissionModel.transactions) &&
        Objects.equals(this.enabled, dkCloudDataModelPermissionCustomerPermissionModel.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customers, customerDashboard, groups, invoices, projects, contacts, itemReccivers, memoes, attributes, attachments, modifications, settings, transactions, enabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DkCloudDataModelPermissionCustomerPermissionModel {\n");
    
    sb.append("    customers: ").append(toIndentedString(customers)).append("\n");
    sb.append("    customerDashboard: ").append(toIndentedString(customerDashboard)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    invoices: ").append(toIndentedString(invoices)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    itemReccivers: ").append(toIndentedString(itemReccivers)).append("\n");
    sb.append("    memoes: ").append(toIndentedString(memoes)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    modifications: ").append(toIndentedString(modifications)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

