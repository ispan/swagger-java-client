/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DkCloudDataModelPermissionGeneralPermissionModel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:57:09.866Z")



public class DkCloudDataModelPermissionGeneralPermissionModel {
  /**
   * Gets or Sets employee
   */
  @JsonAdapter(EmployeeEnum.Adapter.class)
  public enum EmployeeEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    EmployeeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmployeeEnum fromValue(String text) {
      for (EmployeeEnum b : EmployeeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EmployeeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmployeeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmployeeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EmployeeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Employee")
  private EmployeeEnum employee = null;

  /**
   * Gets or Sets myPages
   */
  @JsonAdapter(MyPagesEnum.Adapter.class)
  public enum MyPagesEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    MyPagesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MyPagesEnum fromValue(String text) {
      for (MyPagesEnum b : MyPagesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MyPagesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MyPagesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MyPagesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MyPagesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("MyPages")
  private MyPagesEnum myPages = null;

  /**
   * Gets or Sets timeClock
   */
  @JsonAdapter(TimeClockEnum.Adapter.class)
  public enum TimeClockEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    TimeClockEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeClockEnum fromValue(String text) {
      for (TimeClockEnum b : TimeClockEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TimeClockEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeClockEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeClockEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TimeClockEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("TimeClock")
  private TimeClockEnum timeClock = null;

  /**
   * Gets or Sets dim1
   */
  @JsonAdapter(Dim1Enum.Adapter.class)
  public enum Dim1Enum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    Dim1Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Dim1Enum fromValue(String text) {
      for (Dim1Enum b : Dim1Enum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Dim1Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Dim1Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Dim1Enum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Dim1Enum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Dim1")
  private Dim1Enum dim1 = null;

  /**
   * Gets or Sets dim2
   */
  @JsonAdapter(Dim2Enum.Adapter.class)
  public enum Dim2Enum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    Dim2Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Dim2Enum fromValue(String text) {
      for (Dim2Enum b : Dim2Enum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Dim2Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Dim2Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Dim2Enum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Dim2Enum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Dim2")
  private Dim2Enum dim2 = null;

  /**
   * Gets or Sets dim3
   */
  @JsonAdapter(Dim3Enum.Adapter.class)
  public enum Dim3Enum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    Dim3Enum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Dim3Enum fromValue(String text) {
      for (Dim3Enum b : Dim3Enum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<Dim3Enum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Dim3Enum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Dim3Enum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return Dim3Enum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Dim3")
  private Dim3Enum dim3 = null;

  /**
   * Gets or Sets dashboard
   */
  @JsonAdapter(DashboardEnum.Adapter.class)
  public enum DashboardEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    DashboardEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DashboardEnum fromValue(String text) {
      for (DashboardEnum b : DashboardEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DashboardEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DashboardEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DashboardEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DashboardEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Dashboard")
  private DashboardEnum dashboard = null;

  public DkCloudDataModelPermissionGeneralPermissionModel employee(EmployeeEnum employee) {
    this.employee = employee;
    return this;
  }

   /**
   * Get employee
   * @return employee
  **/
  @ApiModelProperty(value = "")
  public EmployeeEnum getEmployee() {
    return employee;
  }

  public void setEmployee(EmployeeEnum employee) {
    this.employee = employee;
  }

  public DkCloudDataModelPermissionGeneralPermissionModel myPages(MyPagesEnum myPages) {
    this.myPages = myPages;
    return this;
  }

   /**
   * Get myPages
   * @return myPages
  **/
  @ApiModelProperty(value = "")
  public MyPagesEnum getMyPages() {
    return myPages;
  }

  public void setMyPages(MyPagesEnum myPages) {
    this.myPages = myPages;
  }

  public DkCloudDataModelPermissionGeneralPermissionModel timeClock(TimeClockEnum timeClock) {
    this.timeClock = timeClock;
    return this;
  }

   /**
   * Get timeClock
   * @return timeClock
  **/
  @ApiModelProperty(value = "")
  public TimeClockEnum getTimeClock() {
    return timeClock;
  }

  public void setTimeClock(TimeClockEnum timeClock) {
    this.timeClock = timeClock;
  }

  public DkCloudDataModelPermissionGeneralPermissionModel dim1(Dim1Enum dim1) {
    this.dim1 = dim1;
    return this;
  }

   /**
   * Get dim1
   * @return dim1
  **/
  @ApiModelProperty(value = "")
  public Dim1Enum getDim1() {
    return dim1;
  }

  public void setDim1(Dim1Enum dim1) {
    this.dim1 = dim1;
  }

  public DkCloudDataModelPermissionGeneralPermissionModel dim2(Dim2Enum dim2) {
    this.dim2 = dim2;
    return this;
  }

   /**
   * Get dim2
   * @return dim2
  **/
  @ApiModelProperty(value = "")
  public Dim2Enum getDim2() {
    return dim2;
  }

  public void setDim2(Dim2Enum dim2) {
    this.dim2 = dim2;
  }

  public DkCloudDataModelPermissionGeneralPermissionModel dim3(Dim3Enum dim3) {
    this.dim3 = dim3;
    return this;
  }

   /**
   * Get dim3
   * @return dim3
  **/
  @ApiModelProperty(value = "")
  public Dim3Enum getDim3() {
    return dim3;
  }

  public void setDim3(Dim3Enum dim3) {
    this.dim3 = dim3;
  }

  public DkCloudDataModelPermissionGeneralPermissionModel dashboard(DashboardEnum dashboard) {
    this.dashboard = dashboard;
    return this;
  }

   /**
   * Get dashboard
   * @return dashboard
  **/
  @ApiModelProperty(value = "")
  public DashboardEnum getDashboard() {
    return dashboard;
  }

  public void setDashboard(DashboardEnum dashboard) {
    this.dashboard = dashboard;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DkCloudDataModelPermissionGeneralPermissionModel dkCloudDataModelPermissionGeneralPermissionModel = (DkCloudDataModelPermissionGeneralPermissionModel) o;
    return Objects.equals(this.employee, dkCloudDataModelPermissionGeneralPermissionModel.employee) &&
        Objects.equals(this.myPages, dkCloudDataModelPermissionGeneralPermissionModel.myPages) &&
        Objects.equals(this.timeClock, dkCloudDataModelPermissionGeneralPermissionModel.timeClock) &&
        Objects.equals(this.dim1, dkCloudDataModelPermissionGeneralPermissionModel.dim1) &&
        Objects.equals(this.dim2, dkCloudDataModelPermissionGeneralPermissionModel.dim2) &&
        Objects.equals(this.dim3, dkCloudDataModelPermissionGeneralPermissionModel.dim3) &&
        Objects.equals(this.dashboard, dkCloudDataModelPermissionGeneralPermissionModel.dashboard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employee, myPages, timeClock, dim1, dim2, dim3, dashboard);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DkCloudDataModelPermissionGeneralPermissionModel {\n");
    
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    myPages: ").append(toIndentedString(myPages)).append("\n");
    sb.append("    timeClock: ").append(toIndentedString(timeClock)).append("\n");
    sb.append("    dim1: ").append(toIndentedString(dim1)).append("\n");
    sb.append("    dim2: ").append(toIndentedString(dim2)).append("\n");
    sb.append("    dim3: ").append(toIndentedString(dim3)).append("\n");
    sb.append("    dashboard: ").append(toIndentedString(dashboard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

