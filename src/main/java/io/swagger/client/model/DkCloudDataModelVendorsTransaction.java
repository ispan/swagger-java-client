/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * DkCloudDataModelVendorsTransaction
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:57:09.866Z")



public class DkCloudDataModelVendorsTransaction {
  @SerializedName("ID")
  private Integer ID = null;

  @SerializedName("InvoiceNumber")
  private String invoiceNumber = null;

  @SerializedName("Vendor")
  private String vendor = null;

  @SerializedName("Created")
  private OffsetDateTime created = null;

  @SerializedName("CreatedBy")
  private String createdBy = null;

  @SerializedName("Modified")
  private OffsetDateTime modified = null;

  @SerializedName("Text")
  private String text = null;

  @SerializedName("Reference")
  private String reference = null;

  @SerializedName("Dim1")
  private String dim1 = null;

  @SerializedName("Dim2")
  private String dim2 = null;

  @SerializedName("Dim3")
  private String dim3 = null;

  @SerializedName("LedgerAccount")
  private String ledgerAccount = null;

  @SerializedName("JournalDate")
  private OffsetDateTime journalDate = null;

  /**
   * Gets or Sets journalType
   */
  @JsonAdapter(JournalTypeEnum.Adapter.class)
  public enum JournalTypeEnum {
    GENERALLEDGER("GeneralLedger"),
    
    ACCOUNTSRECEIVABLE("AccountsReceivable"),
    
    ACCOUNTSPAYABLE("AccountsPayable"),
    
    PROJECTS("Projects"),
    
    PAYROLL("Payroll"),
    
    FIXEDASSETS("FixedAssets"),
    
    MEMBERPAYMENTS("MemberPayments"),
    
    BANKTRANSACTION("BankTransaction"),
    
    SUPPORTER("Supporter"),
    
    BOOKING("Booking");

    private String value;

    JournalTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JournalTypeEnum fromValue(String text) {
      for (JournalTypeEnum b : JournalTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<JournalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JournalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JournalTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return JournalTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("JournalType")
  private JournalTypeEnum journalType = null;

  /**
   * Gets or Sets journalHeadType
   */
  @JsonAdapter(JournalHeadTypeEnum.Adapter.class)
  public enum JournalHeadTypeEnum {
    MANUAL("Manual"),
    
    AUTOMATIC("Automatic"),
    
    EXCHANGERATEDIFFERENCE("ExchangeRateDifference"),
    
    PAYMENTS("Payments"),
    
    RECEIPT("Receipt"),
    
    FUNDTRANSFER("FundTransfer"),
    
    MEDICOR("Medicor"),
    
    WEBSERVICE("WebService"),
    
    _CBSOONLINEPOSTING("_cbSoOnlinePosting"),
    
    PRINTING("Printing"),
    
    TIMECLOCK("TimeClock");

    private String value;

    JournalHeadTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JournalHeadTypeEnum fromValue(String text) {
      for (JournalHeadTypeEnum b : JournalHeadTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<JournalHeadTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JournalHeadTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JournalHeadTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return JournalHeadTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("JournalHeadType")
  private JournalHeadTypeEnum journalHeadType = null;

  @SerializedName("DueDate")
  private OffsetDateTime dueDate = null;

  @SerializedName("InputAmount")
  private Double inputAmount = null;

  @SerializedName("CurrencyAmount")
  private Double currencyAmount = null;

  @SerializedName("SettleAmount")
  private Double settleAmount = null;

  @SerializedName("SettledCurrencyAmount")
  private Double settledCurrencyAmount = null;

  @SerializedName("SettleId")
  private Integer settleId = null;

  @SerializedName("Amount")
  private Double amount = null;

  @SerializedName("Currency")
  private String currency = null;

  @SerializedName("Exchange")
  private Double exchange = null;

  @SerializedName("Voucher")
  private String voucher = null;

  /**
   * Gets or Sets origin
   */
  @JsonAdapter(OriginEnum.Adapter.class)
  public enum OriginEnum {
    GLJOURNAL("GLJournal"),
    
    ARJOURNAL("ARJournal"),
    
    APJOURNAL("APJournal"),
    
    SOINVOICE("SOInvoice"),
    
    ARINTERESTCALC("ARInterestCalc"),
    
    INJOURNAL("InJournal"),
    
    SOJOURNAL("SOJournal"),
    
    SOOPENINVOICE("SOOpenInvoice"),
    
    PJJOURNAL("PjJournal"),
    
    APINVOICE("APInvoice"),
    
    APINVOICEPAYMENT("APInvoicePayment"),
    
    PJINVOICE("PjInvoice"),
    
    SKIPAYMENT("SKIPayment"),
    
    PJDIRECT("PjDirect"),
    
    GESALDO("GeSaldo"),
    
    FAJOURNAL("FAJournal"),
    
    INBOMFABRICATE("INBOMFabricate"),
    
    NOT_USED("NOT_USED"),
    
    PAYMENTS("Payments"),
    
    BANKTRANS("BankTrans"),
    
    PJPOSTEDJOURNAL("PjPostedJournal"),
    
    CUSTOMREPORT("CustomReport"),
    
    DEPRECIATIONREPORT("DepreciationReport"),
    
    VISA("Visa"),
    
    EURO("Euro"),
    
    DOJOURNAL("DoJournal"),
    
    POJOURNAL("POJournal"),
    
    POPOSTEDJOURNAL("POPostedJournal"),
    
    DATAEXPORT("DataExport"),
    
    ORGRANTAPPLICATION("ORGrantApplication"),
    
    ORGRANTPAYMENT("OrGrantPayment"),
    
    APINTERESTCALC("APInterestCalc"),
    
    ARBSSPAYMENT("ARBSSPayment"),
    
    ORMEMBERFEE("ORMemberFee"),
    
    ORMEMBERFEECLAIM("ORMemberFeeClaim"),
    
    ORMEMBERFEECLAIMDROP("ORMemberFeeClaimDrop"),
    
    ARBSSPAYMENTEX_NOTUSED("ARBSSPaymentEx_NOTUSED"),
    
    ORMEMBERFEECLAIMEX_NOTUSED("ORMemberFeeClaimEx_NOTUSED"),
    
    ORMEMBERFEECLAIMDROPEX_NOTUSED("ORMemberFeeClaimDropEx_NOTUSED"),
    
    INTRANS("InTrans"),
    
    ORMEMBERFEECREDITCARDEX("ORMemberFeeCreditcardEx"),
    
    ORMEMBERFEECREDITCARDPAYMENTEX("ORMemberFeeCreditcardPaymentEx"),
    
    INWOPJOURNAL("InWOPJournal"),
    
    INOPENJOURNAL("InOpenJournal"),
    
    INUNDISPATCHEDSALESORDER("InUndispatchedSalesOrder"),
    
    INWOPPOSTEDJOURNAL("InWOPPostedJournal"),
    
    GLTRANS("GLTrans"),
    
    APREQUEST("APRequest"),
    
    ARTRANS("ArTrans"),
    
    APTRANS("ApTrans"),
    
    INPRESCRIPTION("InPrescription"),
    
    DISCARDEDACCOUNTPERIOD("DiscardedAccountPeriod"),
    
    SOHEAD("SoHead"),
    
    GLFASTGD("GLFastGd");

    private String value;

    OriginEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OriginEnum fromValue(String text) {
      for (OriginEnum b : OriginEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OriginEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OriginEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OriginEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OriginEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Origin")
  private OriginEnum origin = null;

  /**
   * Gets or Sets code
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    ORDINARY("Ordinary"),
    
    BASETAX("BaseTax"),
    
    TAX("Tax"),
    
    OPENING("Opening"),
    
    TAXSETTLEMENT("TaxSettlement"),
    
    EXCHANGERATEDIFFERENCE("ExchangeRateDifference");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String text) {
      for (CodeEnum b : CodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CodeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Code")
  private CodeEnum code = null;

  /**
   * Gets or Sets transactionType
   */
  @JsonAdapter(TransactionTypeEnum.Adapter.class)
  public enum TransactionTypeEnum {
    DEBIT("Debit"),
    
    CREDIT("Credit");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionTypeEnum fromValue(String text) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransactionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("TransactionType")
  private TransactionTypeEnum transactionType = null;

  /**
   * Gets or Sets recordType
   */
  @JsonAdapter(RecordTypeEnum.Adapter.class)
  public enum RecordTypeEnum {
    DEBITJOURNAL("DebitJournal"),
    
    CREDITJOURNAL("CreditJournal"),
    
    DEBITINVOICE("DebitInvoice"),
    
    CREDITINVOICE("CreditInvoice"),
    
    PAIDINVOICE("PaidInvoice"),
    
    _CBSKIPAIDAPPLICATION("_cbSKIPaidApplication"),
    
    EXCHANGERATEDIFFERENCE("ExchangeRateDifference"),
    
    INTEREST("Interest"),
    
    CAPITALTAX("CapitalTax");

    private String value;

    RecordTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecordTypeEnum fromValue(String text) {
      for (RecordTypeEnum b : RecordTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RecordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RecordTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("RecordType")
  private RecordTypeEnum recordType = null;

  /**
   * Gets or Sets paymentSlip
   */
  @JsonAdapter(PaymentSlipEnum.Adapter.class)
  public enum PaymentSlipEnum {
    BANKTRANSFER("BankTransfer"),
    
    BANKSLIP("BankSlip"),
    
    ABGIRO("ABGiro"),
    
    CGIRO("CGiro"),
    
    NOTDEFINED("NotDefined");

    private String value;

    PaymentSlipEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentSlipEnum fromValue(String text) {
      for (PaymentSlipEnum b : PaymentSlipEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaymentSlipEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentSlipEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentSlipEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentSlipEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("PaymentSlip")
  private PaymentSlipEnum paymentSlip = null;

  /**
   * Gets or Sets paymentStatus
   */
  @JsonAdapter(PaymentStatusEnum.Adapter.class)
  public enum PaymentStatusEnum {
    STATUSNONE("StatusNone"),
    
    STATUSONHOLD("StatusOnHold");

    private String value;

    PaymentStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentStatusEnum fromValue(String text) {
      for (PaymentStatusEnum b : PaymentStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PaymentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PaymentStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("PaymentStatus")
  private PaymentStatusEnum paymentStatus = null;

  @SerializedName("JournalHeadCode")
  private String journalHeadCode = null;

  public DkCloudDataModelVendorsTransaction ID(Integer ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @ApiModelProperty(value = "")
  public Integer getID() {
    return ID;
  }

  public void setID(Integer ID) {
    this.ID = ID;
  }

  public DkCloudDataModelVendorsTransaction invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Get invoiceNumber
   * @return invoiceNumber
  **/
  @ApiModelProperty(value = "")
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }

  public DkCloudDataModelVendorsTransaction vendor(String vendor) {
    this.vendor = vendor;
    return this;
  }

   /**
   * Get vendor
   * @return vendor
  **/
  @ApiModelProperty(value = "")
  public String getVendor() {
    return vendor;
  }

  public void setVendor(String vendor) {
    this.vendor = vendor;
  }

  public DkCloudDataModelVendorsTransaction created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }

  public DkCloudDataModelVendorsTransaction createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @ApiModelProperty(value = "")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public DkCloudDataModelVendorsTransaction modified(OffsetDateTime modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Get modified
   * @return modified
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getModified() {
    return modified;
  }

  public void setModified(OffsetDateTime modified) {
    this.modified = modified;
  }

  public DkCloudDataModelVendorsTransaction text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @ApiModelProperty(value = "")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public DkCloudDataModelVendorsTransaction reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  @ApiModelProperty(value = "")
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }

  public DkCloudDataModelVendorsTransaction dim1(String dim1) {
    this.dim1 = dim1;
    return this;
  }

   /**
   * Get dim1
   * @return dim1
  **/
  @ApiModelProperty(value = "")
  public String getDim1() {
    return dim1;
  }

  public void setDim1(String dim1) {
    this.dim1 = dim1;
  }

  public DkCloudDataModelVendorsTransaction dim2(String dim2) {
    this.dim2 = dim2;
    return this;
  }

   /**
   * Get dim2
   * @return dim2
  **/
  @ApiModelProperty(value = "")
  public String getDim2() {
    return dim2;
  }

  public void setDim2(String dim2) {
    this.dim2 = dim2;
  }

  public DkCloudDataModelVendorsTransaction dim3(String dim3) {
    this.dim3 = dim3;
    return this;
  }

   /**
   * Get dim3
   * @return dim3
  **/
  @ApiModelProperty(value = "")
  public String getDim3() {
    return dim3;
  }

  public void setDim3(String dim3) {
    this.dim3 = dim3;
  }

  public DkCloudDataModelVendorsTransaction ledgerAccount(String ledgerAccount) {
    this.ledgerAccount = ledgerAccount;
    return this;
  }

   /**
   * Get ledgerAccount
   * @return ledgerAccount
  **/
  @ApiModelProperty(value = "")
  public String getLedgerAccount() {
    return ledgerAccount;
  }

  public void setLedgerAccount(String ledgerAccount) {
    this.ledgerAccount = ledgerAccount;
  }

  public DkCloudDataModelVendorsTransaction journalDate(OffsetDateTime journalDate) {
    this.journalDate = journalDate;
    return this;
  }

   /**
   * Get journalDate
   * @return journalDate
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getJournalDate() {
    return journalDate;
  }

  public void setJournalDate(OffsetDateTime journalDate) {
    this.journalDate = journalDate;
  }

  public DkCloudDataModelVendorsTransaction journalType(JournalTypeEnum journalType) {
    this.journalType = journalType;
    return this;
  }

   /**
   * Get journalType
   * @return journalType
  **/
  @ApiModelProperty(value = "")
  public JournalTypeEnum getJournalType() {
    return journalType;
  }

  public void setJournalType(JournalTypeEnum journalType) {
    this.journalType = journalType;
  }

  public DkCloudDataModelVendorsTransaction journalHeadType(JournalHeadTypeEnum journalHeadType) {
    this.journalHeadType = journalHeadType;
    return this;
  }

   /**
   * Get journalHeadType
   * @return journalHeadType
  **/
  @ApiModelProperty(value = "")
  public JournalHeadTypeEnum getJournalHeadType() {
    return journalHeadType;
  }

  public void setJournalHeadType(JournalHeadTypeEnum journalHeadType) {
    this.journalHeadType = journalHeadType;
  }

  public DkCloudDataModelVendorsTransaction dueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Get dueDate
   * @return dueDate
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getDueDate() {
    return dueDate;
  }

  public void setDueDate(OffsetDateTime dueDate) {
    this.dueDate = dueDate;
  }

  public DkCloudDataModelVendorsTransaction inputAmount(Double inputAmount) {
    this.inputAmount = inputAmount;
    return this;
  }

   /**
   * Get inputAmount
   * @return inputAmount
  **/
  @ApiModelProperty(value = "")
  public Double getInputAmount() {
    return inputAmount;
  }

  public void setInputAmount(Double inputAmount) {
    this.inputAmount = inputAmount;
  }

  public DkCloudDataModelVendorsTransaction currencyAmount(Double currencyAmount) {
    this.currencyAmount = currencyAmount;
    return this;
  }

   /**
   * Get currencyAmount
   * @return currencyAmount
  **/
  @ApiModelProperty(value = "")
  public Double getCurrencyAmount() {
    return currencyAmount;
  }

  public void setCurrencyAmount(Double currencyAmount) {
    this.currencyAmount = currencyAmount;
  }

  public DkCloudDataModelVendorsTransaction settleAmount(Double settleAmount) {
    this.settleAmount = settleAmount;
    return this;
  }

   /**
   * Get settleAmount
   * @return settleAmount
  **/
  @ApiModelProperty(value = "")
  public Double getSettleAmount() {
    return settleAmount;
  }

  public void setSettleAmount(Double settleAmount) {
    this.settleAmount = settleAmount;
  }

  public DkCloudDataModelVendorsTransaction settledCurrencyAmount(Double settledCurrencyAmount) {
    this.settledCurrencyAmount = settledCurrencyAmount;
    return this;
  }

   /**
   * Get settledCurrencyAmount
   * @return settledCurrencyAmount
  **/
  @ApiModelProperty(value = "")
  public Double getSettledCurrencyAmount() {
    return settledCurrencyAmount;
  }

  public void setSettledCurrencyAmount(Double settledCurrencyAmount) {
    this.settledCurrencyAmount = settledCurrencyAmount;
  }

  public DkCloudDataModelVendorsTransaction settleId(Integer settleId) {
    this.settleId = settleId;
    return this;
  }

   /**
   * Get settleId
   * @return settleId
  **/
  @ApiModelProperty(value = "")
  public Integer getSettleId() {
    return settleId;
  }

  public void setSettleId(Integer settleId) {
    this.settleId = settleId;
  }

  public DkCloudDataModelVendorsTransaction amount(Double amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @ApiModelProperty(value = "")
  public Double getAmount() {
    return amount;
  }

  public void setAmount(Double amount) {
    this.amount = amount;
  }

  public DkCloudDataModelVendorsTransaction currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @ApiModelProperty(value = "")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public DkCloudDataModelVendorsTransaction exchange(Double exchange) {
    this.exchange = exchange;
    return this;
  }

   /**
   * Get exchange
   * @return exchange
  **/
  @ApiModelProperty(value = "")
  public Double getExchange() {
    return exchange;
  }

  public void setExchange(Double exchange) {
    this.exchange = exchange;
  }

  public DkCloudDataModelVendorsTransaction voucher(String voucher) {
    this.voucher = voucher;
    return this;
  }

   /**
   * Get voucher
   * @return voucher
  **/
  @ApiModelProperty(value = "")
  public String getVoucher() {
    return voucher;
  }

  public void setVoucher(String voucher) {
    this.voucher = voucher;
  }

  public DkCloudDataModelVendorsTransaction origin(OriginEnum origin) {
    this.origin = origin;
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @ApiModelProperty(value = "")
  public OriginEnum getOrigin() {
    return origin;
  }

  public void setOrigin(OriginEnum origin) {
    this.origin = origin;
  }

  public DkCloudDataModelVendorsTransaction code(CodeEnum code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @ApiModelProperty(value = "")
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }

  public DkCloudDataModelVendorsTransaction transactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @ApiModelProperty(value = "")
  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }

  public DkCloudDataModelVendorsTransaction recordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
    return this;
  }

   /**
   * Get recordType
   * @return recordType
  **/
  @ApiModelProperty(value = "")
  public RecordTypeEnum getRecordType() {
    return recordType;
  }

  public void setRecordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
  }

  public DkCloudDataModelVendorsTransaction paymentSlip(PaymentSlipEnum paymentSlip) {
    this.paymentSlip = paymentSlip;
    return this;
  }

   /**
   * Get paymentSlip
   * @return paymentSlip
  **/
  @ApiModelProperty(value = "")
  public PaymentSlipEnum getPaymentSlip() {
    return paymentSlip;
  }

  public void setPaymentSlip(PaymentSlipEnum paymentSlip) {
    this.paymentSlip = paymentSlip;
  }

  public DkCloudDataModelVendorsTransaction paymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

   /**
   * Get paymentStatus
   * @return paymentStatus
  **/
  @ApiModelProperty(value = "")
  public PaymentStatusEnum getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(PaymentStatusEnum paymentStatus) {
    this.paymentStatus = paymentStatus;
  }

  public DkCloudDataModelVendorsTransaction journalHeadCode(String journalHeadCode) {
    this.journalHeadCode = journalHeadCode;
    return this;
  }

   /**
   * Get journalHeadCode
   * @return journalHeadCode
  **/
  @ApiModelProperty(value = "")
  public String getJournalHeadCode() {
    return journalHeadCode;
  }

  public void setJournalHeadCode(String journalHeadCode) {
    this.journalHeadCode = journalHeadCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DkCloudDataModelVendorsTransaction dkCloudDataModelVendorsTransaction = (DkCloudDataModelVendorsTransaction) o;
    return Objects.equals(this.ID, dkCloudDataModelVendorsTransaction.ID) &&
        Objects.equals(this.invoiceNumber, dkCloudDataModelVendorsTransaction.invoiceNumber) &&
        Objects.equals(this.vendor, dkCloudDataModelVendorsTransaction.vendor) &&
        Objects.equals(this.created, dkCloudDataModelVendorsTransaction.created) &&
        Objects.equals(this.createdBy, dkCloudDataModelVendorsTransaction.createdBy) &&
        Objects.equals(this.modified, dkCloudDataModelVendorsTransaction.modified) &&
        Objects.equals(this.text, dkCloudDataModelVendorsTransaction.text) &&
        Objects.equals(this.reference, dkCloudDataModelVendorsTransaction.reference) &&
        Objects.equals(this.dim1, dkCloudDataModelVendorsTransaction.dim1) &&
        Objects.equals(this.dim2, dkCloudDataModelVendorsTransaction.dim2) &&
        Objects.equals(this.dim3, dkCloudDataModelVendorsTransaction.dim3) &&
        Objects.equals(this.ledgerAccount, dkCloudDataModelVendorsTransaction.ledgerAccount) &&
        Objects.equals(this.journalDate, dkCloudDataModelVendorsTransaction.journalDate) &&
        Objects.equals(this.journalType, dkCloudDataModelVendorsTransaction.journalType) &&
        Objects.equals(this.journalHeadType, dkCloudDataModelVendorsTransaction.journalHeadType) &&
        Objects.equals(this.dueDate, dkCloudDataModelVendorsTransaction.dueDate) &&
        Objects.equals(this.inputAmount, dkCloudDataModelVendorsTransaction.inputAmount) &&
        Objects.equals(this.currencyAmount, dkCloudDataModelVendorsTransaction.currencyAmount) &&
        Objects.equals(this.settleAmount, dkCloudDataModelVendorsTransaction.settleAmount) &&
        Objects.equals(this.settledCurrencyAmount, dkCloudDataModelVendorsTransaction.settledCurrencyAmount) &&
        Objects.equals(this.settleId, dkCloudDataModelVendorsTransaction.settleId) &&
        Objects.equals(this.amount, dkCloudDataModelVendorsTransaction.amount) &&
        Objects.equals(this.currency, dkCloudDataModelVendorsTransaction.currency) &&
        Objects.equals(this.exchange, dkCloudDataModelVendorsTransaction.exchange) &&
        Objects.equals(this.voucher, dkCloudDataModelVendorsTransaction.voucher) &&
        Objects.equals(this.origin, dkCloudDataModelVendorsTransaction.origin) &&
        Objects.equals(this.code, dkCloudDataModelVendorsTransaction.code) &&
        Objects.equals(this.transactionType, dkCloudDataModelVendorsTransaction.transactionType) &&
        Objects.equals(this.recordType, dkCloudDataModelVendorsTransaction.recordType) &&
        Objects.equals(this.paymentSlip, dkCloudDataModelVendorsTransaction.paymentSlip) &&
        Objects.equals(this.paymentStatus, dkCloudDataModelVendorsTransaction.paymentStatus) &&
        Objects.equals(this.journalHeadCode, dkCloudDataModelVendorsTransaction.journalHeadCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, invoiceNumber, vendor, created, createdBy, modified, text, reference, dim1, dim2, dim3, ledgerAccount, journalDate, journalType, journalHeadType, dueDate, inputAmount, currencyAmount, settleAmount, settledCurrencyAmount, settleId, amount, currency, exchange, voucher, origin, code, transactionType, recordType, paymentSlip, paymentStatus, journalHeadCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DkCloudDataModelVendorsTransaction {\n");
    
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    dim1: ").append(toIndentedString(dim1)).append("\n");
    sb.append("    dim2: ").append(toIndentedString(dim2)).append("\n");
    sb.append("    dim3: ").append(toIndentedString(dim3)).append("\n");
    sb.append("    ledgerAccount: ").append(toIndentedString(ledgerAccount)).append("\n");
    sb.append("    journalDate: ").append(toIndentedString(journalDate)).append("\n");
    sb.append("    journalType: ").append(toIndentedString(journalType)).append("\n");
    sb.append("    journalHeadType: ").append(toIndentedString(journalHeadType)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    inputAmount: ").append(toIndentedString(inputAmount)).append("\n");
    sb.append("    currencyAmount: ").append(toIndentedString(currencyAmount)).append("\n");
    sb.append("    settleAmount: ").append(toIndentedString(settleAmount)).append("\n");
    sb.append("    settledCurrencyAmount: ").append(toIndentedString(settledCurrencyAmount)).append("\n");
    sb.append("    settleId: ").append(toIndentedString(settleId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    exchange: ").append(toIndentedString(exchange)).append("\n");
    sb.append("    voucher: ").append(toIndentedString(voucher)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    paymentSlip: ").append(toIndentedString(paymentSlip)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    journalHeadCode: ").append(toIndentedString(journalHeadCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

