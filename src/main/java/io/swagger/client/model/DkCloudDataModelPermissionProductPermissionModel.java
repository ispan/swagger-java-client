/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * DkCloudDataModelPermissionProductPermissionModel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:57:09.866Z")



public class DkCloudDataModelPermissionProductPermissionModel {
  /**
   * Gets or Sets products
   */
  @JsonAdapter(ProductsEnum.Adapter.class)
  public enum ProductsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    ProductsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductsEnum fromValue(String text) {
      for (ProductsEnum b : ProductsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProductsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProductsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Products")
  private ProductsEnum products = null;

  /**
   * Gets or Sets productReport
   */
  @JsonAdapter(ProductReportEnum.Adapter.class)
  public enum ProductReportEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    ProductReportEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProductReportEnum fromValue(String text) {
      for (ProductReportEnum b : ProductReportEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProductReportEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProductReportEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProductReportEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProductReportEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ProductReport")
  private ProductReportEnum productReport = null;

  /**
   * Gets or Sets barcodes
   */
  @JsonAdapter(BarcodesEnum.Adapter.class)
  public enum BarcodesEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    BarcodesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BarcodesEnum fromValue(String text) {
      for (BarcodesEnum b : BarcodesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BarcodesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BarcodesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BarcodesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BarcodesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Barcodes")
  private BarcodesEnum barcodes = null;

  /**
   * Gets or Sets warehouses
   */
  @JsonAdapter(WarehousesEnum.Adapter.class)
  public enum WarehousesEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    WarehousesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WarehousesEnum fromValue(String text) {
      for (WarehousesEnum b : WarehousesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<WarehousesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WarehousesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WarehousesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return WarehousesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Warehouses")
  private WarehousesEnum warehouses = null;

  /**
   * Gets or Sets attachments
   */
  @JsonAdapter(AttachmentsEnum.Adapter.class)
  public enum AttachmentsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    AttachmentsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AttachmentsEnum fromValue(String text) {
      for (AttachmentsEnum b : AttachmentsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AttachmentsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AttachmentsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AttachmentsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AttachmentsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Attachments")
  private AttachmentsEnum attachments = null;

  /**
   * Gets or Sets foreignPrice
   */
  @JsonAdapter(ForeignPriceEnum.Adapter.class)
  public enum ForeignPriceEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    ForeignPriceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ForeignPriceEnum fromValue(String text) {
      for (ForeignPriceEnum b : ForeignPriceEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ForeignPriceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ForeignPriceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ForeignPriceEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ForeignPriceEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ForeignPrice")
  private ForeignPriceEnum foreignPrice = null;

  /**
   * Gets or Sets units
   */
  @JsonAdapter(UnitsEnum.Adapter.class)
  public enum UnitsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    UnitsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitsEnum fromValue(String text) {
      for (UnitsEnum b : UnitsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UnitsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UnitsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Units")
  private UnitsEnum units = null;

  /**
   * Gets or Sets changes
   */
  @JsonAdapter(ChangesEnum.Adapter.class)
  public enum ChangesEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    ChangesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChangesEnum fromValue(String text) {
      for (ChangesEnum b : ChangesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChangesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChangesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChangesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Changes")
  private ChangesEnum changes = null;

  /**
   * Gets or Sets settings
   */
  @JsonAdapter(SettingsEnum.Adapter.class)
  public enum SettingsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    SettingsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SettingsEnum fromValue(String text) {
      for (SettingsEnum b : SettingsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SettingsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SettingsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SettingsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SettingsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Settings")
  private SettingsEnum settings = null;

  /**
   * Gets or Sets costPrices
   */
  @JsonAdapter(CostPricesEnum.Adapter.class)
  public enum CostPricesEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    CostPricesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CostPricesEnum fromValue(String text) {
      for (CostPricesEnum b : CostPricesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CostPricesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CostPricesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CostPricesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CostPricesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("CostPrices")
  private CostPricesEnum costPrices = null;

  /**
   * Gets or Sets transactions
   */
  @JsonAdapter(TransactionsEnum.Adapter.class)
  public enum TransactionsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    TransactionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionsEnum fromValue(String text) {
      for (TransactionsEnum b : TransactionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TransactionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransactionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Transactions")
  private TransactionsEnum transactions = null;

  @SerializedName("HideColumns")
  private List<String> hideColumns = null;

  /**
   * Gets or Sets enabled
   */
  @JsonAdapter(EnabledEnum.Adapter.class)
  public enum EnabledEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled"),
    
    BLOCKED("Blocked");

    private String value;

    EnabledEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnabledEnum fromValue(String text) {
      for (EnabledEnum b : EnabledEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EnabledEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnabledEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnabledEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EnabledEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Enabled")
  private EnabledEnum enabled = null;

  public DkCloudDataModelPermissionProductPermissionModel products(ProductsEnum products) {
    this.products = products;
    return this;
  }

   /**
   * Get products
   * @return products
  **/
  @ApiModelProperty(value = "")
  public ProductsEnum getProducts() {
    return products;
  }

  public void setProducts(ProductsEnum products) {
    this.products = products;
  }

  public DkCloudDataModelPermissionProductPermissionModel productReport(ProductReportEnum productReport) {
    this.productReport = productReport;
    return this;
  }

   /**
   * Get productReport
   * @return productReport
  **/
  @ApiModelProperty(value = "")
  public ProductReportEnum getProductReport() {
    return productReport;
  }

  public void setProductReport(ProductReportEnum productReport) {
    this.productReport = productReport;
  }

  public DkCloudDataModelPermissionProductPermissionModel barcodes(BarcodesEnum barcodes) {
    this.barcodes = barcodes;
    return this;
  }

   /**
   * Get barcodes
   * @return barcodes
  **/
  @ApiModelProperty(value = "")
  public BarcodesEnum getBarcodes() {
    return barcodes;
  }

  public void setBarcodes(BarcodesEnum barcodes) {
    this.barcodes = barcodes;
  }

  public DkCloudDataModelPermissionProductPermissionModel warehouses(WarehousesEnum warehouses) {
    this.warehouses = warehouses;
    return this;
  }

   /**
   * Get warehouses
   * @return warehouses
  **/
  @ApiModelProperty(value = "")
  public WarehousesEnum getWarehouses() {
    return warehouses;
  }

  public void setWarehouses(WarehousesEnum warehouses) {
    this.warehouses = warehouses;
  }

  public DkCloudDataModelPermissionProductPermissionModel attachments(AttachmentsEnum attachments) {
    this.attachments = attachments;
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @ApiModelProperty(value = "")
  public AttachmentsEnum getAttachments() {
    return attachments;
  }

  public void setAttachments(AttachmentsEnum attachments) {
    this.attachments = attachments;
  }

  public DkCloudDataModelPermissionProductPermissionModel foreignPrice(ForeignPriceEnum foreignPrice) {
    this.foreignPrice = foreignPrice;
    return this;
  }

   /**
   * Get foreignPrice
   * @return foreignPrice
  **/
  @ApiModelProperty(value = "")
  public ForeignPriceEnum getForeignPrice() {
    return foreignPrice;
  }

  public void setForeignPrice(ForeignPriceEnum foreignPrice) {
    this.foreignPrice = foreignPrice;
  }

  public DkCloudDataModelPermissionProductPermissionModel units(UnitsEnum units) {
    this.units = units;
    return this;
  }

   /**
   * Get units
   * @return units
  **/
  @ApiModelProperty(value = "")
  public UnitsEnum getUnits() {
    return units;
  }

  public void setUnits(UnitsEnum units) {
    this.units = units;
  }

  public DkCloudDataModelPermissionProductPermissionModel changes(ChangesEnum changes) {
    this.changes = changes;
    return this;
  }

   /**
   * Get changes
   * @return changes
  **/
  @ApiModelProperty(value = "")
  public ChangesEnum getChanges() {
    return changes;
  }

  public void setChanges(ChangesEnum changes) {
    this.changes = changes;
  }

  public DkCloudDataModelPermissionProductPermissionModel settings(SettingsEnum settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @ApiModelProperty(value = "")
  public SettingsEnum getSettings() {
    return settings;
  }

  public void setSettings(SettingsEnum settings) {
    this.settings = settings;
  }

  public DkCloudDataModelPermissionProductPermissionModel costPrices(CostPricesEnum costPrices) {
    this.costPrices = costPrices;
    return this;
  }

   /**
   * Get costPrices
   * @return costPrices
  **/
  @ApiModelProperty(value = "")
  public CostPricesEnum getCostPrices() {
    return costPrices;
  }

  public void setCostPrices(CostPricesEnum costPrices) {
    this.costPrices = costPrices;
  }

  public DkCloudDataModelPermissionProductPermissionModel transactions(TransactionsEnum transactions) {
    this.transactions = transactions;
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @ApiModelProperty(value = "")
  public TransactionsEnum getTransactions() {
    return transactions;
  }

  public void setTransactions(TransactionsEnum transactions) {
    this.transactions = transactions;
  }

  public DkCloudDataModelPermissionProductPermissionModel hideColumns(List<String> hideColumns) {
    this.hideColumns = hideColumns;
    return this;
  }

  public DkCloudDataModelPermissionProductPermissionModel addHideColumnsItem(String hideColumnsItem) {
    if (this.hideColumns == null) {
      this.hideColumns = new ArrayList<String>();
    }
    this.hideColumns.add(hideColumnsItem);
    return this;
  }

   /**
   * Get hideColumns
   * @return hideColumns
  **/
  @ApiModelProperty(value = "")
  public List<String> getHideColumns() {
    return hideColumns;
  }

  public void setHideColumns(List<String> hideColumns) {
    this.hideColumns = hideColumns;
  }

  public DkCloudDataModelPermissionProductPermissionModel enabled(EnabledEnum enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @ApiModelProperty(value = "")
  public EnabledEnum getEnabled() {
    return enabled;
  }

  public void setEnabled(EnabledEnum enabled) {
    this.enabled = enabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DkCloudDataModelPermissionProductPermissionModel dkCloudDataModelPermissionProductPermissionModel = (DkCloudDataModelPermissionProductPermissionModel) o;
    return Objects.equals(this.products, dkCloudDataModelPermissionProductPermissionModel.products) &&
        Objects.equals(this.productReport, dkCloudDataModelPermissionProductPermissionModel.productReport) &&
        Objects.equals(this.barcodes, dkCloudDataModelPermissionProductPermissionModel.barcodes) &&
        Objects.equals(this.warehouses, dkCloudDataModelPermissionProductPermissionModel.warehouses) &&
        Objects.equals(this.attachments, dkCloudDataModelPermissionProductPermissionModel.attachments) &&
        Objects.equals(this.foreignPrice, dkCloudDataModelPermissionProductPermissionModel.foreignPrice) &&
        Objects.equals(this.units, dkCloudDataModelPermissionProductPermissionModel.units) &&
        Objects.equals(this.changes, dkCloudDataModelPermissionProductPermissionModel.changes) &&
        Objects.equals(this.settings, dkCloudDataModelPermissionProductPermissionModel.settings) &&
        Objects.equals(this.costPrices, dkCloudDataModelPermissionProductPermissionModel.costPrices) &&
        Objects.equals(this.transactions, dkCloudDataModelPermissionProductPermissionModel.transactions) &&
        Objects.equals(this.hideColumns, dkCloudDataModelPermissionProductPermissionModel.hideColumns) &&
        Objects.equals(this.enabled, dkCloudDataModelPermissionProductPermissionModel.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(products, productReport, barcodes, warehouses, attachments, foreignPrice, units, changes, settings, costPrices, transactions, hideColumns, enabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DkCloudDataModelPermissionProductPermissionModel {\n");
    
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    productReport: ").append(toIndentedString(productReport)).append("\n");
    sb.append("    barcodes: ").append(toIndentedString(barcodes)).append("\n");
    sb.append("    warehouses: ").append(toIndentedString(warehouses)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    foreignPrice: ").append(toIndentedString(foreignPrice)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    costPrices: ").append(toIndentedString(costPrices)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    hideColumns: ").append(toIndentedString(hideColumns)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

