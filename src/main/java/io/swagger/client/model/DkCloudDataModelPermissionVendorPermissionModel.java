/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DkCloudDataModelPermissionVendorPermissionModel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:57:09.866Z")



public class DkCloudDataModelPermissionVendorPermissionModel {
  /**
   * Gets or Sets vendors
   */
  @JsonAdapter(VendorsEnum.Adapter.class)
  public enum VendorsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    VendorsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VendorsEnum fromValue(String text) {
      for (VendorsEnum b : VendorsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<VendorsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VendorsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VendorsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return VendorsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Vendors")
  private VendorsEnum vendors = null;

  /**
   * Gets or Sets vendorReport
   */
  @JsonAdapter(VendorReportEnum.Adapter.class)
  public enum VendorReportEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    VendorReportEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VendorReportEnum fromValue(String text) {
      for (VendorReportEnum b : VendorReportEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<VendorReportEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VendorReportEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VendorReportEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return VendorReportEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("VendorReport")
  private VendorReportEnum vendorReport = null;

  /**
   * Gets or Sets invoices
   */
  @JsonAdapter(InvoicesEnum.Adapter.class)
  public enum InvoicesEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    InvoicesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoicesEnum fromValue(String text) {
      for (InvoicesEnum b : InvoicesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InvoicesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoicesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoicesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InvoicesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Invoices")
  private InvoicesEnum invoices = null;

  /**
   * Gets or Sets approval
   */
  @JsonAdapter(ApprovalEnum.Adapter.class)
  public enum ApprovalEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    ApprovalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApprovalEnum fromValue(String text) {
      for (ApprovalEnum b : ApprovalEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ApprovalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApprovalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApprovalEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ApprovalEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Approval")
  private ApprovalEnum approval = null;

  /**
   * Gets or Sets settings
   */
  @JsonAdapter(SettingsEnum.Adapter.class)
  public enum SettingsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    SettingsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SettingsEnum fromValue(String text) {
      for (SettingsEnum b : SettingsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SettingsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SettingsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SettingsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SettingsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Settings")
  private SettingsEnum settings = null;

  /**
   * Gets or Sets transactions
   */
  @JsonAdapter(TransactionsEnum.Adapter.class)
  public enum TransactionsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    TransactionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionsEnum fromValue(String text) {
      for (TransactionsEnum b : TransactionsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TransactionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TransactionsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Transactions")
  private TransactionsEnum transactions = null;

  /**
   * Gets or Sets enabled
   */
  @JsonAdapter(EnabledEnum.Adapter.class)
  public enum EnabledEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled"),
    
    BLOCKED("Blocked");

    private String value;

    EnabledEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnabledEnum fromValue(String text) {
      for (EnabledEnum b : EnabledEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EnabledEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnabledEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnabledEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EnabledEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Enabled")
  private EnabledEnum enabled = null;

  public DkCloudDataModelPermissionVendorPermissionModel vendors(VendorsEnum vendors) {
    this.vendors = vendors;
    return this;
  }

   /**
   * Get vendors
   * @return vendors
  **/
  @ApiModelProperty(value = "")
  public VendorsEnum getVendors() {
    return vendors;
  }

  public void setVendors(VendorsEnum vendors) {
    this.vendors = vendors;
  }

  public DkCloudDataModelPermissionVendorPermissionModel vendorReport(VendorReportEnum vendorReport) {
    this.vendorReport = vendorReport;
    return this;
  }

   /**
   * Get vendorReport
   * @return vendorReport
  **/
  @ApiModelProperty(value = "")
  public VendorReportEnum getVendorReport() {
    return vendorReport;
  }

  public void setVendorReport(VendorReportEnum vendorReport) {
    this.vendorReport = vendorReport;
  }

  public DkCloudDataModelPermissionVendorPermissionModel invoices(InvoicesEnum invoices) {
    this.invoices = invoices;
    return this;
  }

   /**
   * Get invoices
   * @return invoices
  **/
  @ApiModelProperty(value = "")
  public InvoicesEnum getInvoices() {
    return invoices;
  }

  public void setInvoices(InvoicesEnum invoices) {
    this.invoices = invoices;
  }

  public DkCloudDataModelPermissionVendorPermissionModel approval(ApprovalEnum approval) {
    this.approval = approval;
    return this;
  }

   /**
   * Get approval
   * @return approval
  **/
  @ApiModelProperty(value = "")
  public ApprovalEnum getApproval() {
    return approval;
  }

  public void setApproval(ApprovalEnum approval) {
    this.approval = approval;
  }

  public DkCloudDataModelPermissionVendorPermissionModel settings(SettingsEnum settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @ApiModelProperty(value = "")
  public SettingsEnum getSettings() {
    return settings;
  }

  public void setSettings(SettingsEnum settings) {
    this.settings = settings;
  }

  public DkCloudDataModelPermissionVendorPermissionModel transactions(TransactionsEnum transactions) {
    this.transactions = transactions;
    return this;
  }

   /**
   * Get transactions
   * @return transactions
  **/
  @ApiModelProperty(value = "")
  public TransactionsEnum getTransactions() {
    return transactions;
  }

  public void setTransactions(TransactionsEnum transactions) {
    this.transactions = transactions;
  }

  public DkCloudDataModelPermissionVendorPermissionModel enabled(EnabledEnum enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @ApiModelProperty(value = "")
  public EnabledEnum getEnabled() {
    return enabled;
  }

  public void setEnabled(EnabledEnum enabled) {
    this.enabled = enabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DkCloudDataModelPermissionVendorPermissionModel dkCloudDataModelPermissionVendorPermissionModel = (DkCloudDataModelPermissionVendorPermissionModel) o;
    return Objects.equals(this.vendors, dkCloudDataModelPermissionVendorPermissionModel.vendors) &&
        Objects.equals(this.vendorReport, dkCloudDataModelPermissionVendorPermissionModel.vendorReport) &&
        Objects.equals(this.invoices, dkCloudDataModelPermissionVendorPermissionModel.invoices) &&
        Objects.equals(this.approval, dkCloudDataModelPermissionVendorPermissionModel.approval) &&
        Objects.equals(this.settings, dkCloudDataModelPermissionVendorPermissionModel.settings) &&
        Objects.equals(this.transactions, dkCloudDataModelPermissionVendorPermissionModel.transactions) &&
        Objects.equals(this.enabled, dkCloudDataModelPermissionVendorPermissionModel.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vendors, vendorReport, invoices, approval, settings, transactions, enabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DkCloudDataModelPermissionVendorPermissionModel {\n");
    
    sb.append("    vendors: ").append(toIndentedString(vendors)).append("\n");
    sb.append("    vendorReport: ").append(toIndentedString(vendorReport)).append("\n");
    sb.append("    invoices: ").append(toIndentedString(invoices)).append("\n");
    sb.append("    approval: ").append(toIndentedString(approval)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

