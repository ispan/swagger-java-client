/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.DkCloudDataModelMembersGrantFieldRequirements;
import io.swagger.client.model.DkCloudDataModelMembersGrantRights;
import java.io.IOException;

/**
 * DkCloudDataModelMembersGrant
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:57:09.866Z")



public class DkCloudDataModelMembersGrant {
  @SerializedName("Code")
  private String code = null;

  @SerializedName("AllowsTravelCost")
  private Boolean allowsTravelCost = null;

  @SerializedName("AmountPerUnitOfTravel")
  private Double amountPerUnitOfTravel = null;

  @SerializedName("Attachment1")
  private String attachment1 = null;

  @SerializedName("Attachment2")
  private String attachment2 = null;

  @SerializedName("Attachment3")
  private String attachment3 = null;

  @SerializedName("Attachment4")
  private String attachment4 = null;

  @SerializedName("AttachmentRequired")
  private Boolean attachmentRequired = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("Company")
  private String company = null;

  @SerializedName("Text")
  private String text = null;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    GENERALAMOUNT("GeneralAmount"),
    
    GENERALCOUNT("GeneralCount"),
    
    GRADUATESTUDY("GraduateStudy"),
    
    SEMINAR("Seminar"),
    
    STUDYTOUR("StudyTour"),
    
    SCHOOLFEES("SchoolFees"),
    
    TRAVELCOST("TravelCost"),
    
    STUDYHOLIDAY("StudyHoliday");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Type")
  private TypeEnum type = null;

  @SerializedName("Rights")
  private DkCloudDataModelMembersGrantRights rights = null;

  /**
   * Gets or Sets therapyType
   */
  @JsonAdapter(TherapyTypeEnum.Adapter.class)
  public enum TherapyTypeEnum {
    NOAPPLICATION("NoApplication"),
    
    THERAPYPAY("TherapyPay"),
    
    SICKPAYSELF("SickPaySelf"),
    
    SICKPAYOTHER("SickPayOther"),
    
    FUNERALPAY("FuneralPay"),
    
    OTHERPAY("OtherPay"),
    
    OTHERPAY2("OtherPay2"),
    
    VIS_A("VIS_A"),
    
    VIS_B("VIS_B"),
    
    VISINDIVIDUALS("VISIndividuals"),
    
    VISGROUP("VISGroup");

    private String value;

    TherapyTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TherapyTypeEnum fromValue(String text) {
      for (TherapyTypeEnum b : TherapyTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TherapyTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TherapyTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TherapyTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TherapyTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("TherapyType")
  private TherapyTypeEnum therapyType = null;

  @SerializedName("Requirements")
  private DkCloudDataModelMembersGrantFieldRequirements requirements = null;

  @SerializedName("StaticTravelAmount")
  private Double staticTravelAmount = null;

  public DkCloudDataModelMembersGrant code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @ApiModelProperty(value = "")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

   /**
   * Get allowsTravelCost
   * @return allowsTravelCost
  **/
  @ApiModelProperty(value = "")
  public Boolean isAllowsTravelCost() {
    return allowsTravelCost;
  }

   /**
   * Get amountPerUnitOfTravel
   * @return amountPerUnitOfTravel
  **/
  @ApiModelProperty(value = "")
  public Double getAmountPerUnitOfTravel() {
    return amountPerUnitOfTravel;
  }

   /**
   * Get attachment1
   * @return attachment1
  **/
  @ApiModelProperty(value = "")
  public String getAttachment1() {
    return attachment1;
  }

   /**
   * Get attachment2
   * @return attachment2
  **/
  @ApiModelProperty(value = "")
  public String getAttachment2() {
    return attachment2;
  }

   /**
   * Get attachment3
   * @return attachment3
  **/
  @ApiModelProperty(value = "")
  public String getAttachment3() {
    return attachment3;
  }

   /**
   * Get attachment4
   * @return attachment4
  **/
  @ApiModelProperty(value = "")
  public String getAttachment4() {
    return attachment4;
  }

  public DkCloudDataModelMembersGrant attachmentRequired(Boolean attachmentRequired) {
    this.attachmentRequired = attachmentRequired;
    return this;
  }

   /**
   * Get attachmentRequired
   * @return attachmentRequired
  **/
  @ApiModelProperty(value = "")
  public Boolean isAttachmentRequired() {
    return attachmentRequired;
  }

  public void setAttachmentRequired(Boolean attachmentRequired) {
    this.attachmentRequired = attachmentRequired;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

   /**
   * Get company
   * @return company
  **/
  @ApiModelProperty(value = "")
  public String getCompany() {
    return company;
  }

   /**
   * Get text
   * @return text
  **/
  @ApiModelProperty(value = "")
  public String getText() {
    return text;
  }

  public DkCloudDataModelMembersGrant type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public DkCloudDataModelMembersGrant rights(DkCloudDataModelMembersGrantRights rights) {
    this.rights = rights;
    return this;
  }

   /**
   * Get rights
   * @return rights
  **/
  @ApiModelProperty(value = "")
  public DkCloudDataModelMembersGrantRights getRights() {
    return rights;
  }

  public void setRights(DkCloudDataModelMembersGrantRights rights) {
    this.rights = rights;
  }

  public DkCloudDataModelMembersGrant therapyType(TherapyTypeEnum therapyType) {
    this.therapyType = therapyType;
    return this;
  }

   /**
   * Get therapyType
   * @return therapyType
  **/
  @ApiModelProperty(value = "")
  public TherapyTypeEnum getTherapyType() {
    return therapyType;
  }

  public void setTherapyType(TherapyTypeEnum therapyType) {
    this.therapyType = therapyType;
  }

  public DkCloudDataModelMembersGrant requirements(DkCloudDataModelMembersGrantFieldRequirements requirements) {
    this.requirements = requirements;
    return this;
  }

   /**
   * Get requirements
   * @return requirements
  **/
  @ApiModelProperty(value = "")
  public DkCloudDataModelMembersGrantFieldRequirements getRequirements() {
    return requirements;
  }

  public void setRequirements(DkCloudDataModelMembersGrantFieldRequirements requirements) {
    this.requirements = requirements;
  }

   /**
   * Get staticTravelAmount
   * @return staticTravelAmount
  **/
  @ApiModelProperty(value = "")
  public Double getStaticTravelAmount() {
    return staticTravelAmount;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DkCloudDataModelMembersGrant dkCloudDataModelMembersGrant = (DkCloudDataModelMembersGrant) o;
    return Objects.equals(this.code, dkCloudDataModelMembersGrant.code) &&
        Objects.equals(this.allowsTravelCost, dkCloudDataModelMembersGrant.allowsTravelCost) &&
        Objects.equals(this.amountPerUnitOfTravel, dkCloudDataModelMembersGrant.amountPerUnitOfTravel) &&
        Objects.equals(this.attachment1, dkCloudDataModelMembersGrant.attachment1) &&
        Objects.equals(this.attachment2, dkCloudDataModelMembersGrant.attachment2) &&
        Objects.equals(this.attachment3, dkCloudDataModelMembersGrant.attachment3) &&
        Objects.equals(this.attachment4, dkCloudDataModelMembersGrant.attachment4) &&
        Objects.equals(this.attachmentRequired, dkCloudDataModelMembersGrant.attachmentRequired) &&
        Objects.equals(this.description, dkCloudDataModelMembersGrant.description) &&
        Objects.equals(this.company, dkCloudDataModelMembersGrant.company) &&
        Objects.equals(this.text, dkCloudDataModelMembersGrant.text) &&
        Objects.equals(this.type, dkCloudDataModelMembersGrant.type) &&
        Objects.equals(this.rights, dkCloudDataModelMembersGrant.rights) &&
        Objects.equals(this.therapyType, dkCloudDataModelMembersGrant.therapyType) &&
        Objects.equals(this.requirements, dkCloudDataModelMembersGrant.requirements) &&
        Objects.equals(this.staticTravelAmount, dkCloudDataModelMembersGrant.staticTravelAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, allowsTravelCost, amountPerUnitOfTravel, attachment1, attachment2, attachment3, attachment4, attachmentRequired, description, company, text, type, rights, therapyType, requirements, staticTravelAmount);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DkCloudDataModelMembersGrant {\n");
    
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    allowsTravelCost: ").append(toIndentedString(allowsTravelCost)).append("\n");
    sb.append("    amountPerUnitOfTravel: ").append(toIndentedString(amountPerUnitOfTravel)).append("\n");
    sb.append("    attachment1: ").append(toIndentedString(attachment1)).append("\n");
    sb.append("    attachment2: ").append(toIndentedString(attachment2)).append("\n");
    sb.append("    attachment3: ").append(toIndentedString(attachment3)).append("\n");
    sb.append("    attachment4: ").append(toIndentedString(attachment4)).append("\n");
    sb.append("    attachmentRequired: ").append(toIndentedString(attachmentRequired)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("    therapyType: ").append(toIndentedString(therapyType)).append("\n");
    sb.append("    requirements: ").append(toIndentedString(requirements)).append("\n");
    sb.append("    staticTravelAmount: ").append(toIndentedString(staticTravelAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

