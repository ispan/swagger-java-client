/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DkPlusAPIModelsPurchaseLine
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:57:09.866Z")



public class DkPlusAPIModelsPurchaseLine {
  @SerializedName("Warehouse")
  private String warehouse = null;

  @SerializedName("Code")
  private String code = null;

  /**
   * Gets or Sets codeType
   */
  @JsonAdapter(CodeTypeEnum.Adapter.class)
  public enum CodeTypeEnum {
    ITEMCODE("ItemCode"),
    
    BARCODE("Barcode"),
    
    VENDORITEMCODE("VendorItemCode");

    private String value;

    CodeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeTypeEnum fromValue(String text) {
      for (CodeTypeEnum b : CodeTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CodeTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("CodeType")
  private CodeTypeEnum codeType = null;

  @SerializedName("Reference")
  private String reference = null;

  @SerializedName("Quantity")
  private Double quantity = null;

  @SerializedName("Id")
  private Integer id = null;

  public DkPlusAPIModelsPurchaseLine warehouse(String warehouse) {
    this.warehouse = warehouse;
    return this;
  }

   /**
   * Get warehouse
   * @return warehouse
  **/
  @ApiModelProperty(value = "")
  public String getWarehouse() {
    return warehouse;
  }

  public void setWarehouse(String warehouse) {
    this.warehouse = warehouse;
  }

  public DkPlusAPIModelsPurchaseLine code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @ApiModelProperty(value = "")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public DkPlusAPIModelsPurchaseLine codeType(CodeTypeEnum codeType) {
    this.codeType = codeType;
    return this;
  }

   /**
   * Get codeType
   * @return codeType
  **/
  @ApiModelProperty(value = "")
  public CodeTypeEnum getCodeType() {
    return codeType;
  }

  public void setCodeType(CodeTypeEnum codeType) {
    this.codeType = codeType;
  }

  public DkPlusAPIModelsPurchaseLine reference(String reference) {
    this.reference = reference;
    return this;
  }

   /**
   * Get reference
   * @return reference
  **/
  @ApiModelProperty(value = "")
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }

  public DkPlusAPIModelsPurchaseLine quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Get quantity
   * @return quantity
  **/
  @ApiModelProperty(value = "")
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }

  public DkPlusAPIModelsPurchaseLine id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(value = "")
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DkPlusAPIModelsPurchaseLine dkPlusAPIModelsPurchaseLine = (DkPlusAPIModelsPurchaseLine) o;
    return Objects.equals(this.warehouse, dkPlusAPIModelsPurchaseLine.warehouse) &&
        Objects.equals(this.code, dkPlusAPIModelsPurchaseLine.code) &&
        Objects.equals(this.codeType, dkPlusAPIModelsPurchaseLine.codeType) &&
        Objects.equals(this.reference, dkPlusAPIModelsPurchaseLine.reference) &&
        Objects.equals(this.quantity, dkPlusAPIModelsPurchaseLine.quantity) &&
        Objects.equals(this.id, dkPlusAPIModelsPurchaseLine.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(warehouse, code, codeType, reference, quantity, id);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DkPlusAPIModelsPurchaseLine {\n");
    
    sb.append("    warehouse: ").append(toIndentedString(warehouse)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    codeType: ").append(toIndentedString(codeType)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

