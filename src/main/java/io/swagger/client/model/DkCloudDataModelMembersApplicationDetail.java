/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;

/**
 * DkCloudDataModelMembersApplicationDetail
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:57:09.866Z")



public class DkCloudDataModelMembersApplicationDetail {
  /**
   * Gets or Sets typeOfPayment
   */
  @JsonAdapter(TypeOfPaymentEnum.Adapter.class)
  public enum TypeOfPaymentEnum {
    NORMAL("Normal"),
    
    COST("Cost"),
    
    PAID("Paid");

    private String value;

    TypeOfPaymentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeOfPaymentEnum fromValue(String text) {
      for (TypeOfPaymentEnum b : TypeOfPaymentEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeOfPaymentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeOfPaymentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeOfPaymentEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeOfPaymentEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("TypeOfPayment")
  private TypeOfPaymentEnum typeOfPayment = null;

  @SerializedName("ActualPaymentDate")
  private OffsetDateTime actualPaymentDate = null;

  @SerializedName("PaymentAmount")
  private Double paymentAmount = null;

  @SerializedName("PaymentPaid")
  private Boolean paymentPaid = null;

  @SerializedName("AmountPaid")
  private Double amountPaid = null;

  @SerializedName("TaxAmountPaid")
  private Double taxAmountPaid = null;

  @SerializedName("ExtraProperties")
  private Map<String, String> extraProperties = null;

  public DkCloudDataModelMembersApplicationDetail typeOfPayment(TypeOfPaymentEnum typeOfPayment) {
    this.typeOfPayment = typeOfPayment;
    return this;
  }

   /**
   * Get typeOfPayment
   * @return typeOfPayment
  **/
  @ApiModelProperty(value = "")
  public TypeOfPaymentEnum getTypeOfPayment() {
    return typeOfPayment;
  }

  public void setTypeOfPayment(TypeOfPaymentEnum typeOfPayment) {
    this.typeOfPayment = typeOfPayment;
  }

  public DkCloudDataModelMembersApplicationDetail actualPaymentDate(OffsetDateTime actualPaymentDate) {
    this.actualPaymentDate = actualPaymentDate;
    return this;
  }

   /**
   * Get actualPaymentDate
   * @return actualPaymentDate
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getActualPaymentDate() {
    return actualPaymentDate;
  }

  public void setActualPaymentDate(OffsetDateTime actualPaymentDate) {
    this.actualPaymentDate = actualPaymentDate;
  }

  public DkCloudDataModelMembersApplicationDetail paymentAmount(Double paymentAmount) {
    this.paymentAmount = paymentAmount;
    return this;
  }

   /**
   * Get paymentAmount
   * @return paymentAmount
  **/
  @ApiModelProperty(value = "")
  public Double getPaymentAmount() {
    return paymentAmount;
  }

  public void setPaymentAmount(Double paymentAmount) {
    this.paymentAmount = paymentAmount;
  }

  public DkCloudDataModelMembersApplicationDetail paymentPaid(Boolean paymentPaid) {
    this.paymentPaid = paymentPaid;
    return this;
  }

   /**
   * Get paymentPaid
   * @return paymentPaid
  **/
  @ApiModelProperty(value = "")
  public Boolean isPaymentPaid() {
    return paymentPaid;
  }

  public void setPaymentPaid(Boolean paymentPaid) {
    this.paymentPaid = paymentPaid;
  }

  public DkCloudDataModelMembersApplicationDetail amountPaid(Double amountPaid) {
    this.amountPaid = amountPaid;
    return this;
  }

   /**
   * Get amountPaid
   * @return amountPaid
  **/
  @ApiModelProperty(value = "")
  public Double getAmountPaid() {
    return amountPaid;
  }

  public void setAmountPaid(Double amountPaid) {
    this.amountPaid = amountPaid;
  }

  public DkCloudDataModelMembersApplicationDetail taxAmountPaid(Double taxAmountPaid) {
    this.taxAmountPaid = taxAmountPaid;
    return this;
  }

   /**
   * Get taxAmountPaid
   * @return taxAmountPaid
  **/
  @ApiModelProperty(value = "")
  public Double getTaxAmountPaid() {
    return taxAmountPaid;
  }

  public void setTaxAmountPaid(Double taxAmountPaid) {
    this.taxAmountPaid = taxAmountPaid;
  }

  public DkCloudDataModelMembersApplicationDetail extraProperties(Map<String, String> extraProperties) {
    this.extraProperties = extraProperties;
    return this;
  }

  public DkCloudDataModelMembersApplicationDetail putExtraPropertiesItem(String key, String extraPropertiesItem) {
    if (this.extraProperties == null) {
      this.extraProperties = new HashMap<String, String>();
    }
    this.extraProperties.put(key, extraPropertiesItem);
    return this;
  }

   /**
   * Get extraProperties
   * @return extraProperties
  **/
  @ApiModelProperty(value = "")
  public Map<String, String> getExtraProperties() {
    return extraProperties;
  }

  public void setExtraProperties(Map<String, String> extraProperties) {
    this.extraProperties = extraProperties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DkCloudDataModelMembersApplicationDetail dkCloudDataModelMembersApplicationDetail = (DkCloudDataModelMembersApplicationDetail) o;
    return Objects.equals(this.typeOfPayment, dkCloudDataModelMembersApplicationDetail.typeOfPayment) &&
        Objects.equals(this.actualPaymentDate, dkCloudDataModelMembersApplicationDetail.actualPaymentDate) &&
        Objects.equals(this.paymentAmount, dkCloudDataModelMembersApplicationDetail.paymentAmount) &&
        Objects.equals(this.paymentPaid, dkCloudDataModelMembersApplicationDetail.paymentPaid) &&
        Objects.equals(this.amountPaid, dkCloudDataModelMembersApplicationDetail.amountPaid) &&
        Objects.equals(this.taxAmountPaid, dkCloudDataModelMembersApplicationDetail.taxAmountPaid) &&
        Objects.equals(this.extraProperties, dkCloudDataModelMembersApplicationDetail.extraProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(typeOfPayment, actualPaymentDate, paymentAmount, paymentPaid, amountPaid, taxAmountPaid, extraProperties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DkCloudDataModelMembersApplicationDetail {\n");
    
    sb.append("    typeOfPayment: ").append(toIndentedString(typeOfPayment)).append("\n");
    sb.append("    actualPaymentDate: ").append(toIndentedString(actualPaymentDate)).append("\n");
    sb.append("    paymentAmount: ").append(toIndentedString(paymentAmount)).append("\n");
    sb.append("    paymentPaid: ").append(toIndentedString(paymentPaid)).append("\n");
    sb.append("    amountPaid: ").append(toIndentedString(amountPaid)).append("\n");
    sb.append("    taxAmountPaid: ").append(toIndentedString(taxAmountPaid)).append("\n");
    sb.append("    extraProperties: ").append(toIndentedString(extraProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

