/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DkCloudDataModelPermissionSalesPermissionModel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:57:09.866Z")



public class DkCloudDataModelPermissionSalesPermissionModel {
  /**
   * Gets or Sets invoices
   */
  @JsonAdapter(InvoicesEnum.Adapter.class)
  public enum InvoicesEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    InvoicesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoicesEnum fromValue(String text) {
      for (InvoicesEnum b : InvoicesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InvoicesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoicesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoicesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InvoicesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Invoices")
  private InvoicesEnum invoices = null;

  /**
   * Gets or Sets invoicesReport
   */
  @JsonAdapter(InvoicesReportEnum.Adapter.class)
  public enum InvoicesReportEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    InvoicesReportEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoicesReportEnum fromValue(String text) {
      for (InvoicesReportEnum b : InvoicesReportEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InvoicesReportEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoicesReportEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoicesReportEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InvoicesReportEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("InvoicesReport")
  private InvoicesReportEnum invoicesReport = null;

  /**
   * Gets or Sets invoicesDashboard
   */
  @JsonAdapter(InvoicesDashboardEnum.Adapter.class)
  public enum InvoicesDashboardEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    InvoicesDashboardEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvoicesDashboardEnum fromValue(String text) {
      for (InvoicesDashboardEnum b : InvoicesDashboardEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InvoicesDashboardEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvoicesDashboardEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvoicesDashboardEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return InvoicesDashboardEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("InvoicesDashboard")
  private InvoicesDashboardEnum invoicesDashboard = null;

  /**
   * Gets or Sets orders
   */
  @JsonAdapter(OrdersEnum.Adapter.class)
  public enum OrdersEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    OrdersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrdersEnum fromValue(String text) {
      for (OrdersEnum b : OrdersEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OrdersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrdersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrdersEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrdersEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Orders")
  private OrdersEnum orders = null;

  /**
   * Gets or Sets quote
   */
  @JsonAdapter(QuoteEnum.Adapter.class)
  public enum QuoteEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    QuoteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuoteEnum fromValue(String text) {
      for (QuoteEnum b : QuoteEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<QuoteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuoteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuoteEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return QuoteEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Quote")
  private QuoteEnum quote = null;

  /**
   * Gets or Sets subscription
   */
  @JsonAdapter(SubscriptionEnum.Adapter.class)
  public enum SubscriptionEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    SubscriptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubscriptionEnum fromValue(String text) {
      for (SubscriptionEnum b : SubscriptionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SubscriptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubscriptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubscriptionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SubscriptionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Subscription")
  private SubscriptionEnum subscription = null;

  /**
   * Gets or Sets settings
   */
  @JsonAdapter(SettingsEnum.Adapter.class)
  public enum SettingsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    SettingsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SettingsEnum fromValue(String text) {
      for (SettingsEnum b : SettingsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SettingsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SettingsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SettingsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SettingsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Settings")
  private SettingsEnum settings = null;

  /**
   * Gets or Sets salespersons
   */
  @JsonAdapter(SalespersonsEnum.Adapter.class)
  public enum SalespersonsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    SalespersonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SalespersonsEnum fromValue(String text) {
      for (SalespersonsEnum b : SalespersonsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SalespersonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SalespersonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SalespersonsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SalespersonsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Salespersons")
  private SalespersonsEnum salespersons = null;

  /**
   * Gets or Sets enabled
   */
  @JsonAdapter(EnabledEnum.Adapter.class)
  public enum EnabledEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled"),
    
    BLOCKED("Blocked");

    private String value;

    EnabledEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnabledEnum fromValue(String text) {
      for (EnabledEnum b : EnabledEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EnabledEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnabledEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnabledEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EnabledEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Enabled")
  private EnabledEnum enabled = null;

  public DkCloudDataModelPermissionSalesPermissionModel invoices(InvoicesEnum invoices) {
    this.invoices = invoices;
    return this;
  }

   /**
   * Get invoices
   * @return invoices
  **/
  @ApiModelProperty(value = "")
  public InvoicesEnum getInvoices() {
    return invoices;
  }

  public void setInvoices(InvoicesEnum invoices) {
    this.invoices = invoices;
  }

  public DkCloudDataModelPermissionSalesPermissionModel invoicesReport(InvoicesReportEnum invoicesReport) {
    this.invoicesReport = invoicesReport;
    return this;
  }

   /**
   * Get invoicesReport
   * @return invoicesReport
  **/
  @ApiModelProperty(value = "")
  public InvoicesReportEnum getInvoicesReport() {
    return invoicesReport;
  }

  public void setInvoicesReport(InvoicesReportEnum invoicesReport) {
    this.invoicesReport = invoicesReport;
  }

  public DkCloudDataModelPermissionSalesPermissionModel invoicesDashboard(InvoicesDashboardEnum invoicesDashboard) {
    this.invoicesDashboard = invoicesDashboard;
    return this;
  }

   /**
   * Get invoicesDashboard
   * @return invoicesDashboard
  **/
  @ApiModelProperty(value = "")
  public InvoicesDashboardEnum getInvoicesDashboard() {
    return invoicesDashboard;
  }

  public void setInvoicesDashboard(InvoicesDashboardEnum invoicesDashboard) {
    this.invoicesDashboard = invoicesDashboard;
  }

  public DkCloudDataModelPermissionSalesPermissionModel orders(OrdersEnum orders) {
    this.orders = orders;
    return this;
  }

   /**
   * Get orders
   * @return orders
  **/
  @ApiModelProperty(value = "")
  public OrdersEnum getOrders() {
    return orders;
  }

  public void setOrders(OrdersEnum orders) {
    this.orders = orders;
  }

  public DkCloudDataModelPermissionSalesPermissionModel quote(QuoteEnum quote) {
    this.quote = quote;
    return this;
  }

   /**
   * Get quote
   * @return quote
  **/
  @ApiModelProperty(value = "")
  public QuoteEnum getQuote() {
    return quote;
  }

  public void setQuote(QuoteEnum quote) {
    this.quote = quote;
  }

  public DkCloudDataModelPermissionSalesPermissionModel subscription(SubscriptionEnum subscription) {
    this.subscription = subscription;
    return this;
  }

   /**
   * Get subscription
   * @return subscription
  **/
  @ApiModelProperty(value = "")
  public SubscriptionEnum getSubscription() {
    return subscription;
  }

  public void setSubscription(SubscriptionEnum subscription) {
    this.subscription = subscription;
  }

  public DkCloudDataModelPermissionSalesPermissionModel settings(SettingsEnum settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @ApiModelProperty(value = "")
  public SettingsEnum getSettings() {
    return settings;
  }

  public void setSettings(SettingsEnum settings) {
    this.settings = settings;
  }

  public DkCloudDataModelPermissionSalesPermissionModel salespersons(SalespersonsEnum salespersons) {
    this.salespersons = salespersons;
    return this;
  }

   /**
   * Get salespersons
   * @return salespersons
  **/
  @ApiModelProperty(value = "")
  public SalespersonsEnum getSalespersons() {
    return salespersons;
  }

  public void setSalespersons(SalespersonsEnum salespersons) {
    this.salespersons = salespersons;
  }

  public DkCloudDataModelPermissionSalesPermissionModel enabled(EnabledEnum enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @ApiModelProperty(value = "")
  public EnabledEnum getEnabled() {
    return enabled;
  }

  public void setEnabled(EnabledEnum enabled) {
    this.enabled = enabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DkCloudDataModelPermissionSalesPermissionModel dkCloudDataModelPermissionSalesPermissionModel = (DkCloudDataModelPermissionSalesPermissionModel) o;
    return Objects.equals(this.invoices, dkCloudDataModelPermissionSalesPermissionModel.invoices) &&
        Objects.equals(this.invoicesReport, dkCloudDataModelPermissionSalesPermissionModel.invoicesReport) &&
        Objects.equals(this.invoicesDashboard, dkCloudDataModelPermissionSalesPermissionModel.invoicesDashboard) &&
        Objects.equals(this.orders, dkCloudDataModelPermissionSalesPermissionModel.orders) &&
        Objects.equals(this.quote, dkCloudDataModelPermissionSalesPermissionModel.quote) &&
        Objects.equals(this.subscription, dkCloudDataModelPermissionSalesPermissionModel.subscription) &&
        Objects.equals(this.settings, dkCloudDataModelPermissionSalesPermissionModel.settings) &&
        Objects.equals(this.salespersons, dkCloudDataModelPermissionSalesPermissionModel.salespersons) &&
        Objects.equals(this.enabled, dkCloudDataModelPermissionSalesPermissionModel.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invoices, invoicesReport, invoicesDashboard, orders, quote, subscription, settings, salespersons, enabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DkCloudDataModelPermissionSalesPermissionModel {\n");
    
    sb.append("    invoices: ").append(toIndentedString(invoices)).append("\n");
    sb.append("    invoicesReport: ").append(toIndentedString(invoicesReport)).append("\n");
    sb.append("    invoicesDashboard: ").append(toIndentedString(invoicesDashboard)).append("\n");
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    quote: ").append(toIndentedString(quote)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    salespersons: ").append(toIndentedString(salespersons)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

