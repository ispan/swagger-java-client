/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DkCloudDataModelPermissionPurchaseOrdertPermissionModel
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-12T12:57:09.866Z")



public class DkCloudDataModelPermissionPurchaseOrdertPermissionModel {
  /**
   * Gets or Sets orders
   */
  @JsonAdapter(OrdersEnum.Adapter.class)
  public enum OrdersEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    OrdersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrdersEnum fromValue(String text) {
      for (OrdersEnum b : OrdersEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OrdersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrdersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrdersEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrdersEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Orders")
  private OrdersEnum orders = null;

  /**
   * Gets or Sets itemReception
   */
  @JsonAdapter(ItemReceptionEnum.Adapter.class)
  public enum ItemReceptionEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    ItemReceptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ItemReceptionEnum fromValue(String text) {
      for (ItemReceptionEnum b : ItemReceptionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ItemReceptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ItemReceptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ItemReceptionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ItemReceptionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("ItemReception")
  private ItemReceptionEnum itemReception = null;

  /**
   * Gets or Sets customDecliration
   */
  @JsonAdapter(CustomDeclirationEnum.Adapter.class)
  public enum CustomDeclirationEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    CustomDeclirationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomDeclirationEnum fromValue(String text) {
      for (CustomDeclirationEnum b : CustomDeclirationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CustomDeclirationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomDeclirationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomDeclirationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CustomDeclirationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("CustomDecliration")
  private CustomDeclirationEnum customDecliration = null;

  /**
   * Gets or Sets orderSuggestion
   */
  @JsonAdapter(OrderSuggestionEnum.Adapter.class)
  public enum OrderSuggestionEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    OrderSuggestionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrderSuggestionEnum fromValue(String text) {
      for (OrderSuggestionEnum b : OrderSuggestionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<OrderSuggestionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrderSuggestionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrderSuggestionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return OrderSuggestionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("OrderSuggestion")
  private OrderSuggestionEnum orderSuggestion = null;

  /**
   * Gets or Sets reports
   */
  @JsonAdapter(ReportsEnum.Adapter.class)
  public enum ReportsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    ReportsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportsEnum fromValue(String text) {
      for (ReportsEnum b : ReportsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ReportsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ReportsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Reports")
  private ReportsEnum reports = null;

  /**
   * Gets or Sets dashboard
   */
  @JsonAdapter(DashboardEnum.Adapter.class)
  public enum DashboardEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    DashboardEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DashboardEnum fromValue(String text) {
      for (DashboardEnum b : DashboardEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DashboardEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DashboardEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DashboardEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DashboardEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Dashboard")
  private DashboardEnum dashboard = null;

  /**
   * Gets or Sets settings
   */
  @JsonAdapter(SettingsEnum.Adapter.class)
  public enum SettingsEnum {
    FULL("Full"),
    
    VIEW("View"),
    
    MODIFY("Modify"),
    
    NONE("None"),
    
    DENY("Deny");

    private String value;

    SettingsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SettingsEnum fromValue(String text) {
      for (SettingsEnum b : SettingsEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SettingsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SettingsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SettingsEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SettingsEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Settings")
  private SettingsEnum settings = null;

  /**
   * Gets or Sets enabled
   */
  @JsonAdapter(EnabledEnum.Adapter.class)
  public enum EnabledEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled"),
    
    BLOCKED("Blocked");

    private String value;

    EnabledEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnabledEnum fromValue(String text) {
      for (EnabledEnum b : EnabledEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EnabledEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnabledEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnabledEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EnabledEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("Enabled")
  private EnabledEnum enabled = null;

  public DkCloudDataModelPermissionPurchaseOrdertPermissionModel orders(OrdersEnum orders) {
    this.orders = orders;
    return this;
  }

   /**
   * Get orders
   * @return orders
  **/
  @ApiModelProperty(value = "")
  public OrdersEnum getOrders() {
    return orders;
  }

  public void setOrders(OrdersEnum orders) {
    this.orders = orders;
  }

  public DkCloudDataModelPermissionPurchaseOrdertPermissionModel itemReception(ItemReceptionEnum itemReception) {
    this.itemReception = itemReception;
    return this;
  }

   /**
   * Get itemReception
   * @return itemReception
  **/
  @ApiModelProperty(value = "")
  public ItemReceptionEnum getItemReception() {
    return itemReception;
  }

  public void setItemReception(ItemReceptionEnum itemReception) {
    this.itemReception = itemReception;
  }

  public DkCloudDataModelPermissionPurchaseOrdertPermissionModel customDecliration(CustomDeclirationEnum customDecliration) {
    this.customDecliration = customDecliration;
    return this;
  }

   /**
   * Get customDecliration
   * @return customDecliration
  **/
  @ApiModelProperty(value = "")
  public CustomDeclirationEnum getCustomDecliration() {
    return customDecliration;
  }

  public void setCustomDecliration(CustomDeclirationEnum customDecliration) {
    this.customDecliration = customDecliration;
  }

  public DkCloudDataModelPermissionPurchaseOrdertPermissionModel orderSuggestion(OrderSuggestionEnum orderSuggestion) {
    this.orderSuggestion = orderSuggestion;
    return this;
  }

   /**
   * Get orderSuggestion
   * @return orderSuggestion
  **/
  @ApiModelProperty(value = "")
  public OrderSuggestionEnum getOrderSuggestion() {
    return orderSuggestion;
  }

  public void setOrderSuggestion(OrderSuggestionEnum orderSuggestion) {
    this.orderSuggestion = orderSuggestion;
  }

  public DkCloudDataModelPermissionPurchaseOrdertPermissionModel reports(ReportsEnum reports) {
    this.reports = reports;
    return this;
  }

   /**
   * Get reports
   * @return reports
  **/
  @ApiModelProperty(value = "")
  public ReportsEnum getReports() {
    return reports;
  }

  public void setReports(ReportsEnum reports) {
    this.reports = reports;
  }

  public DkCloudDataModelPermissionPurchaseOrdertPermissionModel dashboard(DashboardEnum dashboard) {
    this.dashboard = dashboard;
    return this;
  }

   /**
   * Get dashboard
   * @return dashboard
  **/
  @ApiModelProperty(value = "")
  public DashboardEnum getDashboard() {
    return dashboard;
  }

  public void setDashboard(DashboardEnum dashboard) {
    this.dashboard = dashboard;
  }

  public DkCloudDataModelPermissionPurchaseOrdertPermissionModel settings(SettingsEnum settings) {
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @ApiModelProperty(value = "")
  public SettingsEnum getSettings() {
    return settings;
  }

  public void setSettings(SettingsEnum settings) {
    this.settings = settings;
  }

  public DkCloudDataModelPermissionPurchaseOrdertPermissionModel enabled(EnabledEnum enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @ApiModelProperty(value = "")
  public EnabledEnum getEnabled() {
    return enabled;
  }

  public void setEnabled(EnabledEnum enabled) {
    this.enabled = enabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DkCloudDataModelPermissionPurchaseOrdertPermissionModel dkCloudDataModelPermissionPurchaseOrdertPermissionModel = (DkCloudDataModelPermissionPurchaseOrdertPermissionModel) o;
    return Objects.equals(this.orders, dkCloudDataModelPermissionPurchaseOrdertPermissionModel.orders) &&
        Objects.equals(this.itemReception, dkCloudDataModelPermissionPurchaseOrdertPermissionModel.itemReception) &&
        Objects.equals(this.customDecliration, dkCloudDataModelPermissionPurchaseOrdertPermissionModel.customDecliration) &&
        Objects.equals(this.orderSuggestion, dkCloudDataModelPermissionPurchaseOrdertPermissionModel.orderSuggestion) &&
        Objects.equals(this.reports, dkCloudDataModelPermissionPurchaseOrdertPermissionModel.reports) &&
        Objects.equals(this.dashboard, dkCloudDataModelPermissionPurchaseOrdertPermissionModel.dashboard) &&
        Objects.equals(this.settings, dkCloudDataModelPermissionPurchaseOrdertPermissionModel.settings) &&
        Objects.equals(this.enabled, dkCloudDataModelPermissionPurchaseOrdertPermissionModel.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(orders, itemReception, customDecliration, orderSuggestion, reports, dashboard, settings, enabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DkCloudDataModelPermissionPurchaseOrdertPermissionModel {\n");
    
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    itemReception: ").append(toIndentedString(itemReception)).append("\n");
    sb.append("    customDecliration: ").append(toIndentedString(customDecliration)).append("\n");
    sb.append("    orderSuggestion: ").append(toIndentedString(orderSuggestion)).append("\n");
    sb.append("    reports: ").append(toIndentedString(reports)).append("\n");
    sb.append("    dashboard: ").append(toIndentedString(dashboard)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

