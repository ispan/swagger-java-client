/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkCloudDataModelVendorsTransaction;
import io.swagger.client.model.DkCloudDataModelVendorsVendorModel;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VendorApi {
    private ApiClient apiClient;

    public VendorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VendorApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for vendorGetByID
     * @param id Vendor Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vendorGetByIDCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Vendor/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vendorGetByIDValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling vendorGetByID(Async)");
        }
        

        com.squareup.okhttp.Call call = vendorGetByIDCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Vendor
     * 
     * @param id Vendor Number (required)
     * @return DkCloudDataModelVendorsVendorModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelVendorsVendorModel vendorGetByID(String id) throws ApiException {
        ApiResponse<DkCloudDataModelVendorsVendorModel> resp = vendorGetByIDWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Vendor
     * 
     * @param id Vendor Number (required)
     * @return ApiResponse&lt;DkCloudDataModelVendorsVendorModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelVendorsVendorModel> vendorGetByIDWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = vendorGetByIDValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelVendorsVendorModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Vendor (asynchronously)
     * 
     * @param id Vendor Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vendorGetByIDAsync(String id, final ApiCallback<DkCloudDataModelVendorsVendorModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vendorGetByIDValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelVendorsVendorModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vendorGetVendors
     * @param zipCode  (optional)
     * @param modifiedAfter  (optional)
     * @param modifiedBefore  (optional)
     * @param group  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vendorGetVendorsCall(String zipCode, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Vendor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (zipCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zipCode", zipCode));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vendorGetVendorsValidateBeforeCall(String zipCode, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String group, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = vendorGetVendorsCall(zipCode, modifiedAfter, modifiedBefore, group, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get All Vendors
     * 
     * @param zipCode  (optional)
     * @param modifiedAfter  (optional)
     * @param modifiedBefore  (optional)
     * @param group  (optional)
     * @return List&lt;DkCloudDataModelVendorsVendorModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelVendorsVendorModel> vendorGetVendors(String zipCode, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String group) throws ApiException {
        ApiResponse<List<DkCloudDataModelVendorsVendorModel>> resp = vendorGetVendorsWithHttpInfo(zipCode, modifiedAfter, modifiedBefore, group);
        return resp.getData();
    }

    /**
     * Get All Vendors
     * 
     * @param zipCode  (optional)
     * @param modifiedAfter  (optional)
     * @param modifiedBefore  (optional)
     * @param group  (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelVendorsVendorModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelVendorsVendorModel>> vendorGetVendorsWithHttpInfo(String zipCode, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String group) throws ApiException {
        com.squareup.okhttp.Call call = vendorGetVendorsValidateBeforeCall(zipCode, modifiedAfter, modifiedBefore, group, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsVendorModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get All Vendors (asynchronously)
     * 
     * @param zipCode  (optional)
     * @param modifiedAfter  (optional)
     * @param modifiedBefore  (optional)
     * @param group  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vendorGetVendorsAsync(String zipCode, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String group, final ApiCallback<List<DkCloudDataModelVendorsVendorModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vendorGetVendorsValidateBeforeCall(zipCode, modifiedAfter, modifiedBefore, group, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsVendorModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vendorGetVendorsPage
     * @param page Page Number (required)
     * @param count Objects on page (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vendorGetVendorsPageCall(Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Vendor/page/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vendorGetVendorsPageValidateBeforeCall(Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling vendorGetVendorsPage(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling vendorGetVendorsPage(Async)");
        }
        

        com.squareup.okhttp.Call call = vendorGetVendorsPageCall(page, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Vendors Pages
     * 
     * @param page Page Number (required)
     * @param count Objects on page (required)
     * @return List&lt;DkCloudDataModelVendorsVendorModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelVendorsVendorModel> vendorGetVendorsPage(Integer page, Integer count) throws ApiException {
        ApiResponse<List<DkCloudDataModelVendorsVendorModel>> resp = vendorGetVendorsPageWithHttpInfo(page, count);
        return resp.getData();
    }

    /**
     * Get Vendors Pages
     * 
     * @param page Page Number (required)
     * @param count Objects on page (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelVendorsVendorModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelVendorsVendorModel>> vendorGetVendorsPageWithHttpInfo(Integer page, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = vendorGetVendorsPageValidateBeforeCall(page, count, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsVendorModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Vendors Pages (asynchronously)
     * 
     * @param page Page Number (required)
     * @param count Objects on page (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vendorGetVendorsPageAsync(Integer page, Integer count, final ApiCallback<List<DkCloudDataModelVendorsVendorModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vendorGetVendorsPageValidateBeforeCall(page, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsVendorModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vendorPost
     * @param obj Vendor Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vendorPostCall(DkCloudDataModelVendorsVendorModel obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = obj;

        // create path and map variables
        String localVarPath = "/api/v1/Vendor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vendorPostValidateBeforeCall(DkCloudDataModelVendorsVendorModel obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'obj' is set
        if (obj == null) {
            throw new ApiException("Missing the required parameter 'obj' when calling vendorPost(Async)");
        }
        

        com.squareup.okhttp.Call call = vendorPostCall(obj, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Vendor
     * 
     * @param obj Vendor Model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void vendorPost(DkCloudDataModelVendorsVendorModel obj) throws ApiException {
        vendorPostWithHttpInfo(obj);
    }

    /**
     * Create Vendor
     * 
     * @param obj Vendor Model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> vendorPostWithHttpInfo(DkCloudDataModelVendorsVendorModel obj) throws ApiException {
        com.squareup.okhttp.Call call = vendorPostValidateBeforeCall(obj, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create Vendor (asynchronously)
     * 
     * @param obj Vendor Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vendorPostAsync(DkCloudDataModelVendorsVendorModel obj, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vendorPostValidateBeforeCall(obj, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for vendorSearchVendors
     * @param value Value to Search For (required)
     * @param max Max to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vendorSearchVendorsCall(String value, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Vendor/search/{value}/{max}"
            .replaceAll("\\{" + "value" + "\\}", apiClient.escapeString(value.toString()))
            .replaceAll("\\{" + "max" + "\\}", apiClient.escapeString(max.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vendorSearchVendorsValidateBeforeCall(String value, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling vendorSearchVendors(Async)");
        }
        
        // verify the required parameter 'max' is set
        if (max == null) {
            throw new ApiException("Missing the required parameter 'max' when calling vendorSearchVendors(Async)");
        }
        

        com.squareup.okhttp.Call call = vendorSearchVendorsCall(value, max, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Vendors
     * 
     * @param value Value to Search For (required)
     * @param max Max to return (required)
     * @return List&lt;DkCloudDataModelVendorsVendorModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelVendorsVendorModel> vendorSearchVendors(String value, Integer max) throws ApiException {
        ApiResponse<List<DkCloudDataModelVendorsVendorModel>> resp = vendorSearchVendorsWithHttpInfo(value, max);
        return resp.getData();
    }

    /**
     * Search Vendors
     * 
     * @param value Value to Search For (required)
     * @param max Max to return (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelVendorsVendorModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelVendorsVendorModel>> vendorSearchVendorsWithHttpInfo(String value, Integer max) throws ApiException {
        com.squareup.okhttp.Call call = vendorSearchVendorsValidateBeforeCall(value, max, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsVendorModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Vendors (asynchronously)
     * 
     * @param value Value to Search For (required)
     * @param max Max to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vendorSearchVendorsAsync(String value, Integer max, final ApiCallback<List<DkCloudDataModelVendorsVendorModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vendorSearchVendorsValidateBeforeCall(value, max, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsVendorModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vendorTransactionGetVendorTransactions
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vendorTransactionGetVendorTransactionsCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vendor/transaction/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (dueAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dueAfter", dueAfter));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (voucher != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucher", voucher));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (recordid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recordid", recordid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vendorTransactionGetVendorTransactionsValidateBeforeCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling vendorTransactionGetVendorTransactions(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling vendorTransactionGetVendorTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = vendorTransactionGetVendorTransactionsCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid  (optional)
     * @return List&lt;DkCloudDataModelVendorsTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelVendorsTransaction> vendorTransactionGetVendorTransactions(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid) throws ApiException {
        ApiResponse<List<DkCloudDataModelVendorsTransaction>> resp = vendorTransactionGetVendorTransactionsWithHttpInfo(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid  (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelVendorsTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelVendorsTransaction>> vendorTransactionGetVendorTransactionsWithHttpInfo(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid) throws ApiException {
        com.squareup.okhttp.Call call = vendorTransactionGetVendorTransactionsValidateBeforeCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vendorTransactionGetVendorTransactionsAsync(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, final ApiCallback<List<DkCloudDataModelVendorsTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vendorTransactionGetVendorTransactionsValidateBeforeCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vendorTransactionGetVendorTransactionsForVendor
     * @param vendor Vendor Number (required)
     * @param page Page Number (required)
     * @param count Objects on Page (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vendorTransactionGetVendorTransactionsForVendorCall(String vendor, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vendor/{vendor}/transaction/{page}/{count}"
            .replaceAll("\\{" + "vendor" + "\\}", apiClient.escapeString(vendor.toString()))
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vendorTransactionGetVendorTransactionsForVendorValidateBeforeCall(String vendor, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'vendor' is set
        if (vendor == null) {
            throw new ApiException("Missing the required parameter 'vendor' when calling vendorTransactionGetVendorTransactionsForVendor(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling vendorTransactionGetVendorTransactionsForVendor(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling vendorTransactionGetVendorTransactionsForVendor(Async)");
        }
        

        com.squareup.okhttp.Call call = vendorTransactionGetVendorTransactionsForVendorCall(vendor, page, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Transactions for supplied Vendor
     * 
     * @param vendor Vendor Number (required)
     * @param page Page Number (required)
     * @param count Objects on Page (required)
     * @return List&lt;DkCloudDataModelVendorsTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelVendorsTransaction> vendorTransactionGetVendorTransactionsForVendor(String vendor, Integer page, Integer count) throws ApiException {
        ApiResponse<List<DkCloudDataModelVendorsTransaction>> resp = vendorTransactionGetVendorTransactionsForVendorWithHttpInfo(vendor, page, count);
        return resp.getData();
    }

    /**
     * Get Transactions for supplied Vendor
     * 
     * @param vendor Vendor Number (required)
     * @param page Page Number (required)
     * @param count Objects on Page (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelVendorsTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelVendorsTransaction>> vendorTransactionGetVendorTransactionsForVendorWithHttpInfo(String vendor, Integer page, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = vendorTransactionGetVendorTransactionsForVendorValidateBeforeCall(vendor, page, count, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transactions for supplied Vendor (asynchronously)
     * 
     * @param vendor Vendor Number (required)
     * @param page Page Number (required)
     * @param count Objects on Page (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vendorTransactionGetVendorTransactionsForVendorAsync(String vendor, Integer page, Integer count, final ApiCallback<List<DkCloudDataModelVendorsTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vendorTransactionGetVendorTransactionsForVendorValidateBeforeCall(vendor, page, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vendorUpdateVendor
     * @param number Vendor Number (required)
     * @param obj Vendor Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vendorUpdateVendorCall(String number, DkCloudDataModelVendorsVendorModel obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = obj;

        // create path and map variables
        String localVarPath = "/api/v1/Vendor/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vendorUpdateVendorValidateBeforeCall(String number, DkCloudDataModelVendorsVendorModel obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling vendorUpdateVendor(Async)");
        }
        
        // verify the required parameter 'obj' is set
        if (obj == null) {
            throw new ApiException("Missing the required parameter 'obj' when calling vendorUpdateVendor(Async)");
        }
        

        com.squareup.okhttp.Call call = vendorUpdateVendorCall(number, obj, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Vendor
     * 
     * @param number Vendor Number (required)
     * @param obj Vendor Model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void vendorUpdateVendor(String number, DkCloudDataModelVendorsVendorModel obj) throws ApiException {
        vendorUpdateVendorWithHttpInfo(number, obj);
    }

    /**
     * Update Vendor
     * 
     * @param number Vendor Number (required)
     * @param obj Vendor Model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> vendorUpdateVendorWithHttpInfo(String number, DkCloudDataModelVendorsVendorModel obj) throws ApiException {
        com.squareup.okhttp.Call call = vendorUpdateVendorValidateBeforeCall(number, obj, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Vendor (asynchronously)
     * 
     * @param number Vendor Number (required)
     * @param obj Vendor Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vendorUpdateVendorAsync(String number, DkCloudDataModelVendorsVendorModel obj, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vendorUpdateVendorValidateBeforeCall(number, obj, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
