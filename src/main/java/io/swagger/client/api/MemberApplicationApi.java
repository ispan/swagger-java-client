/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkCloudDataModelMembersApplication;
import io.swagger.client.model.DkPlusAPIModelsMemberMemberApplicationCreated;
import io.swagger.client.model.SystemIOStream;
import io.swagger.client.model.SystemWebMvcFileContentResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MemberApplicationApi {
    private ApiClient apiClient;

    public MemberApplicationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MemberApplicationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for memberApplicationGetApplicationAttachmentContent
     * @param fund Fund Code (required)
     * @param application Application Id (required)
     * @param id Attachment Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberApplicationGetApplicationAttachmentContentCall(String fund, Integer application, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Member/fund/{fund}/application/{application}/attachments/{id}"
            .replaceAll("\\{" + "fund" + "\\}", apiClient.escapeString(fund.toString()))
            .replaceAll("\\{" + "application" + "\\}", apiClient.escapeString(application.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberApplicationGetApplicationAttachmentContentValidateBeforeCall(String fund, Integer application, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fund' is set
        if (fund == null) {
            throw new ApiException("Missing the required parameter 'fund' when calling memberApplicationGetApplicationAttachmentContent(Async)");
        }
        
        // verify the required parameter 'application' is set
        if (application == null) {
            throw new ApiException("Missing the required parameter 'application' when calling memberApplicationGetApplicationAttachmentContent(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling memberApplicationGetApplicationAttachmentContent(Async)");
        }
        

        com.squareup.okhttp.Call call = memberApplicationGetApplicationAttachmentContentCall(fund, application, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Application Attachment
     * 
     * @param fund Fund Code (required)
     * @param application Application Id (required)
     * @param id Attachment Id (required)
     * @return SystemWebMvcFileContentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SystemWebMvcFileContentResult memberApplicationGetApplicationAttachmentContent(String fund, Integer application, Integer id) throws ApiException {
        ApiResponse<SystemWebMvcFileContentResult> resp = memberApplicationGetApplicationAttachmentContentWithHttpInfo(fund, application, id);
        return resp.getData();
    }

    /**
     * Get Application Attachment
     * 
     * @param fund Fund Code (required)
     * @param application Application Id (required)
     * @param id Attachment Id (required)
     * @return ApiResponse&lt;SystemWebMvcFileContentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SystemWebMvcFileContentResult> memberApplicationGetApplicationAttachmentContentWithHttpInfo(String fund, Integer application, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = memberApplicationGetApplicationAttachmentContentValidateBeforeCall(fund, application, id, null, null);
        Type localVarReturnType = new TypeToken<SystemWebMvcFileContentResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Application Attachment (asynchronously)
     * 
     * @param fund Fund Code (required)
     * @param application Application Id (required)
     * @param id Attachment Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberApplicationGetApplicationAttachmentContentAsync(String fund, Integer application, Integer id, final ApiCallback<SystemWebMvcFileContentResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberApplicationGetApplicationAttachmentContentValidateBeforeCall(fund, application, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SystemWebMvcFileContentResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberApplicationGetApplicationAttachments
     * @param fund Fund Code (required)
     * @param id Application Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberApplicationGetApplicationAttachmentsCall(String fund, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Member/fund/{fund}/application/{id}/attachments"
            .replaceAll("\\{" + "fund" + "\\}", apiClient.escapeString(fund.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberApplicationGetApplicationAttachmentsValidateBeforeCall(String fund, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'fund' is set
        if (fund == null) {
            throw new ApiException("Missing the required parameter 'fund' when calling memberApplicationGetApplicationAttachments(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling memberApplicationGetApplicationAttachments(Async)");
        }
        

        com.squareup.okhttp.Call call = memberApplicationGetApplicationAttachmentsCall(fund, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Attachment list for an Application
     * 
     * @param fund Fund Code (required)
     * @param id Application Id (required)
     * @return SystemIOStream
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SystemIOStream memberApplicationGetApplicationAttachments(String fund, Integer id) throws ApiException {
        ApiResponse<SystemIOStream> resp = memberApplicationGetApplicationAttachmentsWithHttpInfo(fund, id);
        return resp.getData();
    }

    /**
     * Get Attachment list for an Application
     * 
     * @param fund Fund Code (required)
     * @param id Application Id (required)
     * @return ApiResponse&lt;SystemIOStream&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SystemIOStream> memberApplicationGetApplicationAttachmentsWithHttpInfo(String fund, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = memberApplicationGetApplicationAttachmentsValidateBeforeCall(fund, id, null, null);
        Type localVarReturnType = new TypeToken<SystemIOStream>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Attachment list for an Application (asynchronously)
     * 
     * @param fund Fund Code (required)
     * @param id Application Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberApplicationGetApplicationAttachmentsAsync(String fund, Integer id, final ApiCallback<SystemIOStream> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberApplicationGetApplicationAttachmentsValidateBeforeCall(fund, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SystemIOStream>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberApplicationGetApplications
     * @param number Member Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberApplicationGetApplicationsCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Member/{number}/application"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberApplicationGetApplicationsValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberApplicationGetApplications(Async)");
        }
        

        com.squareup.okhttp.Call call = memberApplicationGetApplicationsCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Member Applications
     * 
     * @param number Member Number (required)
     * @return List&lt;DkCloudDataModelMembersApplication&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelMembersApplication> memberApplicationGetApplications(String number) throws ApiException {
        ApiResponse<List<DkCloudDataModelMembersApplication>> resp = memberApplicationGetApplicationsWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get Member Applications
     * 
     * @param number Member Number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelMembersApplication&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelMembersApplication>> memberApplicationGetApplicationsWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = memberApplicationGetApplicationsValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersApplication>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Member Applications (asynchronously)
     * 
     * @param number Member Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberApplicationGetApplicationsAsync(String number, final ApiCallback<List<DkCloudDataModelMembersApplication>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberApplicationGetApplicationsValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersApplication>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberApplicationPostApplication
     * @param number Member Number (required)
     * @param obj Application Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberApplicationPostApplicationCall(String number, DkCloudDataModelMembersApplication obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = obj;

        // create path and map variables
        String localVarPath = "/api/v1/member/{number}/application"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberApplicationPostApplicationValidateBeforeCall(String number, DkCloudDataModelMembersApplication obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberApplicationPostApplication(Async)");
        }
        
        // verify the required parameter 'obj' is set
        if (obj == null) {
            throw new ApiException("Missing the required parameter 'obj' when calling memberApplicationPostApplication(Async)");
        }
        

        com.squareup.okhttp.Call call = memberApplicationPostApplicationCall(number, obj, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Member Application
     * 
     * @param number Member Number (required)
     * @param obj Application Model (required)
     * @return DkPlusAPIModelsMemberMemberApplicationCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkPlusAPIModelsMemberMemberApplicationCreated memberApplicationPostApplication(String number, DkCloudDataModelMembersApplication obj) throws ApiException {
        ApiResponse<DkPlusAPIModelsMemberMemberApplicationCreated> resp = memberApplicationPostApplicationWithHttpInfo(number, obj);
        return resp.getData();
    }

    /**
     * Create a Member Application
     * 
     * @param number Member Number (required)
     * @param obj Application Model (required)
     * @return ApiResponse&lt;DkPlusAPIModelsMemberMemberApplicationCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkPlusAPIModelsMemberMemberApplicationCreated> memberApplicationPostApplicationWithHttpInfo(String number, DkCloudDataModelMembersApplication obj) throws ApiException {
        com.squareup.okhttp.Call call = memberApplicationPostApplicationValidateBeforeCall(number, obj, null, null);
        Type localVarReturnType = new TypeToken<DkPlusAPIModelsMemberMemberApplicationCreated>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Member Application (asynchronously)
     * 
     * @param number Member Number (required)
     * @param obj Application Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberApplicationPostApplicationAsync(String number, DkCloudDataModelMembersApplication obj, final ApiCallback<DkPlusAPIModelsMemberMemberApplicationCreated> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberApplicationPostApplicationValidateBeforeCall(number, obj, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkPlusAPIModelsMemberMemberApplicationCreated>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberApplicationUpdateApplicationStatus
     * @param number Member Number (required)
     * @param id Application Id (required)
     * @param status Application Status (required)
     * @param fund Fund Code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberApplicationUpdateApplicationStatusCall(String number, Integer id, String status, String fund, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/member/{number}/application/{id}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (fund != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fund", fund));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberApplicationUpdateApplicationStatusValidateBeforeCall(String number, Integer id, String status, String fund, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberApplicationUpdateApplicationStatus(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling memberApplicationUpdateApplicationStatus(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling memberApplicationUpdateApplicationStatus(Async)");
        }
        
        // verify the required parameter 'fund' is set
        if (fund == null) {
            throw new ApiException("Missing the required parameter 'fund' when calling memberApplicationUpdateApplicationStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = memberApplicationUpdateApplicationStatusCall(number, id, status, fund, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Member Application
     * 
     * @param number Member Number (required)
     * @param id Application Id (required)
     * @param status Application Status (required)
     * @param fund Fund Code (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void memberApplicationUpdateApplicationStatus(String number, Integer id, String status, String fund) throws ApiException {
        memberApplicationUpdateApplicationStatusWithHttpInfo(number, id, status, fund);
    }

    /**
     * Update a Member Application
     * 
     * @param number Member Number (required)
     * @param id Application Id (required)
     * @param status Application Status (required)
     * @param fund Fund Code (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> memberApplicationUpdateApplicationStatusWithHttpInfo(String number, Integer id, String status, String fund) throws ApiException {
        com.squareup.okhttp.Call call = memberApplicationUpdateApplicationStatusValidateBeforeCall(number, id, status, fund, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a Member Application (asynchronously)
     * 
     * @param number Member Number (required)
     * @param id Application Id (required)
     * @param status Application Status (required)
     * @param fund Fund Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberApplicationUpdateApplicationStatusAsync(String number, Integer id, String status, String fund, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberApplicationUpdateApplicationStatusValidateBeforeCall(number, id, status, fund, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for memberApplicationUploadFile
     * @param number  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberApplicationUploadFileCall(String number, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/member/{number}/application/{id}/attachment"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberApplicationUploadFileValidateBeforeCall(String number, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberApplicationUploadFile(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling memberApplicationUploadFile(Async)");
        }
        

        com.squareup.okhttp.Call call = memberApplicationUploadFileCall(number, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param number  (required)
     * @param id  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object memberApplicationUploadFile(String number, Integer id) throws ApiException {
        ApiResponse<Object> resp = memberApplicationUploadFileWithHttpInfo(number, id);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param number  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> memberApplicationUploadFileWithHttpInfo(String number, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = memberApplicationUploadFileValidateBeforeCall(number, id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param number  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberApplicationUploadFileAsync(String number, Integer id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberApplicationUploadFileValidateBeforeCall(number, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
