/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkCloudDataModelCustomersTransactionModel;
import io.swagger.client.model.DkCloudDataModelGeneralLedgerTransaction;
import io.swagger.client.model.DkCloudDataModelProductsTransactionsModel;
import io.swagger.client.model.DkCloudDataModelVendorsTransaction;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionApi {
    private ApiClient apiClient;

    public TransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for customerTransactionGetCustomerTransactions
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greater Than (optional)
     * @param include fields to include (optional)
     * @param customer Customer Number (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerTransactionGetCustomerTransactionsCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customer/transaction/page/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (dueAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dueAfter", dueAfter));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (voucher != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucher", voucher));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (recordid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recordid", recordid));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));
        if (customer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customer", customer));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerTransactionGetCustomerTransactionsValidateBeforeCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling customerTransactionGetCustomerTransactions(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling customerTransactionGetCustomerTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = customerTransactionGetCustomerTransactionsCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, include, customer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get General Ledger Transaction
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greater Than (optional)
     * @param include fields to include (optional)
     * @param customer Customer Number (optional)
     * @return List&lt;DkCloudDataModelCustomersTransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelCustomersTransactionModel> customerTransactionGetCustomerTransactions(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String customer) throws ApiException {
        ApiResponse<List<DkCloudDataModelCustomersTransactionModel>> resp = customerTransactionGetCustomerTransactionsWithHttpInfo(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, include, customer);
        return resp.getData();
    }

    /**
     * Get General Ledger Transaction
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greater Than (optional)
     * @param include fields to include (optional)
     * @param customer Customer Number (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelCustomersTransactionModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelCustomersTransactionModel>> customerTransactionGetCustomerTransactionsWithHttpInfo(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String customer) throws ApiException {
        com.squareup.okhttp.Call call = customerTransactionGetCustomerTransactionsValidateBeforeCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, include, customer, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersTransactionModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get General Ledger Transaction (asynchronously)
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greater Than (optional)
     * @param include fields to include (optional)
     * @param customer Customer Number (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerTransactionGetCustomerTransactionsAsync(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String customer, final ApiCallback<List<DkCloudDataModelCustomersTransactionModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerTransactionGetCustomerTransactionsValidateBeforeCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, include, customer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersTransactionModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generalLedgerTransactionGetGeneralTransactionPage
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greter Than (optional)
     * @param include Fields to include (optional)
     * @param sort Field to sort by (optional)
     * @param sorttype Sort Direction (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generalLedgerTransactionGetGeneralTransactionPageCall(Integer page, Integer count, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String sort, String sorttype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/generalledger/transaction/page/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (account != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("account", account));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (dueAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dueAfter", dueAfter));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (voucher != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucher", voucher));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (recordid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recordid", recordid));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (sorttype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorttype", sorttype));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generalLedgerTransactionGetGeneralTransactionPageValidateBeforeCall(Integer page, Integer count, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String sort, String sorttype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling generalLedgerTransactionGetGeneralTransactionPage(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling generalLedgerTransactionGetGeneralTransactionPage(Async)");
        }
        

        com.squareup.okhttp.Call call = generalLedgerTransactionGetGeneralTransactionPageCall(page, count, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dueAfter, dim1, voucher, reference, recordid, include, sort, sorttype, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get General Ledger Transaction
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greter Than (optional)
     * @param include Fields to include (optional)
     * @param sort Field to sort by (optional)
     * @param sorttype Sort Direction (optional)
     * @return List&lt;DkCloudDataModelGeneralLedgerTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelGeneralLedgerTransaction> generalLedgerTransactionGetGeneralTransactionPage(Integer page, Integer count, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String sort, String sorttype) throws ApiException {
        ApiResponse<List<DkCloudDataModelGeneralLedgerTransaction>> resp = generalLedgerTransactionGetGeneralTransactionPageWithHttpInfo(page, count, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dueAfter, dim1, voucher, reference, recordid, include, sort, sorttype);
        return resp.getData();
    }

    /**
     * Get General Ledger Transaction
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greter Than (optional)
     * @param include Fields to include (optional)
     * @param sort Field to sort by (optional)
     * @param sorttype Sort Direction (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelGeneralLedgerTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelGeneralLedgerTransaction>> generalLedgerTransactionGetGeneralTransactionPageWithHttpInfo(Integer page, Integer count, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String sort, String sorttype) throws ApiException {
        com.squareup.okhttp.Call call = generalLedgerTransactionGetGeneralTransactionPageValidateBeforeCall(page, count, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dueAfter, dim1, voucher, reference, recordid, include, sort, sorttype, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get General Ledger Transaction (asynchronously)
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greter Than (optional)
     * @param include Fields to include (optional)
     * @param sort Field to sort by (optional)
     * @param sorttype Sort Direction (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generalLedgerTransactionGetGeneralTransactionPageAsync(Integer page, Integer count, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String sort, String sorttype, final ApiCallback<List<DkCloudDataModelGeneralLedgerTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generalLedgerTransactionGetGeneralTransactionPageValidateBeforeCall(page, count, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dueAfter, dim1, voucher, reference, recordid, include, sort, sorttype, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productTransactionGetInventoryTransactionsPage
     * @param page Page Number (required)
     * @param count Objects to return (required)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dim1 Dimmention (optional)
     * @param itemcode Item Code (optional)
     * @param warehouse Wharehouse (optional)
     * @param currency Currency Code (optional)
     * @param reference Reference (optional)
     * @param include Fields to include (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productTransactionGetInventoryTransactionsPageCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String dim1, String itemcode, String warehouse, String currency, String reference, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/transaction/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (itemcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("itemcode", itemcode));
        if (warehouse != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("warehouse", warehouse));
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Currency", currency));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productTransactionGetInventoryTransactionsPageValidateBeforeCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String dim1, String itemcode, String warehouse, String currency, String reference, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling productTransactionGetInventoryTransactionsPage(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling productTransactionGetInventoryTransactionsPage(Async)");
        }
        

        com.squareup.okhttp.Call call = productTransactionGetInventoryTransactionsPageCall(page, count, modifiedAfter, modifiedBefore, createdAfter, createdBefore, dim1, itemcode, warehouse, currency, reference, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param page Page Number (required)
     * @param count Objects to return (required)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dim1 Dimmention (optional)
     * @param itemcode Item Code (optional)
     * @param warehouse Wharehouse (optional)
     * @param currency Currency Code (optional)
     * @param reference Reference (optional)
     * @param include Fields to include (optional)
     * @return List&lt;DkCloudDataModelProductsTransactionsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProductsTransactionsModel> productTransactionGetInventoryTransactionsPage(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String dim1, String itemcode, String warehouse, String currency, String reference, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelProductsTransactionsModel>> resp = productTransactionGetInventoryTransactionsPageWithHttpInfo(page, count, modifiedAfter, modifiedBefore, createdAfter, createdBefore, dim1, itemcode, warehouse, currency, reference, include);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param page Page Number (required)
     * @param count Objects to return (required)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dim1 Dimmention (optional)
     * @param itemcode Item Code (optional)
     * @param warehouse Wharehouse (optional)
     * @param currency Currency Code (optional)
     * @param reference Reference (optional)
     * @param include Fields to include (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProductsTransactionsModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProductsTransactionsModel>> productTransactionGetInventoryTransactionsPageWithHttpInfo(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String dim1, String itemcode, String warehouse, String currency, String reference, String include) throws ApiException {
        com.squareup.okhttp.Call call = productTransactionGetInventoryTransactionsPageValidateBeforeCall(page, count, modifiedAfter, modifiedBefore, createdAfter, createdBefore, dim1, itemcode, warehouse, currency, reference, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsTransactionsModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param page Page Number (required)
     * @param count Objects to return (required)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dim1 Dimmention (optional)
     * @param itemcode Item Code (optional)
     * @param warehouse Wharehouse (optional)
     * @param currency Currency Code (optional)
     * @param reference Reference (optional)
     * @param include Fields to include (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productTransactionGetInventoryTransactionsPageAsync(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String dim1, String itemcode, String warehouse, String currency, String reference, String include, final ApiCallback<List<DkCloudDataModelProductsTransactionsModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productTransactionGetInventoryTransactionsPageValidateBeforeCall(page, count, modifiedAfter, modifiedBefore, createdAfter, createdBefore, dim1, itemcode, warehouse, currency, reference, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsTransactionsModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectTransactionGetProjectTransactionPage
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param project Project Number (optional)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Referenec (optional)
     * @param recordid Record Id After (optional)
     * @param origin Origin (optional)
     * @param include Fields to include (optional)
     * @param sort Field to Sort (optional)
     * @param sorttype Sort Direction (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectTransactionGetProjectTransactionPageCall(Integer page, Integer count, String project, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String dim1, String voucher, String reference, Integer recordid, String origin, String include, String sort, String sorttype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/transaction/page/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (project != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("project", project));
        if (account != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("account", account));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (voucher != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucher", voucher));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (recordid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recordid", recordid));
        if (origin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origin", origin));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (sorttype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorttype", sorttype));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectTransactionGetProjectTransactionPageValidateBeforeCall(Integer page, Integer count, String project, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String dim1, String voucher, String reference, Integer recordid, String origin, String include, String sort, String sorttype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling projectTransactionGetProjectTransactionPage(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling projectTransactionGetProjectTransactionPage(Async)");
        }
        

        com.squareup.okhttp.Call call = projectTransactionGetProjectTransactionPageCall(page, count, project, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dim1, voucher, reference, recordid, origin, include, sort, sorttype, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Project Transactions
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param project Project Number (optional)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Referenec (optional)
     * @param recordid Record Id After (optional)
     * @param origin Origin (optional)
     * @param include Fields to include (optional)
     * @param sort Field to Sort (optional)
     * @param sorttype Sort Direction (optional)
     * @return List&lt;DkCloudDataModelGeneralLedgerTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelGeneralLedgerTransaction> projectTransactionGetProjectTransactionPage(Integer page, Integer count, String project, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String dim1, String voucher, String reference, Integer recordid, String origin, String include, String sort, String sorttype) throws ApiException {
        ApiResponse<List<DkCloudDataModelGeneralLedgerTransaction>> resp = projectTransactionGetProjectTransactionPageWithHttpInfo(page, count, project, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dim1, voucher, reference, recordid, origin, include, sort, sorttype);
        return resp.getData();
    }

    /**
     * Get Project Transactions
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param project Project Number (optional)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Referenec (optional)
     * @param recordid Record Id After (optional)
     * @param origin Origin (optional)
     * @param include Fields to include (optional)
     * @param sort Field to Sort (optional)
     * @param sorttype Sort Direction (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelGeneralLedgerTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelGeneralLedgerTransaction>> projectTransactionGetProjectTransactionPageWithHttpInfo(Integer page, Integer count, String project, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String dim1, String voucher, String reference, Integer recordid, String origin, String include, String sort, String sorttype) throws ApiException {
        com.squareup.okhttp.Call call = projectTransactionGetProjectTransactionPageValidateBeforeCall(page, count, project, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dim1, voucher, reference, recordid, origin, include, sort, sorttype, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Project Transactions (asynchronously)
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param project Project Number (optional)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Referenec (optional)
     * @param recordid Record Id After (optional)
     * @param origin Origin (optional)
     * @param include Fields to include (optional)
     * @param sort Field to Sort (optional)
     * @param sorttype Sort Direction (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectTransactionGetProjectTransactionPageAsync(Integer page, Integer count, String project, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String dim1, String voucher, String reference, Integer recordid, String origin, String include, String sort, String sorttype, final ApiCallback<List<DkCloudDataModelGeneralLedgerTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectTransactionGetProjectTransactionPageValidateBeforeCall(page, count, project, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dim1, voucher, reference, recordid, origin, include, sort, sorttype, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for vendorTransactionGetVendorTransactions
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call vendorTransactionGetVendorTransactionsCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/vendor/transaction/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (dueAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dueAfter", dueAfter));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (voucher != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucher", voucher));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (recordid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recordid", recordid));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call vendorTransactionGetVendorTransactionsValidateBeforeCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling vendorTransactionGetVendorTransactions(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling vendorTransactionGetVendorTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = vendorTransactionGetVendorTransactionsCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid  (optional)
     * @return List&lt;DkCloudDataModelVendorsTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelVendorsTransaction> vendorTransactionGetVendorTransactions(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid) throws ApiException {
        ApiResponse<List<DkCloudDataModelVendorsTransaction>> resp = vendorTransactionGetVendorTransactionsWithHttpInfo(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid  (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelVendorsTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelVendorsTransaction>> vendorTransactionGetVendorTransactionsWithHttpInfo(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid) throws ApiException {
        com.squareup.okhttp.Call call = vendorTransactionGetVendorTransactionsValidateBeforeCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call vendorTransactionGetVendorTransactionsAsync(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, final ApiCallback<List<DkCloudDataModelVendorsTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = vendorTransactionGetVendorTransactionsValidateBeforeCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelVendorsTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
