/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkCloudDataModelGeneralLedgerTransaction;
import io.swagger.client.model.DkCloudDataModelProjectPhaseModel;
import io.swagger.client.model.DkCloudDataModelProjectProjectModel;
import io.swagger.client.model.DkCloudDataModelProjectTaskModel;
import io.swagger.client.model.DkCloudDataModelSalesInvoiceModel;
import io.swagger.client.model.DkPlusAPIModelsEmployeeEmployeeWork;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApi {
    private ApiClient apiClient;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for employeeWorkCreateEmployeeWork
     * @param employee Employee Number (required)
     * @param lines Journal Lines (required)
     * @param post Post Lines(Will be Locked and invoiced) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call employeeWorkCreateEmployeeWorkCall(String employee, List<DkPlusAPIModelsEmployeeEmployeeWork> lines, Boolean post, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = lines;

        // create path and map variables
        String localVarPath = "/api/v1/general/employee/{employee}/work"
            .replaceAll("\\{" + "employee" + "\\}", apiClient.escapeString(employee.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (post != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("post", post));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call employeeWorkCreateEmployeeWorkValidateBeforeCall(String employee, List<DkPlusAPIModelsEmployeeEmployeeWork> lines, Boolean post, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'employee' is set
        if (employee == null) {
            throw new ApiException("Missing the required parameter 'employee' when calling employeeWorkCreateEmployeeWork(Async)");
        }
        
        // verify the required parameter 'lines' is set
        if (lines == null) {
            throw new ApiException("Missing the required parameter 'lines' when calling employeeWorkCreateEmployeeWork(Async)");
        }
        

        com.squareup.okhttp.Call call = employeeWorkCreateEmployeeWorkCall(employee, lines, post, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add Employee Work Journal Entry
     * 
     * @param employee Employee Number (required)
     * @param lines Journal Lines (required)
     * @param post Post Lines(Will be Locked and invoiced) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void employeeWorkCreateEmployeeWork(String employee, List<DkPlusAPIModelsEmployeeEmployeeWork> lines, Boolean post) throws ApiException {
        employeeWorkCreateEmployeeWorkWithHttpInfo(employee, lines, post);
    }

    /**
     * Add Employee Work Journal Entry
     * 
     * @param employee Employee Number (required)
     * @param lines Journal Lines (required)
     * @param post Post Lines(Will be Locked and invoiced) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> employeeWorkCreateEmployeeWorkWithHttpInfo(String employee, List<DkPlusAPIModelsEmployeeEmployeeWork> lines, Boolean post) throws ApiException {
        com.squareup.okhttp.Call call = employeeWorkCreateEmployeeWorkValidateBeforeCall(employee, lines, post, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add Employee Work Journal Entry (asynchronously)
     * 
     * @param employee Employee Number (required)
     * @param lines Journal Lines (required)
     * @param post Post Lines(Will be Locked and invoiced) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call employeeWorkCreateEmployeeWorkAsync(String employee, List<DkPlusAPIModelsEmployeeEmployeeWork> lines, Boolean post, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = employeeWorkCreateEmployeeWorkValidateBeforeCall(employee, lines, post, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for phasesCreatePhase
     * @param model Phase Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call phasesCreatePhaseCall(DkCloudDataModelProjectPhaseModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/v1/projects/Phase";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call phasesCreatePhaseValidateBeforeCall(DkCloudDataModelProjectPhaseModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling phasesCreatePhase(Async)");
        }
        

        com.squareup.okhttp.Call call = phasesCreatePhaseCall(model, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Phase for the Project System
     * 
     * @param model Phase Model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void phasesCreatePhase(DkCloudDataModelProjectPhaseModel model) throws ApiException {
        phasesCreatePhaseWithHttpInfo(model);
    }

    /**
     * Create a Phase for the Project System
     * 
     * @param model Phase Model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> phasesCreatePhaseWithHttpInfo(DkCloudDataModelProjectPhaseModel model) throws ApiException {
        com.squareup.okhttp.Call call = phasesCreatePhaseValidateBeforeCall(model, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a Phase for the Project System (asynchronously)
     * 
     * @param model Phase Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call phasesCreatePhaseAsync(DkCloudDataModelProjectPhaseModel model, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = phasesCreatePhaseValidateBeforeCall(model, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for phasesGetPhase
     * @param number Phase Number (required)
     * @param include  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call phasesGetPhaseCall(String number, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Project/Phase/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call phasesGetPhaseValidateBeforeCall(String number, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling phasesGetPhase(Async)");
        }
        

        com.squareup.okhttp.Call call = phasesGetPhaseCall(number, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a phase
     * 
     * @param number Phase Number (required)
     * @param include  (optional)
     * @return List&lt;DkCloudDataModelProjectPhaseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProjectPhaseModel> phasesGetPhase(String number, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelProjectPhaseModel>> resp = phasesGetPhaseWithHttpInfo(number, include);
        return resp.getData();
    }

    /**
     * Get a phase
     * 
     * @param number Phase Number (required)
     * @param include  (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProjectPhaseModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProjectPhaseModel>> phasesGetPhaseWithHttpInfo(String number, String include) throws ApiException {
        com.squareup.okhttp.Call call = phasesGetPhaseValidateBeforeCall(number, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectPhaseModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a phase (asynchronously)
     * 
     * @param number Phase Number (required)
     * @param include  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call phasesGetPhaseAsync(String number, String include, final ApiCallback<List<DkCloudDataModelProjectPhaseModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = phasesGetPhaseValidateBeforeCall(number, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectPhaseModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for phasesGetPhases
     * @param page Page Number (required)
     * @param count Objects per Page (required)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified after (optional)
     * @param include Properties to include (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call phasesGetPhasesCall(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Project/Phase/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call phasesGetPhasesValidateBeforeCall(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling phasesGetPhases(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling phasesGetPhases(Async)");
        }
        

        com.squareup.okhttp.Call call = phasesGetPhasesCall(page, count, modifiedBefore, modifiedAfter, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Project Phases
     * Note: On every project there is a list og Phases for that project. if that list is empty all Phases can be used.
     * @param page Page Number (required)
     * @param count Objects per Page (required)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified after (optional)
     * @param include Properties to include (optional)
     * @return List&lt;DkCloudDataModelProjectPhaseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProjectPhaseModel> phasesGetPhases(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelProjectPhaseModel>> resp = phasesGetPhasesWithHttpInfo(page, count, modifiedBefore, modifiedAfter, include);
        return resp.getData();
    }

    /**
     * Get Project Phases
     * Note: On every project there is a list og Phases for that project. if that list is empty all Phases can be used.
     * @param page Page Number (required)
     * @param count Objects per Page (required)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified after (optional)
     * @param include Properties to include (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProjectPhaseModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProjectPhaseModel>> phasesGetPhasesWithHttpInfo(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include) throws ApiException {
        com.squareup.okhttp.Call call = phasesGetPhasesValidateBeforeCall(page, count, modifiedBefore, modifiedAfter, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectPhaseModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Project Phases (asynchronously)
     * Note: On every project there is a list og Phases for that project. if that list is empty all Phases can be used.
     * @param page Page Number (required)
     * @param count Objects per Page (required)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified after (optional)
     * @param include Properties to include (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call phasesGetPhasesAsync(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include, final ApiCallback<List<DkCloudDataModelProjectPhaseModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = phasesGetPhasesValidateBeforeCall(page, count, modifiedBefore, modifiedAfter, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectPhaseModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for phasesUpdatePhase
     * @param number Phase Number (required)
     * @param model Phase Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call phasesUpdatePhaseCall(String number, DkCloudDataModelProjectPhaseModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/v1/projects/Phase/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call phasesUpdatePhaseValidateBeforeCall(String number, DkCloudDataModelProjectPhaseModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling phasesUpdatePhase(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling phasesUpdatePhase(Async)");
        }
        

        com.squareup.okhttp.Call call = phasesUpdatePhaseCall(number, model, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Project System Phase
     * 
     * @param number Phase Number (required)
     * @param model Phase Model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void phasesUpdatePhase(String number, DkCloudDataModelProjectPhaseModel model) throws ApiException {
        phasesUpdatePhaseWithHttpInfo(number, model);
    }

    /**
     * Update Project System Phase
     * 
     * @param number Phase Number (required)
     * @param model Phase Model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> phasesUpdatePhaseWithHttpInfo(String number, DkCloudDataModelProjectPhaseModel model) throws ApiException {
        com.squareup.okhttp.Call call = phasesUpdatePhaseValidateBeforeCall(number, model, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update Project System Phase (asynchronously)
     * 
     * @param number Phase Number (required)
     * @param model Phase Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call phasesUpdatePhaseAsync(String number, DkCloudDataModelProjectPhaseModel model, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = phasesUpdatePhaseValidateBeforeCall(number, model, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for projectCreateProject
     * @param model Project Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectCreateProjectCall(DkCloudDataModelProjectProjectModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/v1/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectCreateProjectValidateBeforeCall(DkCloudDataModelProjectProjectModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling projectCreateProject(Async)");
        }
        

        com.squareup.okhttp.Call call = projectCreateProjectCall(model, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Method used to create a new Project(Job)
     * 
     * @param model Project Model (required)
     * @return DkCloudDataModelProjectProjectModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelProjectProjectModel projectCreateProject(DkCloudDataModelProjectProjectModel model) throws ApiException {
        ApiResponse<DkCloudDataModelProjectProjectModel> resp = projectCreateProjectWithHttpInfo(model);
        return resp.getData();
    }

    /**
     * Method used to create a new Project(Job)
     * 
     * @param model Project Model (required)
     * @return ApiResponse&lt;DkCloudDataModelProjectProjectModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelProjectProjectModel> projectCreateProjectWithHttpInfo(DkCloudDataModelProjectProjectModel model) throws ApiException {
        com.squareup.okhttp.Call call = projectCreateProjectValidateBeforeCall(model, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProjectProjectModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Method used to create a new Project(Job) (asynchronously)
     * 
     * @param model Project Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectCreateProjectAsync(DkCloudDataModelProjectProjectModel model, final ApiCallback<DkCloudDataModelProjectProjectModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectCreateProjectValidateBeforeCall(model, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProjectProjectModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectGetModified
     * @param modified Modified (required)
     * @param page Page Number (required)
     * @param count Projects per Page (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call projectGetModifiedCall(OffsetDateTime modified, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/modified/{modified}/{page}/{count}"
            .replaceAll("\\{" + "modified" + "\\}", apiClient.escapeString(modified.toString()))
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectGetModifiedValidateBeforeCall(OffsetDateTime modified, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modified' is set
        if (modified == null) {
            throw new ApiException("Missing the required parameter 'modified' when calling projectGetModified(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling projectGetModified(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling projectGetModified(Async)");
        }
        

        com.squareup.okhttp.Call call = projectGetModifiedCall(modified, page, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get modified Projects
     * 
     * @param modified Modified (required)
     * @param page Page Number (required)
     * @param count Projects per Page (required)
     * @return List&lt;DkCloudDataModelProjectProjectModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public List<DkCloudDataModelProjectProjectModel> projectGetModified(OffsetDateTime modified, Integer page, Integer count) throws ApiException {
        ApiResponse<List<DkCloudDataModelProjectProjectModel>> resp = projectGetModifiedWithHttpInfo(modified, page, count);
        return resp.getData();
    }

    /**
     * Get modified Projects
     * 
     * @param modified Modified (required)
     * @param page Page Number (required)
     * @param count Projects per Page (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProjectProjectModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<DkCloudDataModelProjectProjectModel>> projectGetModifiedWithHttpInfo(OffsetDateTime modified, Integer page, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = projectGetModifiedValidateBeforeCall(modified, page, count, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get modified Projects (asynchronously)
     * 
     * @param modified Modified (required)
     * @param page Page Number (required)
     * @param count Projects per Page (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call projectGetModifiedAsync(OffsetDateTime modified, Integer page, Integer count, final ApiCallback<List<DkCloudDataModelProjectProjectModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectGetModifiedValidateBeforeCall(modified, page, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectGetPage
     * @param page Page Number (required)
     * @param count Projects per Page (required)
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @param customer  (optional)
     * @param group  (optional)
     * @param dim1  (optional)
     * @param dim2  (optional)
     * @param dim3  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param include  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectGetPageCall(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String customer, String group, String dim1, String dim2, String dim3, Integer type, Integer status, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/page/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (customer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customer", customer));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (dim2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim2", dim2));
        if (dim3 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim3", dim3));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectGetPageValidateBeforeCall(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String customer, String group, String dim1, String dim2, String dim3, Integer type, Integer status, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling projectGetPage(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling projectGetPage(Async)");
        }
        

        com.squareup.okhttp.Call call = projectGetPageCall(page, count, modifiedBefore, modifiedAfter, customer, group, dim1, dim2, dim3, type, status, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Projects Paged
     * 
     * @param page Page Number (required)
     * @param count Projects per Page (required)
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @param customer  (optional)
     * @param group  (optional)
     * @param dim1  (optional)
     * @param dim2  (optional)
     * @param dim3  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param include  (optional)
     * @return List&lt;DkCloudDataModelProjectProjectModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProjectProjectModel> projectGetPage(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String customer, String group, String dim1, String dim2, String dim3, Integer type, Integer status, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelProjectProjectModel>> resp = projectGetPageWithHttpInfo(page, count, modifiedBefore, modifiedAfter, customer, group, dim1, dim2, dim3, type, status, include);
        return resp.getData();
    }

    /**
     * Get Projects Paged
     * 
     * @param page Page Number (required)
     * @param count Projects per Page (required)
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @param customer  (optional)
     * @param group  (optional)
     * @param dim1  (optional)
     * @param dim2  (optional)
     * @param dim3  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param include  (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProjectProjectModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProjectProjectModel>> projectGetPageWithHttpInfo(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String customer, String group, String dim1, String dim2, String dim3, Integer type, Integer status, String include) throws ApiException {
        com.squareup.okhttp.Call call = projectGetPageValidateBeforeCall(page, count, modifiedBefore, modifiedAfter, customer, group, dim1, dim2, dim3, type, status, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Projects Paged (asynchronously)
     * 
     * @param page Page Number (required)
     * @param count Projects per Page (required)
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @param customer  (optional)
     * @param group  (optional)
     * @param dim1  (optional)
     * @param dim2  (optional)
     * @param dim3  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param include  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectGetPageAsync(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String customer, String group, String dim1, String dim2, String dim3, Integer type, Integer status, String include, final ApiCallback<List<DkCloudDataModelProjectProjectModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectGetPageValidateBeforeCall(page, count, modifiedBefore, modifiedAfter, customer, group, dim1, dim2, dim3, type, status, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectGetProject
     * @param number  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectGetProjectCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectGetProjectValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling projectGetProject(Async)");
        }
        

        com.squareup.okhttp.Call call = projectGetProjectCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Project
     * 
     * @param number  (required)
     * @return DkCloudDataModelProjectProjectModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelProjectProjectModel projectGetProject(String number) throws ApiException {
        ApiResponse<DkCloudDataModelProjectProjectModel> resp = projectGetProjectWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get Project
     * 
     * @param number  (required)
     * @return ApiResponse&lt;DkCloudDataModelProjectProjectModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelProjectProjectModel> projectGetProjectWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = projectGetProjectValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProjectProjectModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Project (asynchronously)
     * 
     * @param number  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectGetProjectAsync(String number, final ApiCallback<DkCloudDataModelProjectProjectModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectGetProjectValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProjectProjectModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectGetProjectInvoices
     * @param number  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectGetProjectInvoicesCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/{number}/invoice"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectGetProjectInvoicesValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling projectGetProjectInvoices(Async)");
        }
        

        com.squareup.okhttp.Call call = projectGetProjectInvoicesCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Invoices for Project
     * 
     * @param number  (required)
     * @return List&lt;DkCloudDataModelSalesInvoiceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelSalesInvoiceModel> projectGetProjectInvoices(String number) throws ApiException {
        ApiResponse<List<DkCloudDataModelSalesInvoiceModel>> resp = projectGetProjectInvoicesWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get Invoices for Project
     * 
     * @param number  (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelSalesInvoiceModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelSalesInvoiceModel>> projectGetProjectInvoicesWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = projectGetProjectInvoicesValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesInvoiceModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Invoices for Project (asynchronously)
     * 
     * @param number  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectGetProjectInvoicesAsync(String number, final ApiCallback<List<DkCloudDataModelSalesInvoiceModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectGetProjectInvoicesValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesInvoiceModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectGetProjects
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @param customer  (optional)
     * @param group  (optional)
     * @param dim1  (optional)
     * @param dim2  (optional)
     * @param dim3  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param max  (optional)
     * @param include  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectGetProjectsCall(OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String customer, String group, String dim1, String dim2, String dim3, Integer type, Integer status, Integer max, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (customer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customer", customer));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (dim2 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim2", dim2));
        if (dim3 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim3", dim3));
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectGetProjectsValidateBeforeCall(OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String customer, String group, String dim1, String dim2, String dim3, Integer type, Integer status, Integer max, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = projectGetProjectsCall(modifiedBefore, modifiedAfter, customer, group, dim1, dim2, dim3, type, status, max, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get all Projects
     * 
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @param customer  (optional)
     * @param group  (optional)
     * @param dim1  (optional)
     * @param dim2  (optional)
     * @param dim3  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param max  (optional)
     * @param include  (optional)
     * @return List&lt;DkCloudDataModelProjectProjectModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProjectProjectModel> projectGetProjects(OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String customer, String group, String dim1, String dim2, String dim3, Integer type, Integer status, Integer max, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelProjectProjectModel>> resp = projectGetProjectsWithHttpInfo(modifiedBefore, modifiedAfter, customer, group, dim1, dim2, dim3, type, status, max, include);
        return resp.getData();
    }

    /**
     * Get all Projects
     * 
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @param customer  (optional)
     * @param group  (optional)
     * @param dim1  (optional)
     * @param dim2  (optional)
     * @param dim3  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param max  (optional)
     * @param include  (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProjectProjectModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProjectProjectModel>> projectGetProjectsWithHttpInfo(OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String customer, String group, String dim1, String dim2, String dim3, Integer type, Integer status, Integer max, String include) throws ApiException {
        com.squareup.okhttp.Call call = projectGetProjectsValidateBeforeCall(modifiedBefore, modifiedAfter, customer, group, dim1, dim2, dim3, type, status, max, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all Projects (asynchronously)
     * 
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @param customer  (optional)
     * @param group  (optional)
     * @param dim1  (optional)
     * @param dim2  (optional)
     * @param dim3  (optional)
     * @param type  (optional)
     * @param status  (optional)
     * @param max  (optional)
     * @param include  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectGetProjectsAsync(OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String customer, String group, String dim1, String dim2, String dim3, Integer type, Integer status, Integer max, String include, final ApiCallback<List<DkCloudDataModelProjectProjectModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectGetProjectsValidateBeforeCall(modifiedBefore, modifiedAfter, customer, group, dim1, dim2, dim3, type, status, max, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for projectTransactionGetProjectTransactionPage
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param project Project Number (optional)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Referenec (optional)
     * @param recordid Record Id After (optional)
     * @param origin Origin (optional)
     * @param include Fields to include (optional)
     * @param sort Field to Sort (optional)
     * @param sorttype Sort Direction (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call projectTransactionGetProjectTransactionPageCall(Integer page, Integer count, String project, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String dim1, String voucher, String reference, Integer recordid, String origin, String include, String sort, String sorttype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/project/transaction/page/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (project != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("project", project));
        if (account != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("account", account));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (voucher != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucher", voucher));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (recordid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recordid", recordid));
        if (origin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("origin", origin));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (sorttype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorttype", sorttype));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call projectTransactionGetProjectTransactionPageValidateBeforeCall(Integer page, Integer count, String project, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String dim1, String voucher, String reference, Integer recordid, String origin, String include, String sort, String sorttype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling projectTransactionGetProjectTransactionPage(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling projectTransactionGetProjectTransactionPage(Async)");
        }
        

        com.squareup.okhttp.Call call = projectTransactionGetProjectTransactionPageCall(page, count, project, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dim1, voucher, reference, recordid, origin, include, sort, sorttype, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Project Transactions
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param project Project Number (optional)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Referenec (optional)
     * @param recordid Record Id After (optional)
     * @param origin Origin (optional)
     * @param include Fields to include (optional)
     * @param sort Field to Sort (optional)
     * @param sorttype Sort Direction (optional)
     * @return List&lt;DkCloudDataModelGeneralLedgerTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelGeneralLedgerTransaction> projectTransactionGetProjectTransactionPage(Integer page, Integer count, String project, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String dim1, String voucher, String reference, Integer recordid, String origin, String include, String sort, String sorttype) throws ApiException {
        ApiResponse<List<DkCloudDataModelGeneralLedgerTransaction>> resp = projectTransactionGetProjectTransactionPageWithHttpInfo(page, count, project, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dim1, voucher, reference, recordid, origin, include, sort, sorttype);
        return resp.getData();
    }

    /**
     * Get Project Transactions
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param project Project Number (optional)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Referenec (optional)
     * @param recordid Record Id After (optional)
     * @param origin Origin (optional)
     * @param include Fields to include (optional)
     * @param sort Field to Sort (optional)
     * @param sorttype Sort Direction (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelGeneralLedgerTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelGeneralLedgerTransaction>> projectTransactionGetProjectTransactionPageWithHttpInfo(Integer page, Integer count, String project, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String dim1, String voucher, String reference, Integer recordid, String origin, String include, String sort, String sorttype) throws ApiException {
        com.squareup.okhttp.Call call = projectTransactionGetProjectTransactionPageValidateBeforeCall(page, count, project, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dim1, voucher, reference, recordid, origin, include, sort, sorttype, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Project Transactions (asynchronously)
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param project Project Number (optional)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Referenec (optional)
     * @param recordid Record Id After (optional)
     * @param origin Origin (optional)
     * @param include Fields to include (optional)
     * @param sort Field to Sort (optional)
     * @param sorttype Sort Direction (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call projectTransactionGetProjectTransactionPageAsync(Integer page, Integer count, String project, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String dim1, String voucher, String reference, Integer recordid, String origin, String include, String sort, String sorttype, final ApiCallback<List<DkCloudDataModelGeneralLedgerTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = projectTransactionGetProjectTransactionPageValidateBeforeCall(page, count, project, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dim1, voucher, reference, recordid, origin, include, sort, sorttype, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tasksCreateTask
     * @param model Task Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tasksCreateTaskCall(DkCloudDataModelProjectTaskModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/v1/projects/task";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tasksCreateTaskValidateBeforeCall(DkCloudDataModelProjectTaskModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling tasksCreateTask(Async)");
        }
        

        com.squareup.okhttp.Call call = tasksCreateTaskCall(model, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Task for the Project System
     * 
     * @param model Task Model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void tasksCreateTask(DkCloudDataModelProjectTaskModel model) throws ApiException {
        tasksCreateTaskWithHttpInfo(model);
    }

    /**
     * Create a Task for the Project System
     * 
     * @param model Task Model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> tasksCreateTaskWithHttpInfo(DkCloudDataModelProjectTaskModel model) throws ApiException {
        com.squareup.okhttp.Call call = tasksCreateTaskValidateBeforeCall(model, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a Task for the Project System (asynchronously)
     * 
     * @param model Task Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tasksCreateTaskAsync(DkCloudDataModelProjectTaskModel model, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tasksCreateTaskValidateBeforeCall(model, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for tasksGetTask
     * @param number  (required)
     * @param include  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tasksGetTaskCall(String number, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Project/Tasks/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tasksGetTaskValidateBeforeCall(String number, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling tasksGetTask(Async)");
        }
        

        com.squareup.okhttp.Call call = tasksGetTaskCall(number, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param number  (required)
     * @param include  (optional)
     * @return List&lt;DkCloudDataModelProjectTaskModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProjectTaskModel> tasksGetTask(String number, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelProjectTaskModel>> resp = tasksGetTaskWithHttpInfo(number, include);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param number  (required)
     * @param include  (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProjectTaskModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProjectTaskModel>> tasksGetTaskWithHttpInfo(String number, String include) throws ApiException {
        com.squareup.okhttp.Call call = tasksGetTaskValidateBeforeCall(number, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectTaskModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param number  (required)
     * @param include  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tasksGetTaskAsync(String number, String include, final ApiCallback<List<DkCloudDataModelProjectTaskModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tasksGetTaskValidateBeforeCall(number, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectTaskModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tasksGetTasks
     * @param page Page Number (required)
     * @param count Objects per Page (required)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified after (optional)
     * @param include Properties to include (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tasksGetTasksCall(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Project/Tasks/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tasksGetTasksValidateBeforeCall(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling tasksGetTasks(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling tasksGetTasks(Async)");
        }
        

        com.squareup.okhttp.Call call = tasksGetTasksCall(page, count, modifiedBefore, modifiedAfter, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Project Tasks
     * Note: On every project there is a list og Tasks for that project. if that list is empty all tasks can be used.
     * @param page Page Number (required)
     * @param count Objects per Page (required)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified after (optional)
     * @param include Properties to include (optional)
     * @return List&lt;DkCloudDataModelProjectTaskModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProjectTaskModel> tasksGetTasks(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelProjectTaskModel>> resp = tasksGetTasksWithHttpInfo(page, count, modifiedBefore, modifiedAfter, include);
        return resp.getData();
    }

    /**
     * Get Project Tasks
     * Note: On every project there is a list og Tasks for that project. if that list is empty all tasks can be used.
     * @param page Page Number (required)
     * @param count Objects per Page (required)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified after (optional)
     * @param include Properties to include (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProjectTaskModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProjectTaskModel>> tasksGetTasksWithHttpInfo(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include) throws ApiException {
        com.squareup.okhttp.Call call = tasksGetTasksValidateBeforeCall(page, count, modifiedBefore, modifiedAfter, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectTaskModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Project Tasks (asynchronously)
     * Note: On every project there is a list og Tasks for that project. if that list is empty all tasks can be used.
     * @param page Page Number (required)
     * @param count Objects per Page (required)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified after (optional)
     * @param include Properties to include (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tasksGetTasksAsync(Integer page, Integer count, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include, final ApiCallback<List<DkCloudDataModelProjectTaskModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tasksGetTasksValidateBeforeCall(page, count, modifiedBefore, modifiedAfter, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectTaskModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tasksUpdateTask
     * @param number  (required)
     * @param model  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tasksUpdateTaskCall(String number, DkCloudDataModelProjectTaskModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/v1/projects/task/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tasksUpdateTaskValidateBeforeCall(String number, DkCloudDataModelProjectTaskModel model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling tasksUpdateTask(Async)");
        }
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling tasksUpdateTask(Async)");
        }
        

        com.squareup.okhttp.Call call = tasksUpdateTaskCall(number, model, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param number  (required)
     * @param model  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void tasksUpdateTask(String number, DkCloudDataModelProjectTaskModel model) throws ApiException {
        tasksUpdateTaskWithHttpInfo(number, model);
    }

    /**
     * 
     * 
     * @param number  (required)
     * @param model  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> tasksUpdateTaskWithHttpInfo(String number, DkCloudDataModelProjectTaskModel model) throws ApiException {
        com.squareup.okhttp.Call call = tasksUpdateTaskValidateBeforeCall(number, model, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * 
     * @param number  (required)
     * @param model  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tasksUpdateTaskAsync(String number, DkCloudDataModelProjectTaskModel model, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tasksUpdateTaskValidateBeforeCall(number, model, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
