/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkCloudDataModelCustomersCustomerGroupModel;
import io.swagger.client.model.DkCloudDataModelCustomersCustomerModel;
import io.swagger.client.model.DkCloudDataModelCustomersTransactionModel;
import io.swagger.client.model.DkCloudDataModelProductsTransactionsModel;
import io.swagger.client.model.DkCloudDataModelProjectProjectModel;
import io.swagger.client.model.DkCloudDataModelSalesInvoiceModel;
import io.swagger.client.model.DkCloudDataModelSalesQuoteHead;
import io.swagger.client.model.DkCloudDataModelSalesSalesOrderModel;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomerApi {
    private ApiClient apiClient;

    public CustomerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for customerCallerIdByPhone
     * @param number Phone Number (required)
     * @param format Display format (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerCallerIdByPhoneCall(String number, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/Phone/{number}/display"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerCallerIdByPhoneValidateBeforeCall(String number, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling customerCallerIdByPhone(Async)");
        }
        

        com.squareup.okhttp.Call call = customerCallerIdByPhoneCall(number, format, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Generate Phone Caller id by phone number
     * 
     * @param number Phone Number (required)
     * @param format Display format (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String customerCallerIdByPhone(String number, String format) throws ApiException {
        ApiResponse<String> resp = customerCallerIdByPhoneWithHttpInfo(number, format);
        return resp.getData();
    }

    /**
     * Generate Phone Caller id by phone number
     * 
     * @param number Phone Number (required)
     * @param format Display format (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> customerCallerIdByPhoneWithHttpInfo(String number, String format) throws ApiException {
        com.squareup.okhttp.Call call = customerCallerIdByPhoneValidateBeforeCall(number, format, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generate Phone Caller id by phone number (asynchronously)
     * 
     * @param number Phone Number (required)
     * @param format Display format (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerCallerIdByPhoneAsync(String number, String format, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerCallerIdByPhoneValidateBeforeCall(number, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerCreateCustomer
     * @param obj Customer Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerCreateCustomerCall(DkCloudDataModelCustomersCustomerModel obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = obj;

        // create path and map variables
        String localVarPath = "/api/v1/Customer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerCreateCustomerValidateBeforeCall(DkCloudDataModelCustomersCustomerModel obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'obj' is set
        if (obj == null) {
            throw new ApiException("Missing the required parameter 'obj' when calling customerCreateCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = customerCreateCustomerCall(obj, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Customer
     * 
     * @param obj Customer Model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void customerCreateCustomer(DkCloudDataModelCustomersCustomerModel obj) throws ApiException {
        customerCreateCustomerWithHttpInfo(obj);
    }

    /**
     * Create Customer
     * 
     * @param obj Customer Model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> customerCreateCustomerWithHttpInfo(DkCloudDataModelCustomersCustomerModel obj) throws ApiException {
        com.squareup.okhttp.Call call = customerCreateCustomerValidateBeforeCall(obj, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create Customer (asynchronously)
     * 
     * @param obj Customer Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerCreateCustomerAsync(DkCloudDataModelCustomersCustomerModel obj, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerCreateCustomerValidateBeforeCall(obj, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for customerGetAttachment
     * @param customer Customer Number (required)
     * @param id Document Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetAttachmentCall(String customer, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customer/{customer}/attachment/{id}"
            .replaceAll("\\{" + "customer" + "\\}", apiClient.escapeString(customer.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetAttachmentValidateBeforeCall(String customer, Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling customerGetAttachment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerGetAttachment(Async)");
        }
        

        com.squareup.okhttp.Call call = customerGetAttachmentCall(customer, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a document assigned to a Customer
     * 
     * @param customer Customer Number (required)
     * @param id Document Id (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object customerGetAttachment(String customer, Integer id) throws ApiException {
        ApiResponse<Object> resp = customerGetAttachmentWithHttpInfo(customer, id);
        return resp.getData();
    }

    /**
     * Get a document assigned to a Customer
     * 
     * @param customer Customer Number (required)
     * @param id Document Id (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> customerGetAttachmentWithHttpInfo(String customer, Integer id) throws ApiException {
        com.squareup.okhttp.Call call = customerGetAttachmentValidateBeforeCall(customer, id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a document assigned to a Customer (asynchronously)
     * 
     * @param customer Customer Number (required)
     * @param id Document Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetAttachmentAsync(String customer, Integer id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetAttachmentValidateBeforeCall(customer, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGetCustomerById
     * @param customer Customer Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerByIdCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/{customer}"
            .replaceAll("\\{" + "customer" + "\\}", apiClient.escapeString(customer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetCustomerByIdValidateBeforeCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling customerGetCustomerById(Async)");
        }
        

        com.squareup.okhttp.Call call = customerGetCustomerByIdCall(customer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Customer
     * 
     * @param customer Customer Number (required)
     * @return DkCloudDataModelCustomersCustomerModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelCustomersCustomerModel customerGetCustomerById(String customer) throws ApiException {
        ApiResponse<DkCloudDataModelCustomersCustomerModel> resp = customerGetCustomerByIdWithHttpInfo(customer);
        return resp.getData();
    }

    /**
     * Get a Customer
     * 
     * @param customer Customer Number (required)
     * @return ApiResponse&lt;DkCloudDataModelCustomersCustomerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelCustomersCustomerModel> customerGetCustomerByIdWithHttpInfo(String customer) throws ApiException {
        com.squareup.okhttp.Call call = customerGetCustomerByIdValidateBeforeCall(customer, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelCustomersCustomerModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Customer (asynchronously)
     * 
     * @param customer Customer Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerByIdAsync(String customer, final ApiCallback<DkCloudDataModelCustomersCustomerModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetCustomerByIdValidateBeforeCall(customer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelCustomersCustomerModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGetCustomerCount
     * @param group  (optional)
     * @param zipcode  (optional)
     * @param country  (optional)
     * @param salesperson  (optional)
     * @param paymentterm  (optional)
     * @param paymentmode  (optional)
     * @param novat  (optional)
     * @param blocked  (optional)
     * @param attribute  (optional)
     * @param attributecomment  (optional)
     * @param attributeoption  (optional)
     * @param memo  (optional)
     * @param deleted  (optional)
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerCountCall(String group, String zipcode, String country, String salesperson, String paymentterm, String paymentmode, Boolean novat, Boolean blocked, String attribute, String attributecomment, String attributeoption, String memo, Boolean deleted, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/info/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (zipcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zipcode", zipcode));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("country", country));
        if (salesperson != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("salesperson", salesperson));
        if (paymentterm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paymentterm", paymentterm));
        if (paymentmode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paymentmode", paymentmode));
        if (novat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("novat", novat));
        if (blocked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("blocked", blocked));
        if (attribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attribute", attribute));
        if (attributecomment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attributecomment", attributecomment));
        if (attributeoption != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attributeoption", attributeoption));
        if (memo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("memo", memo));
        if (deleted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deleted", deleted));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetCustomerCountValidateBeforeCall(String group, String zipcode, String country, String salesperson, String paymentterm, String paymentmode, Boolean novat, Boolean blocked, String attribute, String attributecomment, String attributeoption, String memo, Boolean deleted, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = customerGetCustomerCountCall(group, zipcode, country, salesperson, paymentterm, paymentmode, novat, blocked, attribute, attributecomment, attributeoption, memo, deleted, modifiedBefore, modifiedAfter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param group  (optional)
     * @param zipcode  (optional)
     * @param country  (optional)
     * @param salesperson  (optional)
     * @param paymentterm  (optional)
     * @param paymentmode  (optional)
     * @param novat  (optional)
     * @param blocked  (optional)
     * @param attribute  (optional)
     * @param attributecomment  (optional)
     * @param attributeoption  (optional)
     * @param memo  (optional)
     * @param deleted  (optional)
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long customerGetCustomerCount(String group, String zipcode, String country, String salesperson, String paymentterm, String paymentmode, Boolean novat, Boolean blocked, String attribute, String attributecomment, String attributeoption, String memo, Boolean deleted, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter) throws ApiException {
        ApiResponse<Long> resp = customerGetCustomerCountWithHttpInfo(group, zipcode, country, salesperson, paymentterm, paymentmode, novat, blocked, attribute, attributecomment, attributeoption, memo, deleted, modifiedBefore, modifiedAfter);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param group  (optional)
     * @param zipcode  (optional)
     * @param country  (optional)
     * @param salesperson  (optional)
     * @param paymentterm  (optional)
     * @param paymentmode  (optional)
     * @param novat  (optional)
     * @param blocked  (optional)
     * @param attribute  (optional)
     * @param attributecomment  (optional)
     * @param attributeoption  (optional)
     * @param memo  (optional)
     * @param deleted  (optional)
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> customerGetCustomerCountWithHttpInfo(String group, String zipcode, String country, String salesperson, String paymentterm, String paymentmode, Boolean novat, Boolean blocked, String attribute, String attributecomment, String attributeoption, String memo, Boolean deleted, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter) throws ApiException {
        com.squareup.okhttp.Call call = customerGetCustomerCountValidateBeforeCall(group, zipcode, country, salesperson, paymentterm, paymentmode, novat, blocked, attribute, attributecomment, attributeoption, memo, deleted, modifiedBefore, modifiedAfter, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param group  (optional)
     * @param zipcode  (optional)
     * @param country  (optional)
     * @param salesperson  (optional)
     * @param paymentterm  (optional)
     * @param paymentmode  (optional)
     * @param novat  (optional)
     * @param blocked  (optional)
     * @param attribute  (optional)
     * @param attributecomment  (optional)
     * @param attributeoption  (optional)
     * @param memo  (optional)
     * @param deleted  (optional)
     * @param modifiedBefore  (optional)
     * @param modifiedAfter  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerCountAsync(String group, String zipcode, String country, String salesperson, String paymentterm, String paymentmode, Boolean novat, Boolean blocked, String attribute, String attributecomment, String attributeoption, String memo, Boolean deleted, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetCustomerCountValidateBeforeCall(group, zipcode, country, salesperson, paymentterm, paymentmode, novat, blocked, attribute, attributecomment, attributeoption, memo, deleted, modifiedBefore, modifiedAfter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGetCustomerInvoices
     * @param customer Customer Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerInvoicesCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/{customer}/invoice"
            .replaceAll("\\{" + "customer" + "\\}", apiClient.escapeString(customer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetCustomerInvoicesValidateBeforeCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling customerGetCustomerInvoices(Async)");
        }
        

        com.squareup.okhttp.Call call = customerGetCustomerInvoicesCall(customer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Invoices for a Customer
     * 
     * @param customer Customer Number (required)
     * @return List&lt;DkCloudDataModelSalesInvoiceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelSalesInvoiceModel> customerGetCustomerInvoices(String customer) throws ApiException {
        ApiResponse<List<DkCloudDataModelSalesInvoiceModel>> resp = customerGetCustomerInvoicesWithHttpInfo(customer);
        return resp.getData();
    }

    /**
     * Get Invoices for a Customer
     * 
     * @param customer Customer Number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelSalesInvoiceModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelSalesInvoiceModel>> customerGetCustomerInvoicesWithHttpInfo(String customer) throws ApiException {
        com.squareup.okhttp.Call call = customerGetCustomerInvoicesValidateBeforeCall(customer, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesInvoiceModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Invoices for a Customer (asynchronously)
     * 
     * @param customer Customer Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerInvoicesAsync(String customer, final ApiCallback<List<DkCloudDataModelSalesInvoiceModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetCustomerInvoicesValidateBeforeCall(customer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesInvoiceModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGetCustomerOrders
     * @param customer Customer Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerOrdersCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/{customer}/order"
            .replaceAll("\\{" + "customer" + "\\}", apiClient.escapeString(customer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetCustomerOrdersValidateBeforeCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling customerGetCustomerOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = customerGetCustomerOrdersCall(customer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Orders for a Customer
     * 
     * @param customer Customer Number (required)
     * @return List&lt;DkCloudDataModelSalesSalesOrderModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelSalesSalesOrderModel> customerGetCustomerOrders(String customer) throws ApiException {
        ApiResponse<List<DkCloudDataModelSalesSalesOrderModel>> resp = customerGetCustomerOrdersWithHttpInfo(customer);
        return resp.getData();
    }

    /**
     * Get Orders for a Customer
     * 
     * @param customer Customer Number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelSalesSalesOrderModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelSalesSalesOrderModel>> customerGetCustomerOrdersWithHttpInfo(String customer) throws ApiException {
        com.squareup.okhttp.Call call = customerGetCustomerOrdersValidateBeforeCall(customer, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesSalesOrderModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Orders for a Customer (asynchronously)
     * 
     * @param customer Customer Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerOrdersAsync(String customer, final ApiCallback<List<DkCloudDataModelSalesSalesOrderModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetCustomerOrdersValidateBeforeCall(customer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesSalesOrderModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGetCustomerQuote
     * @param customer Customer Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerQuoteCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/{customer}/quote"
            .replaceAll("\\{" + "customer" + "\\}", apiClient.escapeString(customer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetCustomerQuoteValidateBeforeCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling customerGetCustomerQuote(Async)");
        }
        

        com.squareup.okhttp.Call call = customerGetCustomerQuoteCall(customer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Quotes for a Customer
     * 
     * @param customer Customer Number (required)
     * @return List&lt;DkCloudDataModelSalesQuoteHead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelSalesQuoteHead> customerGetCustomerQuote(String customer) throws ApiException {
        ApiResponse<List<DkCloudDataModelSalesQuoteHead>> resp = customerGetCustomerQuoteWithHttpInfo(customer);
        return resp.getData();
    }

    /**
     * Get Quotes for a Customer
     * 
     * @param customer Customer Number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelSalesQuoteHead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelSalesQuoteHead>> customerGetCustomerQuoteWithHttpInfo(String customer) throws ApiException {
        com.squareup.okhttp.Call call = customerGetCustomerQuoteValidateBeforeCall(customer, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesQuoteHead>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Quotes for a Customer (asynchronously)
     * 
     * @param customer Customer Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerQuoteAsync(String customer, final ApiCallback<List<DkCloudDataModelSalesQuoteHead>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetCustomerQuoteValidateBeforeCall(customer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesQuoteHead>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGetCustomerTransactions
     * @param customer Customer Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerTransactionsCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/{customer}/transaction"
            .replaceAll("\\{" + "customer" + "\\}", apiClient.escapeString(customer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetCustomerTransactionsValidateBeforeCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling customerGetCustomerTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = customerGetCustomerTransactionsCall(customer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Transactions for a Customer
     * 
     * @param customer Customer Number (required)
     * @return List&lt;DkCloudDataModelProductsTransactionsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProductsTransactionsModel> customerGetCustomerTransactions(String customer) throws ApiException {
        ApiResponse<List<DkCloudDataModelProductsTransactionsModel>> resp = customerGetCustomerTransactionsWithHttpInfo(customer);
        return resp.getData();
    }

    /**
     * Get Transactions for a Customer
     * 
     * @param customer Customer Number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProductsTransactionsModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProductsTransactionsModel>> customerGetCustomerTransactionsWithHttpInfo(String customer) throws ApiException {
        com.squareup.okhttp.Call call = customerGetCustomerTransactionsValidateBeforeCall(customer, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsTransactionsModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transactions for a Customer (asynchronously)
     * 
     * @param customer Customer Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomerTransactionsAsync(String customer, final ApiCallback<List<DkCloudDataModelProductsTransactionsModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetCustomerTransactionsValidateBeforeCall(customer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsTransactionsModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGetCustomers
     * @param includeObjects Include Objects (required)
     * @param include Field to include (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomersCall(Boolean includeObjects, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/{includeObjects}"
            .replaceAll("\\{" + "includeObjects" + "\\}", apiClient.escapeString(includeObjects.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetCustomersValidateBeforeCall(Boolean includeObjects, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'includeObjects' is set
        if (includeObjects == null) {
            throw new ApiException("Missing the required parameter 'includeObjects' when calling customerGetCustomers(Async)");
        }
        

        com.squareup.okhttp.Call call = customerGetCustomersCall(includeObjects, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Customers
     * 
     * @param includeObjects Include Objects (required)
     * @param include Field to include (optional)
     * @return List&lt;DkCloudDataModelCustomersCustomerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelCustomersCustomerModel> customerGetCustomers(Boolean includeObjects, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelCustomersCustomerModel>> resp = customerGetCustomersWithHttpInfo(includeObjects, include);
        return resp.getData();
    }

    /**
     * Get Customers
     * 
     * @param includeObjects Include Objects (required)
     * @param include Field to include (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelCustomersCustomerModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelCustomersCustomerModel>> customerGetCustomersWithHttpInfo(Boolean includeObjects, String include) throws ApiException {
        com.squareup.okhttp.Call call = customerGetCustomersValidateBeforeCall(includeObjects, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersCustomerModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Customers (asynchronously)
     * 
     * @param includeObjects Include Objects (required)
     * @param include Field to include (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomersAsync(Boolean includeObjects, String include, final ApiCallback<List<DkCloudDataModelCustomersCustomerModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetCustomersValidateBeforeCall(includeObjects, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersCustomerModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGetCustomersPaged
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Customers per page (default&#x3D;100) (required)
     * @param group Group (optional)
     * @param zipcode Zip Code (optional)
     * @param country Country (optional)
     * @param salesperson Sales Person (optional)
     * @param paymentterm Payment Term (optional)
     * @param paymentmode Payment Mode (optional)
     * @param novat No VAT (optional)
     * @param blocked Blocked (optional)
     * @param attribute Attribute (optional)
     * @param attributecomment Attribute Comment (optional)
     * @param attributeoption Attribute Option (optional)
     * @param memo Search memo for string (optional)
     * @param deleted Customer Deleted (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param include Fields to Include (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomersPagedCall(Integer page, Integer count, String group, String zipcode, String country, String salesperson, String paymentterm, String paymentmode, Boolean novat, Boolean blocked, String attribute, String attributecomment, String attributeoption, String memo, Boolean deleted, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/page/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (zipcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("zipcode", zipcode));
        if (country != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("country", country));
        if (salesperson != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("salesperson", salesperson));
        if (paymentterm != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paymentterm", paymentterm));
        if (paymentmode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("paymentmode", paymentmode));
        if (novat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("novat", novat));
        if (blocked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("blocked", blocked));
        if (attribute != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attribute", attribute));
        if (attributecomment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attributecomment", attributecomment));
        if (attributeoption != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("attributeoption", attributeoption));
        if (memo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("memo", memo));
        if (deleted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deleted", deleted));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetCustomersPagedValidateBeforeCall(Integer page, Integer count, String group, String zipcode, String country, String salesperson, String paymentterm, String paymentmode, Boolean novat, Boolean blocked, String attribute, String attributecomment, String attributeoption, String memo, Boolean deleted, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling customerGetCustomersPaged(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling customerGetCustomersPaged(Async)");
        }
        

        com.squareup.okhttp.Call call = customerGetCustomersPagedCall(page, count, group, zipcode, country, salesperson, paymentterm, paymentmode, novat, blocked, attribute, attributecomment, attributeoption, memo, deleted, modifiedBefore, modifiedAfter, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Customers base on Filter
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Customers per page (default&#x3D;100) (required)
     * @param group Group (optional)
     * @param zipcode Zip Code (optional)
     * @param country Country (optional)
     * @param salesperson Sales Person (optional)
     * @param paymentterm Payment Term (optional)
     * @param paymentmode Payment Mode (optional)
     * @param novat No VAT (optional)
     * @param blocked Blocked (optional)
     * @param attribute Attribute (optional)
     * @param attributecomment Attribute Comment (optional)
     * @param attributeoption Attribute Option (optional)
     * @param memo Search memo for string (optional)
     * @param deleted Customer Deleted (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param include Fields to Include (optional)
     * @return List&lt;DkCloudDataModelCustomersCustomerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelCustomersCustomerModel> customerGetCustomersPaged(Integer page, Integer count, String group, String zipcode, String country, String salesperson, String paymentterm, String paymentmode, Boolean novat, Boolean blocked, String attribute, String attributecomment, String attributeoption, String memo, Boolean deleted, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelCustomersCustomerModel>> resp = customerGetCustomersPagedWithHttpInfo(page, count, group, zipcode, country, salesperson, paymentterm, paymentmode, novat, blocked, attribute, attributecomment, attributeoption, memo, deleted, modifiedBefore, modifiedAfter, include);
        return resp.getData();
    }

    /**
     * Get Customers base on Filter
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Customers per page (default&#x3D;100) (required)
     * @param group Group (optional)
     * @param zipcode Zip Code (optional)
     * @param country Country (optional)
     * @param salesperson Sales Person (optional)
     * @param paymentterm Payment Term (optional)
     * @param paymentmode Payment Mode (optional)
     * @param novat No VAT (optional)
     * @param blocked Blocked (optional)
     * @param attribute Attribute (optional)
     * @param attributecomment Attribute Comment (optional)
     * @param attributeoption Attribute Option (optional)
     * @param memo Search memo for string (optional)
     * @param deleted Customer Deleted (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param include Fields to Include (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelCustomersCustomerModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelCustomersCustomerModel>> customerGetCustomersPagedWithHttpInfo(Integer page, Integer count, String group, String zipcode, String country, String salesperson, String paymentterm, String paymentmode, Boolean novat, Boolean blocked, String attribute, String attributecomment, String attributeoption, String memo, Boolean deleted, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include) throws ApiException {
        com.squareup.okhttp.Call call = customerGetCustomersPagedValidateBeforeCall(page, count, group, zipcode, country, salesperson, paymentterm, paymentmode, novat, blocked, attribute, attributecomment, attributeoption, memo, deleted, modifiedBefore, modifiedAfter, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersCustomerModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Customers base on Filter (asynchronously)
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Customers per page (default&#x3D;100) (required)
     * @param group Group (optional)
     * @param zipcode Zip Code (optional)
     * @param country Country (optional)
     * @param salesperson Sales Person (optional)
     * @param paymentterm Payment Term (optional)
     * @param paymentmode Payment Mode (optional)
     * @param novat No VAT (optional)
     * @param blocked Blocked (optional)
     * @param attribute Attribute (optional)
     * @param attributecomment Attribute Comment (optional)
     * @param attributeoption Attribute Option (optional)
     * @param memo Search memo for string (optional)
     * @param deleted Customer Deleted (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param include Fields to Include (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetCustomersPagedAsync(Integer page, Integer count, String group, String zipcode, String country, String salesperson, String paymentterm, String paymentmode, Boolean novat, Boolean blocked, String attribute, String attributecomment, String attributeoption, String memo, Boolean deleted, OffsetDateTime modifiedBefore, OffsetDateTime modifiedAfter, String include, final ApiCallback<List<DkCloudDataModelCustomersCustomerModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetCustomersPagedValidateBeforeCall(page, count, group, zipcode, country, salesperson, paymentterm, paymentmode, novat, blocked, attribute, attributecomment, attributeoption, memo, deleted, modifiedBefore, modifiedAfter, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersCustomerModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGetCutomerProjects
     * @param customer Customer Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetCutomerProjectsCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/{customer}/project"
            .replaceAll("\\{" + "customer" + "\\}", apiClient.escapeString(customer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetCutomerProjectsValidateBeforeCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling customerGetCutomerProjects(Async)");
        }
        

        com.squareup.okhttp.Call call = customerGetCutomerProjectsCall(customer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Projects for a Customer
     * 
     * @param customer Customer Number (required)
     * @return List&lt;DkCloudDataModelProjectProjectModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProjectProjectModel> customerGetCutomerProjects(String customer) throws ApiException {
        ApiResponse<List<DkCloudDataModelProjectProjectModel>> resp = customerGetCutomerProjectsWithHttpInfo(customer);
        return resp.getData();
    }

    /**
     * Get Projects for a Customer
     * 
     * @param customer Customer Number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProjectProjectModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProjectProjectModel>> customerGetCutomerProjectsWithHttpInfo(String customer) throws ApiException {
        com.squareup.okhttp.Call call = customerGetCutomerProjectsValidateBeforeCall(customer, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Projects for a Customer (asynchronously)
     * 
     * @param customer Customer Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetCutomerProjectsAsync(String customer, final ApiCallback<List<DkCloudDataModelProjectProjectModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetCutomerProjectsValidateBeforeCall(customer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGetGroup
     * @param id Group Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Groups per Page (default&#x3D;100) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetGroupCall(String id, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/group/{id}/{page}/{count}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetGroupValidateBeforeCall(String id, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling customerGetGroup(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling customerGetGroup(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling customerGetGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = customerGetGroupCall(id, page, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Customers by Groups
     * 
     * @param id Group Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Groups per Page (default&#x3D;100) (required)
     * @return List&lt;DkCloudDataModelCustomersCustomerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelCustomersCustomerModel> customerGetGroup(String id, Integer page, Integer count) throws ApiException {
        ApiResponse<List<DkCloudDataModelCustomersCustomerModel>> resp = customerGetGroupWithHttpInfo(id, page, count);
        return resp.getData();
    }

    /**
     * Get Customers by Groups
     * 
     * @param id Group Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Groups per Page (default&#x3D;100) (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelCustomersCustomerModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelCustomersCustomerModel>> customerGetGroupWithHttpInfo(String id, Integer page, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = customerGetGroupValidateBeforeCall(id, page, count, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersCustomerModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Customers by Groups (asynchronously)
     * 
     * @param id Group Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Groups per Page (default&#x3D;100) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetGroupAsync(String id, Integer page, Integer count, final ApiCallback<List<DkCloudDataModelCustomersCustomerModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetGroupValidateBeforeCall(id, page, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersCustomerModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGetSearch
     * @param value Search Value (required)
     * @param max Return Maximum Count (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGetSearchCall(String value, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/search/{value}/{max}"
            .replaceAll("\\{" + "value" + "\\}", apiClient.escapeString(value.toString()))
            .replaceAll("\\{" + "max" + "\\}", apiClient.escapeString(max.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGetSearchValidateBeforeCall(String value, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling customerGetSearch(Async)");
        }
        
        // verify the required parameter 'max' is set
        if (max == null) {
            throw new ApiException("Missing the required parameter 'max' when calling customerGetSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = customerGetSearchCall(value, max, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search for Customers
     * 
     * @param value Search Value (required)
     * @param max Return Maximum Count (required)
     * @return List&lt;DkCloudDataModelCustomersCustomerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelCustomersCustomerModel> customerGetSearch(String value, Integer max) throws ApiException {
        ApiResponse<List<DkCloudDataModelCustomersCustomerModel>> resp = customerGetSearchWithHttpInfo(value, max);
        return resp.getData();
    }

    /**
     * Search for Customers
     * 
     * @param value Search Value (required)
     * @param max Return Maximum Count (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelCustomersCustomerModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelCustomersCustomerModel>> customerGetSearchWithHttpInfo(String value, Integer max) throws ApiException {
        com.squareup.okhttp.Call call = customerGetSearchValidateBeforeCall(value, max, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersCustomerModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for Customers (asynchronously)
     * 
     * @param value Search Value (required)
     * @param max Return Maximum Count (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGetSearchAsync(String value, Integer max, final ApiCallback<List<DkCloudDataModelCustomersCustomerModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGetSearchValidateBeforeCall(value, max, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersCustomerModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerGroupGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerGroupGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customergroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerGroupGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = customerGroupGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get customer groups
     * 
     * @return List&lt;DkCloudDataModelCustomersCustomerGroupModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelCustomersCustomerGroupModel> customerGroupGet() throws ApiException {
        ApiResponse<List<DkCloudDataModelCustomersCustomerGroupModel>> resp = customerGroupGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get customer groups
     * 
     * @return ApiResponse&lt;List&lt;DkCloudDataModelCustomersCustomerGroupModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelCustomersCustomerGroupModel>> customerGroupGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = customerGroupGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersCustomerGroupModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get customer groups (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerGroupGetAsync(final ApiCallback<List<DkCloudDataModelCustomersCustomerGroupModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerGroupGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersCustomerGroupModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerRemoveCustomer
     * @param customer Customer Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerRemoveCustomerCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/{customer}"
            .replaceAll("\\{" + "customer" + "\\}", apiClient.escapeString(customer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerRemoveCustomerValidateBeforeCall(String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling customerRemoveCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = customerRemoveCustomerCall(customer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Customer
     * 
     * @param customer Customer Number (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void customerRemoveCustomer(String customer) throws ApiException {
        customerRemoveCustomerWithHttpInfo(customer);
    }

    /**
     * Delete a Customer
     * 
     * @param customer Customer Number (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> customerRemoveCustomerWithHttpInfo(String customer) throws ApiException {
        com.squareup.okhttp.Call call = customerRemoveCustomerValidateBeforeCall(customer, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Customer (asynchronously)
     * 
     * @param customer Customer Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerRemoveCustomerAsync(String customer, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerRemoveCustomerValidateBeforeCall(customer, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for customerSearchByPhone
     * @param number Phone Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerSearchByPhoneCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/Phone/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerSearchByPhoneValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling customerSearchByPhone(Async)");
        }
        

        com.squareup.okhttp.Call call = customerSearchByPhoneCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lookup customer by phone number  this looks into Phone,PhoneLocal,PhoneMobile on customer,contacts and Recivers
     * 
     * @param number Phone Number (required)
     * @return DkCloudDataModelCustomersCustomerModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelCustomersCustomerModel customerSearchByPhone(String number) throws ApiException {
        ApiResponse<DkCloudDataModelCustomersCustomerModel> resp = customerSearchByPhoneWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Lookup customer by phone number  this looks into Phone,PhoneLocal,PhoneMobile on customer,contacts and Recivers
     * 
     * @param number Phone Number (required)
     * @return ApiResponse&lt;DkCloudDataModelCustomersCustomerModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelCustomersCustomerModel> customerSearchByPhoneWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = customerSearchByPhoneValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelCustomersCustomerModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lookup customer by phone number  this looks into Phone,PhoneLocal,PhoneMobile on customer,contacts and Recivers (asynchronously)
     * 
     * @param number Phone Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerSearchByPhoneAsync(String number, final ApiCallback<DkCloudDataModelCustomersCustomerModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerSearchByPhoneValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelCustomersCustomerModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerTransactionGetCustomerTransactions
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greater Than (optional)
     * @param include fields to include (optional)
     * @param customer Customer Number (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerTransactionGetCustomerTransactionsCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/customer/transaction/page/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (dueAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dueAfter", dueAfter));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (voucher != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucher", voucher));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (recordid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recordid", recordid));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));
        if (customer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customer", customer));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerTransactionGetCustomerTransactionsValidateBeforeCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String customer, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling customerTransactionGetCustomerTransactions(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling customerTransactionGetCustomerTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = customerTransactionGetCustomerTransactionsCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, include, customer, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get General Ledger Transaction
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greater Than (optional)
     * @param include fields to include (optional)
     * @param customer Customer Number (optional)
     * @return List&lt;DkCloudDataModelCustomersTransactionModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelCustomersTransactionModel> customerTransactionGetCustomerTransactions(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String customer) throws ApiException {
        ApiResponse<List<DkCloudDataModelCustomersTransactionModel>> resp = customerTransactionGetCustomerTransactionsWithHttpInfo(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, include, customer);
        return resp.getData();
    }

    /**
     * Get General Ledger Transaction
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greater Than (optional)
     * @param include fields to include (optional)
     * @param customer Customer Number (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelCustomersTransactionModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelCustomersTransactionModel>> customerTransactionGetCustomerTransactionsWithHttpInfo(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String customer) throws ApiException {
        com.squareup.okhttp.Call call = customerTransactionGetCustomerTransactionsValidateBeforeCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, include, customer, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersTransactionModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get General Ledger Transaction (asynchronously)
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param modifiedAfter Transaction modified after (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greater Than (optional)
     * @param include fields to include (optional)
     * @param customer Customer Number (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerTransactionGetCustomerTransactionsAsync(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String customer, final ApiCallback<List<DkCloudDataModelCustomersTransactionModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerTransactionGetCustomerTransactionsValidateBeforeCall(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, include, customer, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelCustomersTransactionModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for customerUpdateCustomer
     * @param customer Customer Number (required)
     * @param obj Customer Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call customerUpdateCustomerCall(String customer, DkCloudDataModelCustomersCustomerModel obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = obj;

        // create path and map variables
        String localVarPath = "/api/v1/Customer/{customer}"
            .replaceAll("\\{" + "customer" + "\\}", apiClient.escapeString(customer.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call customerUpdateCustomerValidateBeforeCall(String customer, DkCloudDataModelCustomersCustomerModel obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling customerUpdateCustomer(Async)");
        }
        
        // verify the required parameter 'obj' is set
        if (obj == null) {
            throw new ApiException("Missing the required parameter 'obj' when calling customerUpdateCustomer(Async)");
        }
        

        com.squareup.okhttp.Call call = customerUpdateCustomerCall(customer, obj, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Customer
     * 
     * @param customer Customer Number (required)
     * @param obj Customer Model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void customerUpdateCustomer(String customer, DkCloudDataModelCustomersCustomerModel obj) throws ApiException {
        customerUpdateCustomerWithHttpInfo(customer, obj);
    }

    /**
     * Update a Customer
     * 
     * @param customer Customer Number (required)
     * @param obj Customer Model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> customerUpdateCustomerWithHttpInfo(String customer, DkCloudDataModelCustomersCustomerModel obj) throws ApiException {
        com.squareup.okhttp.Call call = customerUpdateCustomerValidateBeforeCall(customer, obj, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update a Customer (asynchronously)
     * 
     * @param customer Customer Number (required)
     * @param obj Customer Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call customerUpdateCustomerAsync(String customer, DkCloudDataModelCustomersCustomerModel obj, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = customerUpdateCustomerValidateBeforeCall(customer, obj, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
