/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkCloudDataModelMembersCareer;
import io.swagger.client.model.DkCloudDataModelMembersEducation;
import io.swagger.client.model.DkCloudDataModelMembersFee;
import io.swagger.client.model.DkCloudDataModelMembersMember;
import io.swagger.client.model.DkCloudDataModelMembersMemberFund;
import io.swagger.client.model.DkCloudDataModelMembersMemberShipCompany;
import io.swagger.client.model.DkCloudDataModelMembersMemberSubGroup;
import io.swagger.client.model.DkCloudDataModelMembersResume;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MemberApi {
    private ApiClient apiClient;

    public MemberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MemberApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for memberCreateMember
     * @param obj Member Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberCreateMemberCall(DkCloudDataModelMembersMember obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = obj;

        // create path and map variables
        String localVarPath = "/api/v1/member";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberCreateMemberValidateBeforeCall(DkCloudDataModelMembersMember obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'obj' is set
        if (obj == null) {
            throw new ApiException("Missing the required parameter 'obj' when calling memberCreateMember(Async)");
        }
        

        com.squareup.okhttp.Call call = memberCreateMemberCall(obj, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Member
     * 
     * @param obj Member Model (required)
     * @return DkCloudDataModelMembersMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelMembersMember memberCreateMember(DkCloudDataModelMembersMember obj) throws ApiException {
        ApiResponse<DkCloudDataModelMembersMember> resp = memberCreateMemberWithHttpInfo(obj);
        return resp.getData();
    }

    /**
     * Create a Member
     * 
     * @param obj Member Model (required)
     * @return ApiResponse&lt;DkCloudDataModelMembersMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelMembersMember> memberCreateMemberWithHttpInfo(DkCloudDataModelMembersMember obj) throws ApiException {
        com.squareup.okhttp.Call call = memberCreateMemberValidateBeforeCall(obj, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelMembersMember>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Member (asynchronously)
     * 
     * @param obj Member Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberCreateMemberAsync(DkCloudDataModelMembersMember obj, final ApiCallback<DkCloudDataModelMembersMember> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberCreateMemberValidateBeforeCall(obj, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelMembersMember>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberCreateMemberFee
     * @param number Member Number (required)
     * @param fee Fee Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberCreateMemberFeeCall(String number, DkCloudDataModelMembersFee fee, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fee;

        // create path and map variables
        String localVarPath = "/api/v1/Member/{number}/fee"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberCreateMemberFeeValidateBeforeCall(String number, DkCloudDataModelMembersFee fee, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberCreateMemberFee(Async)");
        }
        
        // verify the required parameter 'fee' is set
        if (fee == null) {
            throw new ApiException("Missing the required parameter 'fee' when calling memberCreateMemberFee(Async)");
        }
        

        com.squareup.okhttp.Call call = memberCreateMemberFeeCall(number, fee, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Use this method to create a member fee
     * 
     * @param number Member Number (required)
     * @param fee Fee Model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void memberCreateMemberFee(String number, DkCloudDataModelMembersFee fee) throws ApiException {
        memberCreateMemberFeeWithHttpInfo(number, fee);
    }

    /**
     * Use this method to create a member fee
     * 
     * @param number Member Number (required)
     * @param fee Fee Model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> memberCreateMemberFeeWithHttpInfo(String number, DkCloudDataModelMembersFee fee) throws ApiException {
        com.squareup.okhttp.Call call = memberCreateMemberFeeValidateBeforeCall(number, fee, null, null);
        return apiClient.execute(call);
    }

    /**
     * Use this method to create a member fee (asynchronously)
     * 
     * @param number Member Number (required)
     * @param fee Fee Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberCreateMemberFeeAsync(String number, DkCloudDataModelMembersFee fee, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberCreateMemberFeeValidateBeforeCall(number, fee, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for memberGet
     * @param page Page Number (required)
     * @param size Members per Page (required)
     * @param modified Modified After (optional)
     * @param course Cource Code (optional)
     * @param blocked Blocked (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberGetCall(Integer page, Integer size, OffsetDateTime modified, String course, Boolean blocked, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Member/{page}/{size}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "size" + "\\}", apiClient.escapeString(size.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modified != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modified", modified));
        if (course != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("course", course));
        if (blocked != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("blocked", blocked));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberGetValidateBeforeCall(Integer page, Integer size, OffsetDateTime modified, String course, Boolean blocked, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling memberGet(Async)");
        }
        
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling memberGet(Async)");
        }
        

        com.squareup.okhttp.Call call = memberGetCall(page, size, modified, course, blocked, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Memebers
     * 
     * @param page Page Number (required)
     * @param size Members per Page (required)
     * @param modified Modified After (optional)
     * @param course Cource Code (optional)
     * @param blocked Blocked (optional)
     * @return List&lt;DkCloudDataModelMembersMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelMembersMember> memberGet(Integer page, Integer size, OffsetDateTime modified, String course, Boolean blocked) throws ApiException {
        ApiResponse<List<DkCloudDataModelMembersMember>> resp = memberGetWithHttpInfo(page, size, modified, course, blocked);
        return resp.getData();
    }

    /**
     * Get Memebers
     * 
     * @param page Page Number (required)
     * @param size Members per Page (required)
     * @param modified Modified After (optional)
     * @param course Cource Code (optional)
     * @param blocked Blocked (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelMembersMember&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelMembersMember>> memberGetWithHttpInfo(Integer page, Integer size, OffsetDateTime modified, String course, Boolean blocked) throws ApiException {
        com.squareup.okhttp.Call call = memberGetValidateBeforeCall(page, size, modified, course, blocked, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersMember>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Memebers (asynchronously)
     * 
     * @param page Page Number (required)
     * @param size Members per Page (required)
     * @param modified Modified After (optional)
     * @param course Cource Code (optional)
     * @param blocked Blocked (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberGetAsync(Integer page, Integer size, OffsetDateTime modified, String course, Boolean blocked, final ApiCallback<List<DkCloudDataModelMembersMember>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberGetValidateBeforeCall(page, size, modified, course, blocked, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersMember>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberGetByNumber
     * @param number Member Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberGetByNumberCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Member/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberGetByNumberValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberGetByNumber(Async)");
        }
        

        com.squareup.okhttp.Call call = memberGetByNumberCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Member
     * 
     * @param number Member Number (required)
     * @return DkCloudDataModelMembersMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelMembersMember memberGetByNumber(String number) throws ApiException {
        ApiResponse<DkCloudDataModelMembersMember> resp = memberGetByNumberWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get Member
     * 
     * @param number Member Number (required)
     * @return ApiResponse&lt;DkCloudDataModelMembersMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelMembersMember> memberGetByNumberWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = memberGetByNumberValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelMembersMember>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Member (asynchronously)
     * 
     * @param number Member Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberGetByNumberAsync(String number, final ApiCallback<DkCloudDataModelMembersMember> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberGetByNumberValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelMembersMember>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberGetCareer
     * @param number Member Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberGetCareerCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Member/{number}/Career"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberGetCareerValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberGetCareer(Async)");
        }
        

        com.squareup.okhttp.Call call = memberGetCareerCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Member Career
     * 
     * @param number Member Number (required)
     * @return List&lt;DkCloudDataModelMembersCareer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelMembersCareer> memberGetCareer(String number) throws ApiException {
        ApiResponse<List<DkCloudDataModelMembersCareer>> resp = memberGetCareerWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get Member Career
     * 
     * @param number Member Number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelMembersCareer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelMembersCareer>> memberGetCareerWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = memberGetCareerValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersCareer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Member Career (asynchronously)
     * 
     * @param number Member Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberGetCareerAsync(String number, final ApiCallback<List<DkCloudDataModelMembersCareer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberGetCareerValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersCareer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberGetEducation
     * @param number Member Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberGetEducationCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Member/{number}/education"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberGetEducationValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberGetEducation(Async)");
        }
        

        com.squareup.okhttp.Call call = memberGetEducationCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Member Education
     * 
     * @param number Member Number (required)
     * @return List&lt;DkCloudDataModelMembersEducation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelMembersEducation> memberGetEducation(String number) throws ApiException {
        ApiResponse<List<DkCloudDataModelMembersEducation>> resp = memberGetEducationWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get Member Education
     * 
     * @param number Member Number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelMembersEducation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelMembersEducation>> memberGetEducationWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = memberGetEducationValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersEducation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Member Education (asynchronously)
     * 
     * @param number Member Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberGetEducationAsync(String number, final ApiCallback<List<DkCloudDataModelMembersEducation>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberGetEducationValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersEducation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberGetFund
     * @param number Member Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberGetFundCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Member/{number}/fund"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberGetFundValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberGetFund(Async)");
        }
        

        com.squareup.okhttp.Call call = memberGetFundCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Member Funds
     * 
     * @param number Member Number (required)
     * @return DkCloudDataModelMembersMemberFund
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelMembersMemberFund memberGetFund(String number) throws ApiException {
        ApiResponse<DkCloudDataModelMembersMemberFund> resp = memberGetFundWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get Member Funds
     * 
     * @param number Member Number (required)
     * @return ApiResponse&lt;DkCloudDataModelMembersMemberFund&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelMembersMemberFund> memberGetFundWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = memberGetFundValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelMembersMemberFund>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Member Funds (asynchronously)
     * 
     * @param number Member Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberGetFundAsync(String number, final ApiCallback<DkCloudDataModelMembersMemberFund> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberGetFundValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelMembersMemberFund>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberGetMembershipData
     * @param number Member Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberGetMembershipDataCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Member/{number}/membership"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberGetMembershipDataValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberGetMembershipData(Async)");
        }
        

        com.squareup.okhttp.Call call = memberGetMembershipDataCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Membership Company assigned to Member
     * 
     * @param number Member Number (required)
     * @return List&lt;DkCloudDataModelMembersMemberShipCompany&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelMembersMemberShipCompany> memberGetMembershipData(String number) throws ApiException {
        ApiResponse<List<DkCloudDataModelMembersMemberShipCompany>> resp = memberGetMembershipDataWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get Membership Company assigned to Member
     * 
     * @param number Member Number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelMembersMemberShipCompany&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelMembersMemberShipCompany>> memberGetMembershipDataWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = memberGetMembershipDataValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersMemberShipCompany>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Membership Company assigned to Member (asynchronously)
     * 
     * @param number Member Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberGetMembershipDataAsync(String number, final ApiCallback<List<DkCloudDataModelMembersMemberShipCompany>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberGetMembershipDataValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersMemberShipCompany>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberGetResume
     * @param number Member Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberGetResumeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Member/{number}/Resume"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberGetResumeValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberGetResume(Async)");
        }
        

        com.squareup.okhttp.Call call = memberGetResumeCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Member Resume
     * 
     * @param number Member Number (required)
     * @return List&lt;DkCloudDataModelMembersResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelMembersResume> memberGetResume(String number) throws ApiException {
        ApiResponse<List<DkCloudDataModelMembersResume>> resp = memberGetResumeWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get Member Resume
     * 
     * @param number Member Number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelMembersResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelMembersResume>> memberGetResumeWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = memberGetResumeValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersResume>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Member Resume (asynchronously)
     * 
     * @param number Member Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberGetResumeAsync(String number, final ApiCallback<List<DkCloudDataModelMembersResume>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberGetResumeValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersResume>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberGetSubGroup
     * @param number Member Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberGetSubGroupCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Member/{number}/subgroup"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberGetSubGroupValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberGetSubGroup(Async)");
        }
        

        com.squareup.okhttp.Call call = memberGetSubGroupCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Member Sub Groups
     * 
     * @param number Member Number (required)
     * @return List&lt;DkCloudDataModelMembersMemberSubGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelMembersMemberSubGroup> memberGetSubGroup(String number) throws ApiException {
        ApiResponse<List<DkCloudDataModelMembersMemberSubGroup>> resp = memberGetSubGroupWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get Member Sub Groups
     * 
     * @param number Member Number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelMembersMemberSubGroup&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelMembersMemberSubGroup>> memberGetSubGroupWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = memberGetSubGroupValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersMemberSubGroup>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Member Sub Groups (asynchronously)
     * 
     * @param number Member Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberGetSubGroupAsync(String number, final ApiCallback<List<DkCloudDataModelMembersMemberSubGroup>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberGetSubGroupValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelMembersMemberSubGroup>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for memberPut
     * @param number Member Number (required)
     * @param obj Member Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call memberPutCall(String number, DkCloudDataModelMembersMember obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = obj;

        // create path and map variables
        String localVarPath = "/api/v1/member/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call memberPutValidateBeforeCall(String number, DkCloudDataModelMembersMember obj, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling memberPut(Async)");
        }
        
        // verify the required parameter 'obj' is set
        if (obj == null) {
            throw new ApiException("Missing the required parameter 'obj' when calling memberPut(Async)");
        }
        

        com.squareup.okhttp.Call call = memberPutCall(number, obj, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Member
     * 
     * @param number Member Number (required)
     * @param obj Member Model (required)
     * @return DkCloudDataModelMembersMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelMembersMember memberPut(String number, DkCloudDataModelMembersMember obj) throws ApiException {
        ApiResponse<DkCloudDataModelMembersMember> resp = memberPutWithHttpInfo(number, obj);
        return resp.getData();
    }

    /**
     * Update Member
     * 
     * @param number Member Number (required)
     * @param obj Member Model (required)
     * @return ApiResponse&lt;DkCloudDataModelMembersMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelMembersMember> memberPutWithHttpInfo(String number, DkCloudDataModelMembersMember obj) throws ApiException {
        com.squareup.okhttp.Call call = memberPutValidateBeforeCall(number, obj, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelMembersMember>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Member (asynchronously)
     * 
     * @param number Member Number (required)
     * @param obj Member Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call memberPutAsync(String number, DkCloudDataModelMembersMember obj, final ApiCallback<DkCloudDataModelMembersMember> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = memberPutValidateBeforeCall(number, obj, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelMembersMember>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
