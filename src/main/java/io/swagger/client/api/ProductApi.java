/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkCloudDataModelProductsBarcodesModel;
import io.swagger.client.model.DkCloudDataModelProductsProductGroupModel;
import io.swagger.client.model.DkCloudDataModelProductsProductModel;
import io.swagger.client.model.DkCloudDataModelProductsTransactionsModel;
import io.swagger.client.model.DkPlusAPIModelsProductInventoryBarcode;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductApi {
    private ApiClient apiClient;

    public ProductApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for barcodeCreateBarCode
     * @param model barcode model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodeCreateBarCodeCall(DkPlusAPIModelsProductInventoryBarcode model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = model;

        // create path and map variables
        String localVarPath = "/api/v1/barcode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeCreateBarCodeValidateBeforeCall(DkPlusAPIModelsProductInventoryBarcode model, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling barcodeCreateBarCode(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodeCreateBarCodeCall(model, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a product barcode
     * 
     * @param model barcode model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void barcodeCreateBarCode(DkPlusAPIModelsProductInventoryBarcode model) throws ApiException {
        barcodeCreateBarCodeWithHttpInfo(model);
    }

    /**
     * Create a product barcode
     * 
     * @param model barcode model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> barcodeCreateBarCodeWithHttpInfo(DkPlusAPIModelsProductInventoryBarcode model) throws ApiException {
        com.squareup.okhttp.Call call = barcodeCreateBarCodeValidateBeforeCall(model, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a product barcode (asynchronously)
     * 
     * @param model barcode model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeCreateBarCodeAsync(DkPlusAPIModelsProductInventoryBarcode model, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeCreateBarCodeValidateBeforeCall(model, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for barcodeGetBarcode
     * @param id Barcode (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call barcodeGetBarcodeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/barcode/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call barcodeGetBarcodeValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling barcodeGetBarcode(Async)");
        }
        

        com.squareup.okhttp.Call call = barcodeGetBarcodeCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a product from barcode
     * 
     * @param id Barcode (required)
     * @return DkCloudDataModelProductsProductModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelProductsProductModel barcodeGetBarcode(String id) throws ApiException {
        ApiResponse<DkCloudDataModelProductsProductModel> resp = barcodeGetBarcodeWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get a product from barcode
     * 
     * @param id Barcode (required)
     * @return ApiResponse&lt;DkCloudDataModelProductsProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelProductsProductModel> barcodeGetBarcodeWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = barcodeGetBarcodeValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProductsProductModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a product from barcode (asynchronously)
     * 
     * @param id Barcode (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call barcodeGetBarcodeAsync(String id, final ApiCallback<DkCloudDataModelProductsProductModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = barcodeGetBarcodeValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProductsProductModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productCreateProduct
     * @param value Product Create Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productCreateProductCall(DkCloudDataModelProductsProductModel value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/api/v1/product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productCreateProductValidateBeforeCall(DkCloudDataModelProductsProductModel value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling productCreateProduct(Async)");
        }
        

        com.squareup.okhttp.Call call = productCreateProductCall(value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Product
     * 
     * @param value Product Create Model (required)
     * @return DkCloudDataModelProductsProductModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelProductsProductModel productCreateProduct(DkCloudDataModelProductsProductModel value) throws ApiException {
        ApiResponse<DkCloudDataModelProductsProductModel> resp = productCreateProductWithHttpInfo(value);
        return resp.getData();
    }

    /**
     * Create Product
     * 
     * @param value Product Create Model (required)
     * @return ApiResponse&lt;DkCloudDataModelProductsProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelProductsProductModel> productCreateProductWithHttpInfo(DkCloudDataModelProductsProductModel value) throws ApiException {
        com.squareup.okhttp.Call call = productCreateProductValidateBeforeCall(value, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProductsProductModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Product (asynchronously)
     * 
     * @param value Product Create Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productCreateProductAsync(DkCloudDataModelProductsProductModel value, final ApiCallback<DkCloudDataModelProductsProductModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productCreateProductValidateBeforeCall(value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProductsProductModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productDeleteProduct
     * @param id Item Code (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productDeleteProductCall(String id, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Product/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isBase64 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isBase64", isBase64));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productDeleteProductValidateBeforeCall(String id, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productDeleteProduct(Async)");
        }
        

        com.squareup.okhttp.Call call = productDeleteProductCall(id, isBase64, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Product
     * 
     * @param id Item Code (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void productDeleteProduct(String id, Boolean isBase64) throws ApiException {
        productDeleteProductWithHttpInfo(id, isBase64);
    }

    /**
     * Delete Product
     * 
     * @param id Item Code (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> productDeleteProductWithHttpInfo(String id, Boolean isBase64) throws ApiException {
        com.squareup.okhttp.Call call = productDeleteProductValidateBeforeCall(id, isBase64, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Product (asynchronously)
     * 
     * @param id Item Code (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productDeleteProductAsync(String id, Boolean isBase64, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productDeleteProductValidateBeforeCall(id, isBase64, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for productGetModified
     * @param modified Modified (required)
     * @param page Page Number (required)
     * @param count Product per Page (required)
     * @param detailed Detailed (optional)
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param include  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call productGetModifiedCall(OffsetDateTime modified, Integer page, Integer count, OffsetDateTime detailed, Boolean inactive, Boolean onweb, String group, String warehouse, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Product/modified/{modified}/{page}/{count}"
            .replaceAll("\\{" + "modified" + "\\}", apiClient.escapeString(modified.toString()))
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (detailed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("detailed", detailed));
        if (inactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inactive", inactive));
        if (onweb != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onweb", onweb));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (warehouse != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("warehouse", warehouse));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGetModifiedValidateBeforeCall(OffsetDateTime modified, Integer page, Integer count, OffsetDateTime detailed, Boolean inactive, Boolean onweb, String group, String warehouse, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modified' is set
        if (modified == null) {
            throw new ApiException("Missing the required parameter 'modified' when calling productGetModified(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling productGetModified(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling productGetModified(Async)");
        }
        

        com.squareup.okhttp.Call call = productGetModifiedCall(modified, page, count, detailed, inactive, onweb, group, warehouse, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Modified Products
     * ## Use Instead  api/v1/Product/Page&#39; instead with ?modified&#x3D;\&quot;
     * @param modified Modified (required)
     * @param page Page Number (required)
     * @param count Product per Page (required)
     * @param detailed Detailed (optional)
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param include  (optional)
     * @return List&lt;DkCloudDataModelProductsProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public List<DkCloudDataModelProductsProductModel> productGetModified(OffsetDateTime modified, Integer page, Integer count, OffsetDateTime detailed, Boolean inactive, Boolean onweb, String group, String warehouse, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelProductsProductModel>> resp = productGetModifiedWithHttpInfo(modified, page, count, detailed, inactive, onweb, group, warehouse, include);
        return resp.getData();
    }

    /**
     * Get Modified Products
     * ## Use Instead  api/v1/Product/Page&#39; instead with ?modified&#x3D;\&quot;
     * @param modified Modified (required)
     * @param page Page Number (required)
     * @param count Product per Page (required)
     * @param detailed Detailed (optional)
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param include  (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProductsProductModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<DkCloudDataModelProductsProductModel>> productGetModifiedWithHttpInfo(OffsetDateTime modified, Integer page, Integer count, OffsetDateTime detailed, Boolean inactive, Boolean onweb, String group, String warehouse, String include) throws ApiException {
        com.squareup.okhttp.Call call = productGetModifiedValidateBeforeCall(modified, page, count, detailed, inactive, onweb, group, warehouse, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsProductModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Modified Products (asynchronously)
     * ## Use Instead  api/v1/Product/Page&#39; instead with ?modified&#x3D;\&quot;
     * @param modified Modified (required)
     * @param page Page Number (required)
     * @param count Product per Page (required)
     * @param detailed Detailed (optional)
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param include  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call productGetModifiedAsync(OffsetDateTime modified, Integer page, Integer count, OffsetDateTime detailed, Boolean inactive, Boolean onweb, String group, String warehouse, String include, final ApiCallback<List<DkCloudDataModelProductsProductModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGetModifiedValidateBeforeCall(modified, page, count, detailed, inactive, onweb, group, warehouse, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsProductModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productGetProductAttachment
     * @param itemcode Item Code (required)
     * @param id Attachment Id (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productGetProductAttachmentCall(String itemcode, Integer id, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/{itemcode}/attachment/{id}"
            .replaceAll("\\{" + "itemcode" + "\\}", apiClient.escapeString(itemcode.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isBase64 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isBase64", isBase64));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGetProductAttachmentValidateBeforeCall(String itemcode, Integer id, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemcode' is set
        if (itemcode == null) {
            throw new ApiException("Missing the required parameter 'itemcode' when calling productGetProductAttachment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productGetProductAttachment(Async)");
        }
        

        com.squareup.okhttp.Call call = productGetProductAttachmentCall(itemcode, id, isBase64, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Product Attachment
     * 
     * @param itemcode Item Code (required)
     * @param id Attachment Id (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object productGetProductAttachment(String itemcode, Integer id, Boolean isBase64) throws ApiException {
        ApiResponse<Object> resp = productGetProductAttachmentWithHttpInfo(itemcode, id, isBase64);
        return resp.getData();
    }

    /**
     * Get Product Attachment
     * 
     * @param itemcode Item Code (required)
     * @param id Attachment Id (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> productGetProductAttachmentWithHttpInfo(String itemcode, Integer id, Boolean isBase64) throws ApiException {
        com.squareup.okhttp.Call call = productGetProductAttachmentValidateBeforeCall(itemcode, id, isBase64, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Product Attachment (asynchronously)
     * 
     * @param itemcode Item Code (required)
     * @param id Attachment Id (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productGetProductAttachmentAsync(String itemcode, Integer id, Boolean isBase64, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGetProductAttachmentValidateBeforeCall(itemcode, id, isBase64, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productGetProductBarCodes
     * @param id Item Code (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productGetProductBarCodesCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/{id}/barcode"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGetProductBarCodesValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productGetProductBarCodes(Async)");
        }
        

        com.squareup.okhttp.Call call = productGetProductBarCodesCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Product Barcodes
     * 
     * @param id Item Code (required)
     * @return List&lt;DkCloudDataModelProductsBarcodesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProductsBarcodesModel> productGetProductBarCodes(String id) throws ApiException {
        ApiResponse<List<DkCloudDataModelProductsBarcodesModel>> resp = productGetProductBarCodesWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Product Barcodes
     * 
     * @param id Item Code (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProductsBarcodesModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProductsBarcodesModel>> productGetProductBarCodesWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = productGetProductBarCodesValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsBarcodesModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Product Barcodes (asynchronously)
     * 
     * @param id Item Code (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productGetProductBarCodesAsync(String id, final ApiCallback<List<DkCloudDataModelProductsBarcodesModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGetProductBarCodesValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsBarcodesModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productGetProductBarcode
     * @param id Item Code (required)
     * @param barcode Barcode (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productGetProductBarcodeCall(String id, String barcode, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/{id}/barcode/{barcode}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "barcode" + "\\}", apiClient.escapeString(barcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isBase64 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isBase64", isBase64));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGetProductBarcodeValidateBeforeCall(String id, String barcode, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productGetProductBarcode(Async)");
        }
        
        // verify the required parameter 'barcode' is set
        if (barcode == null) {
            throw new ApiException("Missing the required parameter 'barcode' when calling productGetProductBarcode(Async)");
        }
        

        com.squareup.okhttp.Call call = productGetProductBarcodeCall(id, barcode, isBase64, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Barcode for Product
     * 
     * @param id Item Code (required)
     * @param barcode Barcode (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @return DkCloudDataModelProductsBarcodesModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelProductsBarcodesModel productGetProductBarcode(String id, String barcode, Boolean isBase64) throws ApiException {
        ApiResponse<DkCloudDataModelProductsBarcodesModel> resp = productGetProductBarcodeWithHttpInfo(id, barcode, isBase64);
        return resp.getData();
    }

    /**
     * Get Barcode for Product
     * 
     * @param id Item Code (required)
     * @param barcode Barcode (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @return ApiResponse&lt;DkCloudDataModelProductsBarcodesModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelProductsBarcodesModel> productGetProductBarcodeWithHttpInfo(String id, String barcode, Boolean isBase64) throws ApiException {
        com.squareup.okhttp.Call call = productGetProductBarcodeValidateBeforeCall(id, barcode, isBase64, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProductsBarcodesModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Barcode for Product (asynchronously)
     * 
     * @param id Item Code (required)
     * @param barcode Barcode (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productGetProductBarcodeAsync(String id, String barcode, Boolean isBase64, final ApiCallback<DkCloudDataModelProductsBarcodesModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGetProductBarcodeValidateBeforeCall(id, barcode, isBase64, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProductsBarcodesModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productGetProductById
     * @param id Item Code (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productGetProductByIdCall(String id, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Product/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isBase64 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isBase64", isBase64));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGetProductByIdValidateBeforeCall(String id, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productGetProductById(Async)");
        }
        

        com.squareup.okhttp.Call call = productGetProductByIdCall(id, isBase64, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get product
     * 
     * @param id Item Code (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @return DkCloudDataModelProductsProductModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelProductsProductModel productGetProductById(String id, Boolean isBase64) throws ApiException {
        ApiResponse<DkCloudDataModelProductsProductModel> resp = productGetProductByIdWithHttpInfo(id, isBase64);
        return resp.getData();
    }

    /**
     * Get product
     * 
     * @param id Item Code (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @return ApiResponse&lt;DkCloudDataModelProductsProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelProductsProductModel> productGetProductByIdWithHttpInfo(String id, Boolean isBase64) throws ApiException {
        com.squareup.okhttp.Call call = productGetProductByIdValidateBeforeCall(id, isBase64, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProductsProductModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get product (asynchronously)
     * 
     * @param id Item Code (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productGetProductByIdAsync(String id, Boolean isBase64, final ApiCallback<DkCloudDataModelProductsProductModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGetProductByIdValidateBeforeCall(id, isBase64, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProductsProductModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productGetProductCount
     * @param inactive  (optional)
     * @param onweb  (optional)
     * @param group  (optional)
     * @param warehouse  (optional)
     * @param modified  (optional)
     * @param modifiedBefore  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productGetProductCountCall(Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Product/info/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inactive", inactive));
        if (onweb != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onweb", onweb));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (warehouse != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("warehouse", warehouse));
        if (modified != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modified", modified));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGetProductCountValidateBeforeCall(Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = productGetProductCountCall(inactive, onweb, group, warehouse, modified, modifiedBefore, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Product count based on criteria
     * 
     * @param inactive  (optional)
     * @param onweb  (optional)
     * @param group  (optional)
     * @param warehouse  (optional)
     * @param modified  (optional)
     * @param modifiedBefore  (optional)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Long productGetProductCount(Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore) throws ApiException {
        ApiResponse<Long> resp = productGetProductCountWithHttpInfo(inactive, onweb, group, warehouse, modified, modifiedBefore);
        return resp.getData();
    }

    /**
     * Get Product count based on criteria
     * 
     * @param inactive  (optional)
     * @param onweb  (optional)
     * @param group  (optional)
     * @param warehouse  (optional)
     * @param modified  (optional)
     * @param modifiedBefore  (optional)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Long> productGetProductCountWithHttpInfo(Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore) throws ApiException {
        com.squareup.okhttp.Call call = productGetProductCountValidateBeforeCall(inactive, onweb, group, warehouse, modified, modifiedBefore, null, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Product count based on criteria (asynchronously)
     * 
     * @param inactive  (optional)
     * @param onweb  (optional)
     * @param group  (optional)
     * @param warehouse  (optional)
     * @param modified  (optional)
     * @param modifiedBefore  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productGetProductCountAsync(Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, final ApiCallback<Long> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGetProductCountValidateBeforeCall(inactive, onweb, group, warehouse, modified, modifiedBefore, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productGetProductSearch
     * @param value Search string (required)
     * @param max Maximum result (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productGetProductSearchCall(String value, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Product/search/{value}/{max}"
            .replaceAll("\\{" + "value" + "\\}", apiClient.escapeString(value.toString()))
            .replaceAll("\\{" + "max" + "\\}", apiClient.escapeString(max.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGetProductSearchValidateBeforeCall(String value, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling productGetProductSearch(Async)");
        }
        
        // verify the required parameter 'max' is set
        if (max == null) {
            throw new ApiException("Missing the required parameter 'max' when calling productGetProductSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = productGetProductSearchCall(value, max, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search for Product
     * 
     * @param value Search string (required)
     * @param max Maximum result (required)
     * @return List&lt;DkCloudDataModelProductsProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProductsProductModel> productGetProductSearch(String value, Integer max) throws ApiException {
        ApiResponse<List<DkCloudDataModelProductsProductModel>> resp = productGetProductSearchWithHttpInfo(value, max);
        return resp.getData();
    }

    /**
     * Search for Product
     * 
     * @param value Search string (required)
     * @param max Maximum result (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProductsProductModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProductsProductModel>> productGetProductSearchWithHttpInfo(String value, Integer max) throws ApiException {
        com.squareup.okhttp.Call call = productGetProductSearchValidateBeforeCall(value, max, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsProductModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search for Product (asynchronously)
     * 
     * @param value Search string (required)
     * @param max Maximum result (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productGetProductSearchAsync(String value, Integer max, final ApiCallback<List<DkCloudDataModelProductsProductModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGetProductSearchValidateBeforeCall(value, max, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsProductModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productGetProductTransactions
     * @param id Item Code (required)
     * @param page Page Number (required)
     * @param count Products per Page (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productGetProductTransactionsCall(String id, Integer page, Integer count, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/{id}/transaction/{page}/{count}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isBase64 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isBase64", isBase64));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGetProductTransactionsValidateBeforeCall(String id, Integer page, Integer count, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling productGetProductTransactions(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling productGetProductTransactions(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling productGetProductTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = productGetProductTransactionsCall(id, page, count, isBase64, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Product Transactions
     * 
     * @param id Item Code (required)
     * @param page Page Number (required)
     * @param count Products per Page (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @return List&lt;DkCloudDataModelProductsTransactionsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProductsTransactionsModel> productGetProductTransactions(String id, Integer page, Integer count, Boolean isBase64) throws ApiException {
        ApiResponse<List<DkCloudDataModelProductsTransactionsModel>> resp = productGetProductTransactionsWithHttpInfo(id, page, count, isBase64);
        return resp.getData();
    }

    /**
     * Get Product Transactions
     * 
     * @param id Item Code (required)
     * @param page Page Number (required)
     * @param count Products per Page (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProductsTransactionsModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProductsTransactionsModel>> productGetProductTransactionsWithHttpInfo(String id, Integer page, Integer count, Boolean isBase64) throws ApiException {
        com.squareup.okhttp.Call call = productGetProductTransactionsValidateBeforeCall(id, page, count, isBase64, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsTransactionsModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Product Transactions (asynchronously)
     * 
     * @param id Item Code (required)
     * @param page Page Number (required)
     * @param count Products per Page (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productGetProductTransactionsAsync(String id, Integer page, Integer count, Boolean isBase64, final ApiCallback<List<DkCloudDataModelProductsTransactionsModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGetProductTransactionsValidateBeforeCall(id, page, count, isBase64, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsTransactionsModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productGetProducts
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param modified Modified after (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param include Fields to include (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productGetProductsCall(Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Product";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inactive", inactive));
        if (onweb != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onweb", onweb));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (warehouse != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("warehouse", warehouse));
        if (modified != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modified", modified));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGetProductsValidateBeforeCall(Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = productGetProductsCall(inactive, onweb, group, warehouse, modified, modifiedBefore, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Products
     * 
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param modified Modified after (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param include Fields to include (optional)
     * @return List&lt;DkCloudDataModelProductsProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProductsProductModel> productGetProducts(Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelProductsProductModel>> resp = productGetProductsWithHttpInfo(inactive, onweb, group, warehouse, modified, modifiedBefore, include);
        return resp.getData();
    }

    /**
     * Get Products
     * 
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param modified Modified after (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param include Fields to include (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProductsProductModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProductsProductModel>> productGetProductsWithHttpInfo(Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, String include) throws ApiException {
        com.squareup.okhttp.Call call = productGetProductsValidateBeforeCall(inactive, onweb, group, warehouse, modified, modifiedBefore, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsProductModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Products (asynchronously)
     * 
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param modified Modified after (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param include Fields to include (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productGetProductsAsync(Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, String include, final ApiCallback<List<DkCloudDataModelProductsProductModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGetProductsValidateBeforeCall(inactive, onweb, group, warehouse, modified, modifiedBefore, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsProductModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productGetProductsPage
     * @param page Page Numer (required)
     * @param count Products per Page (required)
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param modified Modified after (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param deleted Product Deleted (optional)
     * @param include Fields to include (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productGetProductsPageCall(Integer page, Integer count, Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, Boolean deleted, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/Product/page/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inactive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inactive", inactive));
        if (onweb != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("onweb", onweb));
        if (group != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group", group));
        if (warehouse != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("warehouse", warehouse));
        if (modified != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modified", modified));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (deleted != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deleted", deleted));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGetProductsPageValidateBeforeCall(Integer page, Integer count, Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, Boolean deleted, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling productGetProductsPage(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling productGetProductsPage(Async)");
        }
        

        com.squareup.okhttp.Call call = productGetProductsPageCall(page, count, inactive, onweb, group, warehouse, modified, modifiedBefore, deleted, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Products Paged
     * 
     * @param page Page Numer (required)
     * @param count Products per Page (required)
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param modified Modified after (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param deleted Product Deleted (optional)
     * @param include Fields to include (optional)
     * @return List&lt;DkCloudDataModelProductsProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProductsProductModel> productGetProductsPage(Integer page, Integer count, Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, Boolean deleted, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelProductsProductModel>> resp = productGetProductsPageWithHttpInfo(page, count, inactive, onweb, group, warehouse, modified, modifiedBefore, deleted, include);
        return resp.getData();
    }

    /**
     * Get Products Paged
     * 
     * @param page Page Numer (required)
     * @param count Products per Page (required)
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param modified Modified after (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param deleted Product Deleted (optional)
     * @param include Fields to include (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProductsProductModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProductsProductModel>> productGetProductsPageWithHttpInfo(Integer page, Integer count, Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, Boolean deleted, String include) throws ApiException {
        com.squareup.okhttp.Call call = productGetProductsPageValidateBeforeCall(page, count, inactive, onweb, group, warehouse, modified, modifiedBefore, deleted, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsProductModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Products Paged (asynchronously)
     * 
     * @param page Page Numer (required)
     * @param count Products per Page (required)
     * @param inactive Inactive (optional)
     * @param onweb Show on web (optional)
     * @param group Group (optional)
     * @param warehouse Warehouse (optional)
     * @param modified Modified after (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param deleted Product Deleted (optional)
     * @param include Fields to include (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productGetProductsPageAsync(Integer page, Integer count, Boolean inactive, Boolean onweb, String group, String warehouse, OffsetDateTime modified, OffsetDateTime modifiedBefore, Boolean deleted, String include, final ApiCallback<List<DkCloudDataModelProductsProductModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGetProductsPageValidateBeforeCall(page, count, inactive, onweb, group, warehouse, modified, modifiedBefore, deleted, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsProductModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productGroupGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productGroupGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/productgroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productGroupGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = productGroupGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Product Groups
     * 
     * @return List&lt;DkCloudDataModelProductsProductGroupModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProductsProductGroupModel> productGroupGet() throws ApiException {
        ApiResponse<List<DkCloudDataModelProductsProductGroupModel>> resp = productGroupGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get Product Groups
     * 
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProductsProductGroupModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProductsProductGroupModel>> productGroupGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = productGroupGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsProductGroupModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Product Groups (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productGroupGetAsync(final ApiCallback<List<DkCloudDataModelProductsProductGroupModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productGroupGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsProductGroupModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productTransactionGetInventoryTransactionsPage
     * @param page Page Number (required)
     * @param count Objects to return (required)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dim1 Dimmention (optional)
     * @param itemcode Item Code (optional)
     * @param warehouse Wharehouse (optional)
     * @param currency Currency Code (optional)
     * @param reference Reference (optional)
     * @param include Fields to include (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productTransactionGetInventoryTransactionsPageCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String dim1, String itemcode, String warehouse, String currency, String reference, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/product/transaction/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (itemcode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("itemcode", itemcode));
        if (warehouse != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("warehouse", warehouse));
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Currency", currency));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productTransactionGetInventoryTransactionsPageValidateBeforeCall(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String dim1, String itemcode, String warehouse, String currency, String reference, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling productTransactionGetInventoryTransactionsPage(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling productTransactionGetInventoryTransactionsPage(Async)");
        }
        

        com.squareup.okhttp.Call call = productTransactionGetInventoryTransactionsPageCall(page, count, modifiedAfter, modifiedBefore, createdAfter, createdBefore, dim1, itemcode, warehouse, currency, reference, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param page Page Number (required)
     * @param count Objects to return (required)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dim1 Dimmention (optional)
     * @param itemcode Item Code (optional)
     * @param warehouse Wharehouse (optional)
     * @param currency Currency Code (optional)
     * @param reference Reference (optional)
     * @param include Fields to include (optional)
     * @return List&lt;DkCloudDataModelProductsTransactionsModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProductsTransactionsModel> productTransactionGetInventoryTransactionsPage(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String dim1, String itemcode, String warehouse, String currency, String reference, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelProductsTransactionsModel>> resp = productTransactionGetInventoryTransactionsPageWithHttpInfo(page, count, modifiedAfter, modifiedBefore, createdAfter, createdBefore, dim1, itemcode, warehouse, currency, reference, include);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param page Page Number (required)
     * @param count Objects to return (required)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dim1 Dimmention (optional)
     * @param itemcode Item Code (optional)
     * @param warehouse Wharehouse (optional)
     * @param currency Currency Code (optional)
     * @param reference Reference (optional)
     * @param include Fields to include (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProductsTransactionsModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProductsTransactionsModel>> productTransactionGetInventoryTransactionsPageWithHttpInfo(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String dim1, String itemcode, String warehouse, String currency, String reference, String include) throws ApiException {
        com.squareup.okhttp.Call call = productTransactionGetInventoryTransactionsPageValidateBeforeCall(page, count, modifiedAfter, modifiedBefore, createdAfter, createdBefore, dim1, itemcode, warehouse, currency, reference, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsTransactionsModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param page Page Number (required)
     * @param count Objects to return (required)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dim1 Dimmention (optional)
     * @param itemcode Item Code (optional)
     * @param warehouse Wharehouse (optional)
     * @param currency Currency Code (optional)
     * @param reference Reference (optional)
     * @param include Fields to include (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productTransactionGetInventoryTransactionsPageAsync(Integer page, Integer count, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime createdAfter, OffsetDateTime createdBefore, String dim1, String itemcode, String warehouse, String currency, String reference, String include, final ApiCallback<List<DkCloudDataModelProductsTransactionsModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productTransactionGetInventoryTransactionsPageValidateBeforeCall(page, count, modifiedAfter, modifiedBefore, createdAfter, createdBefore, dim1, itemcode, warehouse, currency, reference, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProductsTransactionsModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for productUpdateProduct
     * @param itemcode Item Code (required)
     * @param value Product Update Model (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call productUpdateProductCall(String itemcode, DkCloudDataModelProductsProductModel value, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/api/v1/product/{itemcode}"
            .replaceAll("\\{" + "itemcode" + "\\}", apiClient.escapeString(itemcode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isBase64 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isBase64", isBase64));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call productUpdateProductValidateBeforeCall(String itemcode, DkCloudDataModelProductsProductModel value, Boolean isBase64, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'itemcode' is set
        if (itemcode == null) {
            throw new ApiException("Missing the required parameter 'itemcode' when calling productUpdateProduct(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling productUpdateProduct(Async)");
        }
        

        com.squareup.okhttp.Call call = productUpdateProductCall(itemcode, value, isBase64, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Product
     * 
     * @param itemcode Item Code (required)
     * @param value Product Update Model (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @return DkCloudDataModelProductsProductModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelProductsProductModel productUpdateProduct(String itemcode, DkCloudDataModelProductsProductModel value, Boolean isBase64) throws ApiException {
        ApiResponse<DkCloudDataModelProductsProductModel> resp = productUpdateProductWithHttpInfo(itemcode, value, isBase64);
        return resp.getData();
    }

    /**
     * Update Product
     * 
     * @param itemcode Item Code (required)
     * @param value Product Update Model (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @return ApiResponse&lt;DkCloudDataModelProductsProductModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelProductsProductModel> productUpdateProductWithHttpInfo(String itemcode, DkCloudDataModelProductsProductModel value, Boolean isBase64) throws ApiException {
        com.squareup.okhttp.Call call = productUpdateProductValidateBeforeCall(itemcode, value, isBase64, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProductsProductModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Product (asynchronously)
     * 
     * @param itemcode Item Code (required)
     * @param value Product Update Model (required)
     * @param isBase64 Is Base64 Encoded (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call productUpdateProductAsync(String itemcode, DkCloudDataModelProductsProductModel value, Boolean isBase64, final ApiCallback<DkCloudDataModelProductsProductModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = productUpdateProductValidateBeforeCall(itemcode, value, isBase64, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelProductsProductModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
