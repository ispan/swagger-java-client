/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkPlusAPIModelsSearchResultModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient apiClient;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for searchGetSearchExtendedResult
     * @param value  (required)
     * @param customer Search Customers (optional)
     * @param product Search products (optional)
     * @param vendor Search Vendors (optional)
     * @param defaultOp Default Serach operator (optional)
     * @param max Maximum result per module (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchGetSearchExtendedResultCall(String value, Boolean customer, Boolean product, Boolean vendor, String defaultOp, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (value != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("value", value));
        if (customer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customer", customer));
        if (product != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("product", product));
        if (vendor != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vendor", vendor));
        if (defaultOp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("defaultOp", defaultOp));
        if (max != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("max", max));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchGetSearchExtendedResultValidateBeforeCall(String value, Boolean customer, Boolean product, Boolean vendor, String defaultOp, Integer max, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling searchGetSearchExtendedResult(Async)");
        }
        

        com.squareup.okhttp.Call call = searchGetSearchExtendedResultCall(value, customer, product, vendor, defaultOp, max, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Search Module for result
     * ### Search Filer Operators  * **+** signifies AND operation  * **|** signifies OR operation  * **-** negates a single token  * **\&quot;** wraps a number of tokens to signify a phrase for searching  * ***** at the end of a term signifies a prefix query  * **( and )** signify precedence  * **~N** after a word signifies edit distance (fuzziness)  * **~N** after a phrase signifies slop amount
     * @param value  (required)
     * @param customer Search Customers (optional)
     * @param product Search products (optional)
     * @param vendor Search Vendors (optional)
     * @param defaultOp Default Serach operator (optional)
     * @param max Maximum result per module (optional)
     * @return List&lt;DkPlusAPIModelsSearchResultModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkPlusAPIModelsSearchResultModel> searchGetSearchExtendedResult(String value, Boolean customer, Boolean product, Boolean vendor, String defaultOp, Integer max) throws ApiException {
        ApiResponse<List<DkPlusAPIModelsSearchResultModel>> resp = searchGetSearchExtendedResultWithHttpInfo(value, customer, product, vendor, defaultOp, max);
        return resp.getData();
    }

    /**
     * Search Module for result
     * ### Search Filer Operators  * **+** signifies AND operation  * **|** signifies OR operation  * **-** negates a single token  * **\&quot;** wraps a number of tokens to signify a phrase for searching  * ***** at the end of a term signifies a prefix query  * **( and )** signify precedence  * **~N** after a word signifies edit distance (fuzziness)  * **~N** after a phrase signifies slop amount
     * @param value  (required)
     * @param customer Search Customers (optional)
     * @param product Search products (optional)
     * @param vendor Search Vendors (optional)
     * @param defaultOp Default Serach operator (optional)
     * @param max Maximum result per module (optional)
     * @return ApiResponse&lt;List&lt;DkPlusAPIModelsSearchResultModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkPlusAPIModelsSearchResultModel>> searchGetSearchExtendedResultWithHttpInfo(String value, Boolean customer, Boolean product, Boolean vendor, String defaultOp, Integer max) throws ApiException {
        com.squareup.okhttp.Call call = searchGetSearchExtendedResultValidateBeforeCall(value, customer, product, vendor, defaultOp, max, null, null);
        Type localVarReturnType = new TypeToken<List<DkPlusAPIModelsSearchResultModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Module for result (asynchronously)
     * ### Search Filer Operators  * **+** signifies AND operation  * **|** signifies OR operation  * **-** negates a single token  * **\&quot;** wraps a number of tokens to signify a phrase for searching  * ***** at the end of a term signifies a prefix query  * **( and )** signify precedence  * **~N** after a word signifies edit distance (fuzziness)  * **~N** after a phrase signifies slop amount
     * @param value  (required)
     * @param customer Search Customers (optional)
     * @param product Search products (optional)
     * @param vendor Search Vendors (optional)
     * @param defaultOp Default Serach operator (optional)
     * @param max Maximum result per module (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchGetSearchExtendedResultAsync(String value, Boolean customer, Boolean product, Boolean vendor, String defaultOp, Integer max, final ApiCallback<List<DkPlusAPIModelsSearchResultModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchGetSearchExtendedResultValidateBeforeCall(value, customer, product, vendor, defaultOp, max, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkPlusAPIModelsSearchResultModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for searchGetSearchResult
     * @param value Seach string (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchGetSearchResultCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/search/{value}"
            .replaceAll("\\{" + "value" + "\\}", apiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchGetSearchResultValidateBeforeCall(String value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling searchGetSearchResult(Async)");
        }
        

        com.squareup.okhttp.Call call = searchGetSearchResultCall(value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deprecated search function  Use /api/v1/search?value&#x3D;{value}
     * 
     * @param value Seach string (required)
     * @return List&lt;DkPlusAPIModelsSearchResultModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public List<DkPlusAPIModelsSearchResultModel> searchGetSearchResult(String value) throws ApiException {
        ApiResponse<List<DkPlusAPIModelsSearchResultModel>> resp = searchGetSearchResultWithHttpInfo(value);
        return resp.getData();
    }

    /**
     * Deprecated search function  Use /api/v1/search?value&#x3D;{value}
     * 
     * @param value Seach string (required)
     * @return ApiResponse&lt;List&lt;DkPlusAPIModelsSearchResultModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @deprecated
     */
    @Deprecated
    public ApiResponse<List<DkPlusAPIModelsSearchResultModel>> searchGetSearchResultWithHttpInfo(String value) throws ApiException {
        com.squareup.okhttp.Call call = searchGetSearchResultValidateBeforeCall(value, null, null);
        Type localVarReturnType = new TypeToken<List<DkPlusAPIModelsSearchResultModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deprecated search function  Use /api/v1/search?value&#x3D;{value} (asynchronously)
     * 
     * @param value Seach string (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @deprecated
     */
    @Deprecated
    public com.squareup.okhttp.Call searchGetSearchResultAsync(String value, final ApiCallback<List<DkPlusAPIModelsSearchResultModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchGetSearchResultValidateBeforeCall(value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkPlusAPIModelsSearchResultModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
