/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkCloudDataModelSalesInvoiceModel;
import io.swagger.client.model.DkPlusAPIModelsInvoiceHead;
import io.swagger.client.model.DkPlusAPIModelsInvoicePaymentPlanCancel;
import io.swagger.client.model.DkPlusAPIModelsInvoicePaymentPlanCreate;
import io.swagger.client.model.DkPlusMailModelMailInfo;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InvoiceApi {
    private ApiClient apiClient;

    public InvoiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for invoiceCancelPaymentPlan
     * @param invoice Invoice Number (required)
     * @param number Payment Plan Id (required)
     * @param content Cancel Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceCancelPaymentPlanCall(String invoice, Integer number, DkPlusAPIModelsInvoicePaymentPlanCancel content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/{invoice}/paymentplan/{number}"
            .replaceAll("\\{" + "invoice" + "\\}", apiClient.escapeString(invoice.toString()))
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceCancelPaymentPlanValidateBeforeCall(String invoice, Integer number, DkPlusAPIModelsInvoicePaymentPlanCancel content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoice' is set
        if (invoice == null) {
            throw new ApiException("Missing the required parameter 'invoice' when calling invoiceCancelPaymentPlan(Async)");
        }
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling invoiceCancelPaymentPlan(Async)");
        }
        
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling invoiceCancelPaymentPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceCancelPaymentPlanCall(invoice, number, content, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Cancel a Payment Plan for Invoice
     * 
     * @param invoice Invoice Number (required)
     * @param number Payment Plan Id (required)
     * @param content Cancel Model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void invoiceCancelPaymentPlan(String invoice, Integer number, DkPlusAPIModelsInvoicePaymentPlanCancel content) throws ApiException {
        invoiceCancelPaymentPlanWithHttpInfo(invoice, number, content);
    }

    /**
     * Cancel a Payment Plan for Invoice
     * 
     * @param invoice Invoice Number (required)
     * @param number Payment Plan Id (required)
     * @param content Cancel Model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> invoiceCancelPaymentPlanWithHttpInfo(String invoice, Integer number, DkPlusAPIModelsInvoicePaymentPlanCancel content) throws ApiException {
        com.squareup.okhttp.Call call = invoiceCancelPaymentPlanValidateBeforeCall(invoice, number, content, null, null);
        return apiClient.execute(call);
    }

    /**
     * Cancel a Payment Plan for Invoice (asynchronously)
     * 
     * @param invoice Invoice Number (required)
     * @param number Payment Plan Id (required)
     * @param content Cancel Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceCancelPaymentPlanAsync(String invoice, Integer number, DkPlusAPIModelsInvoicePaymentPlanCancel content, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceCancelPaymentPlanValidateBeforeCall(invoice, number, content, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for invoiceCreateCreditInvoice
     * @param id invoice number (required)
     * @param post Book the invoice (optional)
     * @param date Reverse Invoice Date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceCreateCreditInvoiceCall(Integer id, Boolean post, OffsetDateTime date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/{id}/reverse"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (post != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("post", post));
        if (date != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("date", date));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceCreateCreditInvoiceValidateBeforeCall(Integer id, Boolean post, OffsetDateTime date, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling invoiceCreateCreditInvoice(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceCreateCreditInvoiceCall(id, post, date, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create credit invoice based on another invoice
     * 
     * @param id invoice number (required)
     * @param post Book the invoice (optional)
     * @param date Reverse Invoice Date (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void invoiceCreateCreditInvoice(Integer id, Boolean post, OffsetDateTime date) throws ApiException {
        invoiceCreateCreditInvoiceWithHttpInfo(id, post, date);
    }

    /**
     * Create credit invoice based on another invoice
     * 
     * @param id invoice number (required)
     * @param post Book the invoice (optional)
     * @param date Reverse Invoice Date (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> invoiceCreateCreditInvoiceWithHttpInfo(Integer id, Boolean post, OffsetDateTime date) throws ApiException {
        com.squareup.okhttp.Call call = invoiceCreateCreditInvoiceValidateBeforeCall(id, post, date, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create credit invoice based on another invoice (asynchronously)
     * 
     * @param id invoice number (required)
     * @param post Book the invoice (optional)
     * @param date Reverse Invoice Date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceCreateCreditInvoiceAsync(Integer id, Boolean post, OffsetDateTime date, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceCreateCreditInvoiceValidateBeforeCall(id, post, date, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for invoiceCreateInvoice
     * @param value Invoice Post Model (required)
     * @param post Post Invoice (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceCreateInvoiceCall(DkPlusAPIModelsInvoiceHead value, Boolean post, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (post != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("post", post));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceCreateInvoiceValidateBeforeCall(DkPlusAPIModelsInvoiceHead value, Boolean post, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling invoiceCreateInvoice(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceCreateInvoiceCall(value, post, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Sales Invoice
     * 
     * @param value Invoice Post Model (required)
     * @param post Post Invoice (optional)
     * @return DkCloudDataModelSalesInvoiceModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelSalesInvoiceModel invoiceCreateInvoice(DkPlusAPIModelsInvoiceHead value, Boolean post) throws ApiException {
        ApiResponse<DkCloudDataModelSalesInvoiceModel> resp = invoiceCreateInvoiceWithHttpInfo(value, post);
        return resp.getData();
    }

    /**
     * Create a Sales Invoice
     * 
     * @param value Invoice Post Model (required)
     * @param post Post Invoice (optional)
     * @return ApiResponse&lt;DkCloudDataModelSalesInvoiceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelSalesInvoiceModel> invoiceCreateInvoiceWithHttpInfo(DkPlusAPIModelsInvoiceHead value, Boolean post) throws ApiException {
        com.squareup.okhttp.Call call = invoiceCreateInvoiceValidateBeforeCall(value, post, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelSalesInvoiceModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Sales Invoice (asynchronously)
     * 
     * @param value Invoice Post Model (required)
     * @param post Post Invoice (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceCreateInvoiceAsync(DkPlusAPIModelsInvoiceHead value, Boolean post, final ApiCallback<DkCloudDataModelSalesInvoiceModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceCreateInvoiceValidateBeforeCall(value, post, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelSalesInvoiceModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for invoiceCreatePaymentPlan
     * @param number Invoice Number (required)
     * @param content Payment Plan Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceCreatePaymentPlanCall(String number, DkPlusAPIModelsInvoicePaymentPlanCreate content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/{number}/paymentplan"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceCreatePaymentPlanValidateBeforeCall(String number, DkPlusAPIModelsInvoicePaymentPlanCreate content, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling invoiceCreatePaymentPlan(Async)");
        }
        
        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling invoiceCreatePaymentPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceCreatePaymentPlanCall(number, content, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a payment plan for a invoice
     * 
     * @param number Invoice Number (required)
     * @param content Payment Plan Model (required)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer invoiceCreatePaymentPlan(String number, DkPlusAPIModelsInvoicePaymentPlanCreate content) throws ApiException {
        ApiResponse<Integer> resp = invoiceCreatePaymentPlanWithHttpInfo(number, content);
        return resp.getData();
    }

    /**
     * Create a payment plan for a invoice
     * 
     * @param number Invoice Number (required)
     * @param content Payment Plan Model (required)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> invoiceCreatePaymentPlanWithHttpInfo(String number, DkPlusAPIModelsInvoicePaymentPlanCreate content) throws ApiException {
        com.squareup.okhttp.Call call = invoiceCreatePaymentPlanValidateBeforeCall(number, content, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a payment plan for a invoice (asynchronously)
     * 
     * @param number Invoice Number (required)
     * @param content Payment Plan Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceCreatePaymentPlanAsync(String number, DkPlusAPIModelsInvoicePaymentPlanCreate content, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceCreatePaymentPlanValidateBeforeCall(number, content, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for invoiceDeleteInvoice
     * @param reference Reference Number (required)
     * @param warehouse Warehouse Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceDeleteInvoiceCall(String reference, String warehouse, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (warehouse != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("warehouse", warehouse));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceDeleteInvoiceValidateBeforeCall(String reference, String warehouse, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling invoiceDeleteInvoice(Async)");
        }
        
        // verify the required parameter 'warehouse' is set
        if (warehouse == null) {
            throw new ApiException("Missing the required parameter 'warehouse' when calling invoiceDeleteInvoice(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceDeleteInvoiceCall(reference, warehouse, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Use to delete invoices
     * 
     * @param reference Reference Number (required)
     * @param warehouse Warehouse Id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void invoiceDeleteInvoice(String reference, String warehouse) throws ApiException {
        invoiceDeleteInvoiceWithHttpInfo(reference, warehouse);
    }

    /**
     * Use to delete invoices
     * 
     * @param reference Reference Number (required)
     * @param warehouse Warehouse Id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> invoiceDeleteInvoiceWithHttpInfo(String reference, String warehouse) throws ApiException {
        com.squareup.okhttp.Call call = invoiceDeleteInvoiceValidateBeforeCall(reference, warehouse, null, null);
        return apiClient.execute(call);
    }

    /**
     * Use to delete invoices (asynchronously)
     * 
     * @param reference Reference Number (required)
     * @param warehouse Warehouse Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceDeleteInvoiceAsync(String reference, String warehouse, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceDeleteInvoiceValidateBeforeCall(reference, warehouse, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for invoiceGet
     * @param number Invoice Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceGetCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceGetValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling invoiceGet(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceGetCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a Sales Invoice
     * 
     * @param number Invoice Number (required)
     * @return DkCloudDataModelSalesInvoiceModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelSalesInvoiceModel invoiceGet(String number) throws ApiException {
        ApiResponse<DkCloudDataModelSalesInvoiceModel> resp = invoiceGetWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get a Sales Invoice
     * 
     * @param number Invoice Number (required)
     * @return ApiResponse&lt;DkCloudDataModelSalesInvoiceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelSalesInvoiceModel> invoiceGetWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = invoiceGetValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelSalesInvoiceModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a Sales Invoice (asynchronously)
     * 
     * @param number Invoice Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceGetAsync(String number, final ApiCallback<DkCloudDataModelSalesInvoiceModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceGetValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelSalesInvoiceModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for invoiceGetByDate
     * @param invoicedate Invoice Date (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceGetByDateCall(OffsetDateTime invoicedate, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/date/{invoicedate}/{page}/{count}"
            .replaceAll("\\{" + "invoicedate" + "\\}", apiClient.escapeString(invoicedate.toString()))
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceGetByDateValidateBeforeCall(OffsetDateTime invoicedate, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'invoicedate' is set
        if (invoicedate == null) {
            throw new ApiException("Missing the required parameter 'invoicedate' when calling invoiceGetByDate(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling invoiceGetByDate(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling invoiceGetByDate(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceGetByDateCall(invoicedate, page, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Invoices by Date
     * 
     * @param invoicedate Invoice Date (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @return List&lt;DkCloudDataModelSalesInvoiceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelSalesInvoiceModel> invoiceGetByDate(OffsetDateTime invoicedate, Integer page, Integer count) throws ApiException {
        ApiResponse<List<DkCloudDataModelSalesInvoiceModel>> resp = invoiceGetByDateWithHttpInfo(invoicedate, page, count);
        return resp.getData();
    }

    /**
     * Get Invoices by Date
     * 
     * @param invoicedate Invoice Date (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelSalesInvoiceModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelSalesInvoiceModel>> invoiceGetByDateWithHttpInfo(OffsetDateTime invoicedate, Integer page, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = invoiceGetByDateValidateBeforeCall(invoicedate, page, count, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesInvoiceModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Invoices by Date (asynchronously)
     * 
     * @param invoicedate Invoice Date (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceGetByDateAsync(OffsetDateTime invoicedate, Integer page, Integer count, final ApiCallback<List<DkCloudDataModelSalesInvoiceModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceGetByDateValidateBeforeCall(invoicedate, page, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesInvoiceModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for invoiceGetDiscounts
     * @param value Invoce Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceGetDiscountsCall(DkPlusAPIModelsInvoiceHead value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/calculate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceGetDiscountsValidateBeforeCall(DkPlusAPIModelsInvoiceHead value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling invoiceGetDiscounts(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceGetDiscountsCall(value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * This method returnes prices as if DK calculated based on product,customer and based on discount groups
     * 
     * @param value Invoce Model (required)
     * @return DkCloudDataModelSalesInvoiceModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelSalesInvoiceModel invoiceGetDiscounts(DkPlusAPIModelsInvoiceHead value) throws ApiException {
        ApiResponse<DkCloudDataModelSalesInvoiceModel> resp = invoiceGetDiscountsWithHttpInfo(value);
        return resp.getData();
    }

    /**
     * This method returnes prices as if DK calculated based on product,customer and based on discount groups
     * 
     * @param value Invoce Model (required)
     * @return ApiResponse&lt;DkCloudDataModelSalesInvoiceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelSalesInvoiceModel> invoiceGetDiscountsWithHttpInfo(DkPlusAPIModelsInvoiceHead value) throws ApiException {
        com.squareup.okhttp.Call call = invoiceGetDiscountsValidateBeforeCall(value, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelSalesInvoiceModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * This method returnes prices as if DK calculated based on product,customer and based on discount groups (asynchronously)
     * 
     * @param value Invoce Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceGetDiscountsAsync(DkPlusAPIModelsInvoiceHead value, final ApiCallback<DkCloudDataModelSalesInvoiceModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceGetDiscountsValidateBeforeCall(value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelSalesInvoiceModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for invoiceGetHtml
     * @param number  (required)
     * @param custom Use a predefined invoice look (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceGetHtmlCall(String number, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/{number}/html"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (custom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("custom", custom));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceGetHtmlValidateBeforeCall(String number, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling invoiceGetHtml(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceGetHtmlCall(number, custom, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get a HTML generated from the Invoice
     * 
     * @param number  (required)
     * @param custom Use a predefined invoice look (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String invoiceGetHtml(String number, String custom) throws ApiException {
        ApiResponse<String> resp = invoiceGetHtmlWithHttpInfo(number, custom);
        return resp.getData();
    }

    /**
     * Get a HTML generated from the Invoice
     * 
     * @param number  (required)
     * @param custom Use a predefined invoice look (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> invoiceGetHtmlWithHttpInfo(String number, String custom) throws ApiException {
        com.squareup.okhttp.Call call = invoiceGetHtmlValidateBeforeCall(number, custom, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a HTML generated from the Invoice (asynchronously)
     * 
     * @param number  (required)
     * @param custom Use a predefined invoice look (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceGetHtmlAsync(String number, String custom, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceGetHtmlValidateBeforeCall(number, custom, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for invoiceGetPDF
     * @param number  (required)
     * @param custom  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceGetPDFCall(String number, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/{number}/pdf"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (custom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("custom", custom));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceGetPDFValidateBeforeCall(String number, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling invoiceGetPDF(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceGetPDFCall(number, custom, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get PDF version of a invoice
     * 
     * @param number  (required)
     * @param custom  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object invoiceGetPDF(String number, String custom) throws ApiException {
        ApiResponse<Object> resp = invoiceGetPDFWithHttpInfo(number, custom);
        return resp.getData();
    }

    /**
     * Get PDF version of a invoice
     * 
     * @param number  (required)
     * @param custom  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> invoiceGetPDFWithHttpInfo(String number, String custom) throws ApiException {
        com.squareup.okhttp.Call call = invoiceGetPDFValidateBeforeCall(number, custom, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get PDF version of a invoice (asynchronously)
     * 
     * @param number  (required)
     * @param custom  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceGetPDFAsync(String number, String custom, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceGetPDFValidateBeforeCall(number, custom, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for invoiceGetPage
     * @param page Page Number (default&#x3D;0) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @param includeLines Include Sale Lines with Invoice (optional)
     * @param createdAfter Date on the format YYYY-MM-DD (optional)
     * @param createdBefore Date on the format YYYY-MM-DD (optional)
     * @param dueAfter  (optional)
     * @param salesPerson Sales person number (optional)
     * @param reference Reference Number (optional)
     * @param recordid Record Id After (optional)
     * @param customer Customer Number (optional)
     * @param project Project Number (optional)
     * @param include Fields to include (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceGetPageCall(Integer page, Integer count, Boolean includeLines, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String salesPerson, String reference, Integer recordid, String customer, String project, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/page/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeLines != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("includeLines", includeLines));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (dueAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dueAfter", dueAfter));
        if (salesPerson != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("salesPerson", salesPerson));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (recordid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recordid", recordid));
        if (customer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("customer", customer));
        if (project != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("project", project));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceGetPageValidateBeforeCall(Integer page, Integer count, Boolean includeLines, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String salesPerson, String reference, Integer recordid, String customer, String project, String include, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling invoiceGetPage(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling invoiceGetPage(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceGetPageCall(page, count, includeLines, createdAfter, createdBefore, dueAfter, salesPerson, reference, recordid, customer, project, include, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Sale Invoices
     * 
     * @param page Page Number (default&#x3D;0) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @param includeLines Include Sale Lines with Invoice (optional)
     * @param createdAfter Date on the format YYYY-MM-DD (optional)
     * @param createdBefore Date on the format YYYY-MM-DD (optional)
     * @param dueAfter  (optional)
     * @param salesPerson Sales person number (optional)
     * @param reference Reference Number (optional)
     * @param recordid Record Id After (optional)
     * @param customer Customer Number (optional)
     * @param project Project Number (optional)
     * @param include Fields to include (optional)
     * @return List&lt;DkCloudDataModelSalesInvoiceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelSalesInvoiceModel> invoiceGetPage(Integer page, Integer count, Boolean includeLines, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String salesPerson, String reference, Integer recordid, String customer, String project, String include) throws ApiException {
        ApiResponse<List<DkCloudDataModelSalesInvoiceModel>> resp = invoiceGetPageWithHttpInfo(page, count, includeLines, createdAfter, createdBefore, dueAfter, salesPerson, reference, recordid, customer, project, include);
        return resp.getData();
    }

    /**
     * Get Sale Invoices
     * 
     * @param page Page Number (default&#x3D;0) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @param includeLines Include Sale Lines with Invoice (optional)
     * @param createdAfter Date on the format YYYY-MM-DD (optional)
     * @param createdBefore Date on the format YYYY-MM-DD (optional)
     * @param dueAfter  (optional)
     * @param salesPerson Sales person number (optional)
     * @param reference Reference Number (optional)
     * @param recordid Record Id After (optional)
     * @param customer Customer Number (optional)
     * @param project Project Number (optional)
     * @param include Fields to include (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelSalesInvoiceModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelSalesInvoiceModel>> invoiceGetPageWithHttpInfo(Integer page, Integer count, Boolean includeLines, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String salesPerson, String reference, Integer recordid, String customer, String project, String include) throws ApiException {
        com.squareup.okhttp.Call call = invoiceGetPageValidateBeforeCall(page, count, includeLines, createdAfter, createdBefore, dueAfter, salesPerson, reference, recordid, customer, project, include, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesInvoiceModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Sale Invoices (asynchronously)
     * 
     * @param page Page Number (default&#x3D;0) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @param includeLines Include Sale Lines with Invoice (optional)
     * @param createdAfter Date on the format YYYY-MM-DD (optional)
     * @param createdBefore Date on the format YYYY-MM-DD (optional)
     * @param dueAfter  (optional)
     * @param salesPerson Sales person number (optional)
     * @param reference Reference Number (optional)
     * @param recordid Record Id After (optional)
     * @param customer Customer Number (optional)
     * @param project Project Number (optional)
     * @param include Fields to include (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceGetPageAsync(Integer page, Integer count, Boolean includeLines, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String salesPerson, String reference, Integer recordid, String customer, String project, String include, final ApiCallback<List<DkCloudDataModelSalesInvoiceModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceGetPageValidateBeforeCall(page, count, includeLines, createdAfter, createdBefore, dueAfter, salesPerson, reference, recordid, customer, project, include, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesInvoiceModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for invoiceGetReference
     * @param reference Reference Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @param type Invoice type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceGetReferenceCall(String reference, Integer page, Integer count, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/reference/{reference}/{page}/{count}"
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()))
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("type", type));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceGetReferenceValidateBeforeCall(String reference, Integer page, Integer count, String type, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling invoiceGetReference(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling invoiceGetReference(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling invoiceGetReference(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceGetReferenceCall(reference, page, count, type, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Invoice by Reference Number
     * 
     * @param reference Reference Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @param type Invoice type (optional)
     * @return List&lt;DkCloudDataModelSalesInvoiceModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelSalesInvoiceModel> invoiceGetReference(String reference, Integer page, Integer count, String type) throws ApiException {
        ApiResponse<List<DkCloudDataModelSalesInvoiceModel>> resp = invoiceGetReferenceWithHttpInfo(reference, page, count, type);
        return resp.getData();
    }

    /**
     * Get Invoice by Reference Number
     * 
     * @param reference Reference Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @param type Invoice type (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelSalesInvoiceModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelSalesInvoiceModel>> invoiceGetReferenceWithHttpInfo(String reference, Integer page, Integer count, String type) throws ApiException {
        com.squareup.okhttp.Call call = invoiceGetReferenceValidateBeforeCall(reference, page, count, type, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesInvoiceModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Invoice by Reference Number (asynchronously)
     * 
     * @param reference Reference Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Invoices per Page (default&#x3D;100) (required)
     * @param type Invoice type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceGetReferenceAsync(String reference, Integer page, Integer count, String type, final ApiCallback<List<DkCloudDataModelSalesInvoiceModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceGetReferenceValidateBeforeCall(reference, page, count, type, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesInvoiceModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for invoiceRefreshInvoiceFromDK
     * @param number Invoice Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceRefreshInvoiceFromDKCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/{number}/refresh"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceRefreshInvoiceFromDKValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling invoiceRefreshInvoiceFromDK(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceRefreshInvoiceFromDKCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Refresh invoice in dk+ from DK(Force Method)
     * 
     * @param number Invoice Number (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void invoiceRefreshInvoiceFromDK(String number) throws ApiException {
        invoiceRefreshInvoiceFromDKWithHttpInfo(number);
    }

    /**
     * Refresh invoice in dk+ from DK(Force Method)
     * 
     * @param number Invoice Number (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> invoiceRefreshInvoiceFromDKWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = invoiceRefreshInvoiceFromDKValidateBeforeCall(number, null, null);
        return apiClient.execute(call);
    }

    /**
     * Refresh invoice in dk+ from DK(Force Method) (asynchronously)
     * 
     * @param number Invoice Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceRefreshInvoiceFromDKAsync(String number, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceRefreshInvoiceFromDKValidateBeforeCall(number, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for invoiceSendEmail
     * @param number invoice number (required)
     * @param message Message model (required)
     * @param custom Use a predefined invoice look (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceSendEmailCall(String number, DkPlusMailModelMailInfo message, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = message;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/{number}/email"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (custom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("custom", custom));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceSendEmailValidateBeforeCall(String number, DkPlusMailModelMailInfo message, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling invoiceSendEmail(Async)");
        }
        
        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling invoiceSendEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceSendEmailCall(number, message, custom, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send invoice as email.
     * 
     * @param number invoice number (required)
     * @param message Message model (required)
     * @param custom Use a predefined invoice look (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void invoiceSendEmail(String number, DkPlusMailModelMailInfo message, String custom) throws ApiException {
        invoiceSendEmailWithHttpInfo(number, message, custom);
    }

    /**
     * Send invoice as email.
     * 
     * @param number invoice number (required)
     * @param message Message model (required)
     * @param custom Use a predefined invoice look (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> invoiceSendEmailWithHttpInfo(String number, DkPlusMailModelMailInfo message, String custom) throws ApiException {
        com.squareup.okhttp.Call call = invoiceSendEmailValidateBeforeCall(number, message, custom, null, null);
        return apiClient.execute(call);
    }

    /**
     * Send invoice as email. (asynchronously)
     * 
     * @param number invoice number (required)
     * @param message Message model (required)
     * @param custom Use a predefined invoice look (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceSendEmailAsync(String number, DkPlusMailModelMailInfo message, String custom, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceSendEmailValidateBeforeCall(number, message, custom, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for invoiceSendMassEmail
     * @param number Invoice (required)
     * @param message Message Model (required)
     * @param custom Use a predefined invoice look (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call invoiceSendMassEmailCall(String number, DkPlusMailModelMailInfo message, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = message;

        // create path and map variables
        String localVarPath = "/api/v1/sales/invoice/sendto/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (number != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("number", number));
        if (custom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("custom", custom));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call invoiceSendMassEmailValidateBeforeCall(String number, DkPlusMailModelMailInfo message, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling invoiceSendMassEmail(Async)");
        }
        
        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling invoiceSendMassEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = invoiceSendMassEmailCall(number, message, custom, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param number Invoice (required)
     * @param message Message Model (required)
     * @param custom Use a predefined invoice look (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object invoiceSendMassEmail(String number, DkPlusMailModelMailInfo message, String custom) throws ApiException {
        ApiResponse<Object> resp = invoiceSendMassEmailWithHttpInfo(number, message, custom);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param number Invoice (required)
     * @param message Message Model (required)
     * @param custom Use a predefined invoice look (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> invoiceSendMassEmailWithHttpInfo(String number, DkPlusMailModelMailInfo message, String custom) throws ApiException {
        com.squareup.okhttp.Call call = invoiceSendMassEmailValidateBeforeCall(number, message, custom, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param number Invoice (required)
     * @param message Message Model (required)
     * @param custom Use a predefined invoice look (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call invoiceSendMassEmailAsync(String number, DkPlusMailModelMailInfo message, String custom, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = invoiceSendMassEmailValidateBeforeCall(number, message, custom, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
