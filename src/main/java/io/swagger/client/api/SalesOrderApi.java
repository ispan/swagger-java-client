/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkCloudDataModelSalesSalesOrderModel;
import io.swagger.client.model.DkPlusAPIModelsOrderHead;
import io.swagger.client.model.DkPlusAPIModelsStatusValueModel;
import io.swagger.client.model.DkPlusMailModelMailInfo;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.VLinkDkSoftwareDkSOAPTOrder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SalesOrderApi {
    private ApiClient apiClient;

    public SalesOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SalesOrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for salesOrderCreateOrder
     * @param value Order Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call salesOrderCreateOrderCall(DkPlusAPIModelsOrderHead value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/api/v1/sales/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call salesOrderCreateOrderValidateBeforeCall(DkPlusAPIModelsOrderHead value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling salesOrderCreateOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = salesOrderCreateOrderCall(value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Sales Order
     * 
     * @param value Order Model (required)
     * @return DkPlusAPIModelsStatusValueModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkPlusAPIModelsStatusValueModel salesOrderCreateOrder(DkPlusAPIModelsOrderHead value) throws ApiException {
        ApiResponse<DkPlusAPIModelsStatusValueModel> resp = salesOrderCreateOrderWithHttpInfo(value);
        return resp.getData();
    }

    /**
     * Create Sales Order
     * 
     * @param value Order Model (required)
     * @return ApiResponse&lt;DkPlusAPIModelsStatusValueModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkPlusAPIModelsStatusValueModel> salesOrderCreateOrderWithHttpInfo(DkPlusAPIModelsOrderHead value) throws ApiException {
        com.squareup.okhttp.Call call = salesOrderCreateOrderValidateBeforeCall(value, null, null);
        Type localVarReturnType = new TypeToken<DkPlusAPIModelsStatusValueModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Sales Order (asynchronously)
     * 
     * @param value Order Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call salesOrderCreateOrderAsync(DkPlusAPIModelsOrderHead value, final ApiCallback<DkPlusAPIModelsStatusValueModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = salesOrderCreateOrderValidateBeforeCall(value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkPlusAPIModelsStatusValueModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for salesOrderDelete
     * @param id Order Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call salesOrderDeleteCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/order/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call salesOrderDeleteValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling salesOrderDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = salesOrderDeleteCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Sales Order
     * 
     * @param id Order Id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void salesOrderDelete(Integer id) throws ApiException {
        salesOrderDeleteWithHttpInfo(id);
    }

    /**
     * Delete Sales Order
     * 
     * @param id Order Id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> salesOrderDeleteWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = salesOrderDeleteValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete Sales Order (asynchronously)
     * 
     * @param id Order Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call salesOrderDeleteAsync(Integer id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = salesOrderDeleteValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for salesOrderGetByReference
     * @param reference Order Reference (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call salesOrderGetByReferenceCall(String reference, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/order/reference/{reference}"
            .replaceAll("\\{" + "reference" + "\\}", apiClient.escapeString(reference.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call salesOrderGetByReferenceValidateBeforeCall(String reference, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'reference' is set
        if (reference == null) {
            throw new ApiException("Missing the required parameter 'reference' when calling salesOrderGetByReference(Async)");
        }
        

        com.squareup.okhttp.Call call = salesOrderGetByReferenceCall(reference, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Sales Order by Reference
     * 
     * @param reference Order Reference (required)
     * @return List&lt;DkCloudDataModelSalesSalesOrderModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelSalesSalesOrderModel> salesOrderGetByReference(String reference) throws ApiException {
        ApiResponse<List<DkCloudDataModelSalesSalesOrderModel>> resp = salesOrderGetByReferenceWithHttpInfo(reference);
        return resp.getData();
    }

    /**
     * Get Sales Order by Reference
     * 
     * @param reference Order Reference (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelSalesSalesOrderModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelSalesSalesOrderModel>> salesOrderGetByReferenceWithHttpInfo(String reference) throws ApiException {
        com.squareup.okhttp.Call call = salesOrderGetByReferenceValidateBeforeCall(reference, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesSalesOrderModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Sales Order by Reference (asynchronously)
     * 
     * @param reference Order Reference (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call salesOrderGetByReferenceAsync(String reference, final ApiCallback<List<DkCloudDataModelSalesSalesOrderModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = salesOrderGetByReferenceValidateBeforeCall(reference, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelSalesSalesOrderModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for salesOrderGetHtml
     * @param number Order Number (required)
     * @param custom Customer Report Name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call salesOrderGetHtmlCall(Integer number, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/order/{number}/html"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (custom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("custom", custom));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call salesOrderGetHtmlValidateBeforeCall(Integer number, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling salesOrderGetHtml(Async)");
        }
        

        com.squareup.okhttp.Call call = salesOrderGetHtmlCall(number, custom, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Sales Order as HTML
     * 
     * @param number Order Number (required)
     * @param custom Customer Report Name (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object salesOrderGetHtml(Integer number, String custom) throws ApiException {
        ApiResponse<Object> resp = salesOrderGetHtmlWithHttpInfo(number, custom);
        return resp.getData();
    }

    /**
     * Get Sales Order as HTML
     * 
     * @param number Order Number (required)
     * @param custom Customer Report Name (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> salesOrderGetHtmlWithHttpInfo(Integer number, String custom) throws ApiException {
        com.squareup.okhttp.Call call = salesOrderGetHtmlValidateBeforeCall(number, custom, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Sales Order as HTML (asynchronously)
     * 
     * @param number Order Number (required)
     * @param custom Customer Report Name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call salesOrderGetHtmlAsync(Integer number, String custom, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = salesOrderGetHtmlValidateBeforeCall(number, custom, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for salesOrderGetOrder
     * @param id Order Id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call salesOrderGetOrderCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/order/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call salesOrderGetOrderValidateBeforeCall(Integer id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling salesOrderGetOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = salesOrderGetOrderCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Sales Order
     * 
     * @param id Order Id (required)
     * @return DkCloudDataModelSalesSalesOrderModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelSalesSalesOrderModel salesOrderGetOrder(Integer id) throws ApiException {
        ApiResponse<DkCloudDataModelSalesSalesOrderModel> resp = salesOrderGetOrderWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Get Sales Order
     * 
     * @param id Order Id (required)
     * @return ApiResponse&lt;DkCloudDataModelSalesSalesOrderModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelSalesSalesOrderModel> salesOrderGetOrderWithHttpInfo(Integer id) throws ApiException {
        com.squareup.okhttp.Call call = salesOrderGetOrderValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelSalesSalesOrderModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Sales Order (asynchronously)
     * 
     * @param id Order Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call salesOrderGetOrderAsync(Integer id, final ApiCallback<DkCloudDataModelSalesSalesOrderModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = salesOrderGetOrderValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelSalesSalesOrderModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for salesOrderGetOrderFromFilter
     * @param modified Modified After (required)
     * @param status Order Status (optional)
     * @param deliveryStatus Order Delivery status (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call salesOrderGetOrderFromFilterCall(OffsetDateTime modified, String status, String deliveryStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (modified != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modified", modified));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Status", status));
        if (deliveryStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("DeliveryStatus", deliveryStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call salesOrderGetOrderFromFilterValidateBeforeCall(OffsetDateTime modified, String status, String deliveryStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'modified' is set
        if (modified == null) {
            throw new ApiException("Missing the required parameter 'modified' when calling salesOrderGetOrderFromFilter(Async)");
        }
        

        com.squareup.okhttp.Call call = salesOrderGetOrderFromFilterCall(modified, status, deliveryStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Orders by Filter
     * 
     * @param modified Modified After (required)
     * @param status Order Status (optional)
     * @param deliveryStatus Order Delivery status (optional)
     * @return DkCloudDataModelSalesSalesOrderModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelSalesSalesOrderModel salesOrderGetOrderFromFilter(OffsetDateTime modified, String status, String deliveryStatus) throws ApiException {
        ApiResponse<DkCloudDataModelSalesSalesOrderModel> resp = salesOrderGetOrderFromFilterWithHttpInfo(modified, status, deliveryStatus);
        return resp.getData();
    }

    /**
     * Get Orders by Filter
     * 
     * @param modified Modified After (required)
     * @param status Order Status (optional)
     * @param deliveryStatus Order Delivery status (optional)
     * @return ApiResponse&lt;DkCloudDataModelSalesSalesOrderModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelSalesSalesOrderModel> salesOrderGetOrderFromFilterWithHttpInfo(OffsetDateTime modified, String status, String deliveryStatus) throws ApiException {
        com.squareup.okhttp.Call call = salesOrderGetOrderFromFilterValidateBeforeCall(modified, status, deliveryStatus, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelSalesSalesOrderModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Orders by Filter (asynchronously)
     * 
     * @param modified Modified After (required)
     * @param status Order Status (optional)
     * @param deliveryStatus Order Delivery status (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call salesOrderGetOrderFromFilterAsync(OffsetDateTime modified, String status, String deliveryStatus, final ApiCallback<DkCloudDataModelSalesSalesOrderModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = salesOrderGetOrderFromFilterValidateBeforeCall(modified, status, deliveryStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelSalesSalesOrderModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for salesOrderGetPDF
     * @param number Order Number (required)
     * @param custom Customer Report Name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call salesOrderGetPDFCall(Integer number, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/sales/order/{number}/pdf"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (custom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("custom", custom));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call salesOrderGetPDFValidateBeforeCall(Integer number, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling salesOrderGetPDF(Async)");
        }
        

        com.squareup.okhttp.Call call = salesOrderGetPDFCall(number, custom, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Sales Order as PDF
     * 
     * @param number Order Number (required)
     * @param custom Customer Report Name (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object salesOrderGetPDF(Integer number, String custom) throws ApiException {
        ApiResponse<Object> resp = salesOrderGetPDFWithHttpInfo(number, custom);
        return resp.getData();
    }

    /**
     * Get Sales Order as PDF
     * 
     * @param number Order Number (required)
     * @param custom Customer Report Name (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> salesOrderGetPDFWithHttpInfo(Integer number, String custom) throws ApiException {
        com.squareup.okhttp.Call call = salesOrderGetPDFValidateBeforeCall(number, custom, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Sales Order as PDF (asynchronously)
     * 
     * @param number Order Number (required)
     * @param custom Customer Report Name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call salesOrderGetPDFAsync(Integer number, String custom, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = salesOrderGetPDFValidateBeforeCall(number, custom, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for salesOrderSendEmail
     * @param number Order Number (required)
     * @param message Message Model (required)
     * @param custom Customer Report Name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call salesOrderSendEmailCall(Integer number, DkPlusMailModelMailInfo message, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = message;

        // create path and map variables
        String localVarPath = "/api/v1/sales/order/{number}/email"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (custom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("custom", custom));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call salesOrderSendEmailValidateBeforeCall(Integer number, DkPlusMailModelMailInfo message, String custom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling salesOrderSendEmail(Async)");
        }
        
        // verify the required parameter 'message' is set
        if (message == null) {
            throw new ApiException("Missing the required parameter 'message' when calling salesOrderSendEmail(Async)");
        }
        

        com.squareup.okhttp.Call call = salesOrderSendEmailCall(number, message, custom, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Send Sales Order to Email
     * 
     * @param number Order Number (required)
     * @param message Message Model (required)
     * @param custom Customer Report Name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void salesOrderSendEmail(Integer number, DkPlusMailModelMailInfo message, String custom) throws ApiException {
        salesOrderSendEmailWithHttpInfo(number, message, custom);
    }

    /**
     * Send Sales Order to Email
     * 
     * @param number Order Number (required)
     * @param message Message Model (required)
     * @param custom Customer Report Name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> salesOrderSendEmailWithHttpInfo(Integer number, DkPlusMailModelMailInfo message, String custom) throws ApiException {
        com.squareup.okhttp.Call call = salesOrderSendEmailValidateBeforeCall(number, message, custom, null, null);
        return apiClient.execute(call);
    }

    /**
     * Send Sales Order to Email (asynchronously)
     * 
     * @param number Order Number (required)
     * @param message Message Model (required)
     * @param custom Customer Report Name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call salesOrderSendEmailAsync(Integer number, DkPlusMailModelMailInfo message, String custom, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = salesOrderSendEmailValidateBeforeCall(number, message, custom, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for salesOrderUpdateOrder
     * @param id Order Id (required)
     * @param value Order Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call salesOrderUpdateOrderCall(Integer id, DkCloudDataModelSalesSalesOrderModel value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/api/v1/sales/order/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call salesOrderUpdateOrderValidateBeforeCall(Integer id, DkCloudDataModelSalesSalesOrderModel value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling salesOrderUpdateOrder(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling salesOrderUpdateOrder(Async)");
        }
        

        com.squareup.okhttp.Call call = salesOrderUpdateOrderCall(id, value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Sales Order
     * 
     * @param id Order Id (required)
     * @param value Order Model (required)
     * @return VLinkDkSoftwareDkSOAPTOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VLinkDkSoftwareDkSOAPTOrder salesOrderUpdateOrder(Integer id, DkCloudDataModelSalesSalesOrderModel value) throws ApiException {
        ApiResponse<VLinkDkSoftwareDkSOAPTOrder> resp = salesOrderUpdateOrderWithHttpInfo(id, value);
        return resp.getData();
    }

    /**
     * Update Sales Order
     * 
     * @param id Order Id (required)
     * @param value Order Model (required)
     * @return ApiResponse&lt;VLinkDkSoftwareDkSOAPTOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VLinkDkSoftwareDkSOAPTOrder> salesOrderUpdateOrderWithHttpInfo(Integer id, DkCloudDataModelSalesSalesOrderModel value) throws ApiException {
        com.squareup.okhttp.Call call = salesOrderUpdateOrderValidateBeforeCall(id, value, null, null);
        Type localVarReturnType = new TypeToken<VLinkDkSoftwareDkSOAPTOrder>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Sales Order (asynchronously)
     * 
     * @param id Order Id (required)
     * @param value Order Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call salesOrderUpdateOrderAsync(Integer id, DkCloudDataModelSalesSalesOrderModel value, final ApiCallback<VLinkDkSoftwareDkSOAPTOrder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = salesOrderUpdateOrderValidateBeforeCall(id, value, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VLinkDkSoftwareDkSOAPTOrder>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
