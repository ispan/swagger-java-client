/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkCloudDataModelGeneralLedgerAccount;
import io.swagger.client.model.DkCloudDataModelGeneralLedgerTransaction;
import io.swagger.client.model.DkPlusAPIModelsGeneralLedgerHead;
import org.threeten.bp.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeneralLedgerApi {
    private ApiClient apiClient;

    public GeneralLedgerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GeneralLedgerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for generalLedgerAccountGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generalLedgerAccountGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/generalledger/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generalLedgerAccountGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = generalLedgerAccountGetCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get General Ledger Accounts
     * 
     * @return List&lt;DkCloudDataModelGeneralLedgerAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelGeneralLedgerAccount> generalLedgerAccountGet() throws ApiException {
        ApiResponse<List<DkCloudDataModelGeneralLedgerAccount>> resp = generalLedgerAccountGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get General Ledger Accounts
     * 
     * @return ApiResponse&lt;List&lt;DkCloudDataModelGeneralLedgerAccount&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelGeneralLedgerAccount>> generalLedgerAccountGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = generalLedgerAccountGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerAccount>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get General Ledger Accounts (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generalLedgerAccountGetAsync(final ApiCallback<List<DkCloudDataModelGeneralLedgerAccount>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generalLedgerAccountGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerAccount>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generalLedgerAccountGetAccount
     * @param number Account Number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generalLedgerAccountGetAccountCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/generalledger/account/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generalLedgerAccountGetAccountValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling generalLedgerAccountGetAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = generalLedgerAccountGetAccountCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get General Ledger Account
     * 
     * @param number Account Number (required)
     * @return DkCloudDataModelGeneralLedgerAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelGeneralLedgerAccount generalLedgerAccountGetAccount(String number) throws ApiException {
        ApiResponse<DkCloudDataModelGeneralLedgerAccount> resp = generalLedgerAccountGetAccountWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get General Ledger Account
     * 
     * @param number Account Number (required)
     * @return ApiResponse&lt;DkCloudDataModelGeneralLedgerAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelGeneralLedgerAccount> generalLedgerAccountGetAccountWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = generalLedgerAccountGetAccountValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelGeneralLedgerAccount>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get General Ledger Account (asynchronously)
     * 
     * @param number Account Number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generalLedgerAccountGetAccountAsync(String number, final ApiCallback<DkCloudDataModelGeneralLedgerAccount> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generalLedgerAccountGetAccountValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelGeneralLedgerAccount>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generalLedgerAccountGetTransactions
     * @param id Account Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generalLedgerAccountGetTransactionsCall(String id, Integer page, Integer count, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/generalledger/account/{id}/transaction/{page}/{count}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (dueAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dueAfter", dueAfter));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (voucher != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucher", voucher));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generalLedgerAccountGetTransactionsValidateBeforeCall(String id, Integer page, Integer count, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling generalLedgerAccountGetTransactions(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling generalLedgerAccountGetTransactions(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling generalLedgerAccountGetTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = generalLedgerAccountGetTransactionsCall(id, page, count, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get transactions for a General Ledger Account
     * 
     * @param id Account Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @return List&lt;DkCloudDataModelGeneralLedgerTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelGeneralLedgerTransaction> generalLedgerAccountGetTransactions(String id, Integer page, Integer count, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference) throws ApiException {
        ApiResponse<List<DkCloudDataModelGeneralLedgerTransaction>> resp = generalLedgerAccountGetTransactionsWithHttpInfo(id, page, count, createdAfter, createdBefore, dueAfter, dim1, voucher, reference);
        return resp.getData();
    }

    /**
     * Get transactions for a General Ledger Account
     * 
     * @param id Account Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelGeneralLedgerTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelGeneralLedgerTransaction>> generalLedgerAccountGetTransactionsWithHttpInfo(String id, Integer page, Integer count, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference) throws ApiException {
        com.squareup.okhttp.Call call = generalLedgerAccountGetTransactionsValidateBeforeCall(id, page, count, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get transactions for a General Ledger Account (asynchronously)
     * 
     * @param id Account Number (required)
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generalLedgerAccountGetTransactionsAsync(String id, Integer page, Integer count, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, final ApiCallback<List<DkCloudDataModelGeneralLedgerTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generalLedgerAccountGetTransactionsValidateBeforeCall(id, page, count, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for generalLedgerJournalGetGeneralLedgerJournal
     * @param value Journal Model (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generalLedgerJournalGetGeneralLedgerJournalCall(DkPlusAPIModelsGeneralLedgerHead value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/api/v1/generalLedger/journal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generalLedgerJournalGetGeneralLedgerJournalValidateBeforeCall(DkPlusAPIModelsGeneralLedgerHead value, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling generalLedgerJournalGetGeneralLedgerJournal(Async)");
        }
        

        com.squareup.okhttp.Call call = generalLedgerJournalGetGeneralLedgerJournalCall(value, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a General Ledger Journal
     * 
     * @param value Journal Model (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void generalLedgerJournalGetGeneralLedgerJournal(DkPlusAPIModelsGeneralLedgerHead value) throws ApiException {
        generalLedgerJournalGetGeneralLedgerJournalWithHttpInfo(value);
    }

    /**
     * Create a General Ledger Journal
     * 
     * @param value Journal Model (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> generalLedgerJournalGetGeneralLedgerJournalWithHttpInfo(DkPlusAPIModelsGeneralLedgerHead value) throws ApiException {
        com.squareup.okhttp.Call call = generalLedgerJournalGetGeneralLedgerJournalValidateBeforeCall(value, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a General Ledger Journal (asynchronously)
     * 
     * @param value Journal Model (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generalLedgerJournalGetGeneralLedgerJournalAsync(DkPlusAPIModelsGeneralLedgerHead value, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generalLedgerJournalGetGeneralLedgerJournalValidateBeforeCall(value, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for generalLedgerTransactionGetGeneralTransactionPage
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greter Than (optional)
     * @param include Fields to include (optional)
     * @param sort Field to sort by (optional)
     * @param sorttype Sort Direction (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call generalLedgerTransactionGetGeneralTransactionPageCall(Integer page, Integer count, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String sort, String sorttype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/generalledger/transaction/page/{page}/{count}"
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (account != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("account", account));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdAfter", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("createdBefore", createdBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedAfter", modifiedAfter));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modifiedBefore", modifiedBefore));
        if (dueAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dueAfter", dueAfter));
        if (dim1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dim1", dim1));
        if (voucher != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("voucher", voucher));
        if (reference != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reference", reference));
        if (recordid != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("recordid", recordid));
        if (include != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include", include));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (sorttype != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sorttype", sorttype));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call generalLedgerTransactionGetGeneralTransactionPageValidateBeforeCall(Integer page, Integer count, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String sort, String sorttype, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling generalLedgerTransactionGetGeneralTransactionPage(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling generalLedgerTransactionGetGeneralTransactionPage(Async)");
        }
        

        com.squareup.okhttp.Call call = generalLedgerTransactionGetGeneralTransactionPageCall(page, count, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dueAfter, dim1, voucher, reference, recordid, include, sort, sorttype, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get General Ledger Transaction
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greter Than (optional)
     * @param include Fields to include (optional)
     * @param sort Field to sort by (optional)
     * @param sorttype Sort Direction (optional)
     * @return List&lt;DkCloudDataModelGeneralLedgerTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelGeneralLedgerTransaction> generalLedgerTransactionGetGeneralTransactionPage(Integer page, Integer count, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String sort, String sorttype) throws ApiException {
        ApiResponse<List<DkCloudDataModelGeneralLedgerTransaction>> resp = generalLedgerTransactionGetGeneralTransactionPageWithHttpInfo(page, count, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dueAfter, dim1, voucher, reference, recordid, include, sort, sorttype);
        return resp.getData();
    }

    /**
     * Get General Ledger Transaction
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greter Than (optional)
     * @param include Fields to include (optional)
     * @param sort Field to sort by (optional)
     * @param sorttype Sort Direction (optional)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelGeneralLedgerTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelGeneralLedgerTransaction>> generalLedgerTransactionGetGeneralTransactionPageWithHttpInfo(Integer page, Integer count, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String sort, String sorttype) throws ApiException {
        com.squareup.okhttp.Call call = generalLedgerTransactionGetGeneralTransactionPageValidateBeforeCall(page, count, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dueAfter, dim1, voucher, reference, recordid, include, sort, sorttype, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get General Ledger Transaction (asynchronously)
     * 
     * @param page Page Number (default&#x3D;1) (required)
     * @param count Transactions per Page (default&#x3D;100) (required)
     * @param account General Ledger Account Number (optional)
     * @param createdAfter Created After (optional)
     * @param createdBefore Created Before (optional)
     * @param modifiedAfter Modified After (optional)
     * @param modifiedBefore Modified Before (optional)
     * @param dueAfter Due After (optional)
     * @param dim1 Dimmention (optional)
     * @param voucher Voucher (optional)
     * @param reference Reference (optional)
     * @param recordid Id Greter Than (optional)
     * @param include Fields to include (optional)
     * @param sort Field to sort by (optional)
     * @param sorttype Sort Direction (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call generalLedgerTransactionGetGeneralTransactionPageAsync(Integer page, Integer count, String account, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, OffsetDateTime dueAfter, String dim1, String voucher, String reference, Integer recordid, String include, String sort, String sorttype, final ApiCallback<List<DkCloudDataModelGeneralLedgerTransaction>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = generalLedgerTransactionGetGeneralTransactionPageValidateBeforeCall(page, count, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dueAfter, dim1, voucher, reference, recordid, include, sort, sorttype, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelGeneralLedgerTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
