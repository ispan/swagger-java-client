/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.DkCloudDataModelEmployeeEmployeeModel;
import io.swagger.client.model.DkCloudDataModelProjectProjectModel;
import io.swagger.client.model.DkCloudDataModelTimeClockEntryModel;
import io.swagger.client.model.DkPlusAPIModelsEmployeeEmployeeWork;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmployeeApi {
    private ApiClient apiClient;

    public EmployeeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for employeeCreateEmployee
     * @param employee  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call employeeCreateEmployeeCall(DkCloudDataModelEmployeeEmployeeModel employee, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = employee;

        // create path and map variables
        String localVarPath = "/api/v1/general/employee";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call employeeCreateEmployeeValidateBeforeCall(DkCloudDataModelEmployeeEmployeeModel employee, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'employee' is set
        if (employee == null) {
            throw new ApiException("Missing the required parameter 'employee' when calling employeeCreateEmployee(Async)");
        }
        

        com.squareup.okhttp.Call call = employeeCreateEmployeeCall(employee, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an employee
     * 
     * @param employee  (required)
     * @return DkCloudDataModelEmployeeEmployeeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelEmployeeEmployeeModel employeeCreateEmployee(DkCloudDataModelEmployeeEmployeeModel employee) throws ApiException {
        ApiResponse<DkCloudDataModelEmployeeEmployeeModel> resp = employeeCreateEmployeeWithHttpInfo(employee);
        return resp.getData();
    }

    /**
     * Create an employee
     * 
     * @param employee  (required)
     * @return ApiResponse&lt;DkCloudDataModelEmployeeEmployeeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelEmployeeEmployeeModel> employeeCreateEmployeeWithHttpInfo(DkCloudDataModelEmployeeEmployeeModel employee) throws ApiException {
        com.squareup.okhttp.Call call = employeeCreateEmployeeValidateBeforeCall(employee, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelEmployeeEmployeeModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an employee (asynchronously)
     * 
     * @param employee  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call employeeCreateEmployeeAsync(DkCloudDataModelEmployeeEmployeeModel employee, final ApiCallback<DkCloudDataModelEmployeeEmployeeModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = employeeCreateEmployeeValidateBeforeCall(employee, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelEmployeeEmployeeModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for employeeGetEmployee
     * @param number Employee number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call employeeGetEmployeeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/general/employee/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call employeeGetEmployeeValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling employeeGetEmployee(Async)");
        }
        

        com.squareup.okhttp.Call call = employeeGetEmployeeCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Use this method to get an employee
     * 
     * @param number Employee number (required)
     * @return DkCloudDataModelEmployeeEmployeeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelEmployeeEmployeeModel employeeGetEmployee(String number) throws ApiException {
        ApiResponse<DkCloudDataModelEmployeeEmployeeModel> resp = employeeGetEmployeeWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Use this method to get an employee
     * 
     * @param number Employee number (required)
     * @return ApiResponse&lt;DkCloudDataModelEmployeeEmployeeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelEmployeeEmployeeModel> employeeGetEmployeeWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = employeeGetEmployeeValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelEmployeeEmployeeModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Use this method to get an employee (asynchronously)
     * 
     * @param number Employee number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call employeeGetEmployeeAsync(String number, final ApiCallback<DkCloudDataModelEmployeeEmployeeModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = employeeGetEmployeeValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelEmployeeEmployeeModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for employeeGetEmployeeTimeClock
     * @param number Employee number (required)
     * @param page Page number (default&#x3D;1) (required)
     * @param count Number of objects on page (default&#x3D;100) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call employeeGetEmployeeTimeClockCall(String number, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/general/employee/{number}/timeclock/page/{page}/{count}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()))
            .replaceAll("\\{" + "page" + "\\}", apiClient.escapeString(page.toString()))
            .replaceAll("\\{" + "count" + "\\}", apiClient.escapeString(count.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call employeeGetEmployeeTimeClockValidateBeforeCall(String number, Integer page, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling employeeGetEmployeeTimeClock(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling employeeGetEmployeeTimeClock(Async)");
        }
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling employeeGetEmployeeTimeClock(Async)");
        }
        

        com.squareup.okhttp.Call call = employeeGetEmployeeTimeClockCall(number, page, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Time clock entries for an employee
     * 
     * @param number Employee number (required)
     * @param page Page number (default&#x3D;1) (required)
     * @param count Number of objects on page (default&#x3D;100) (required)
     * @return List&lt;DkCloudDataModelTimeClockEntryModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelTimeClockEntryModel> employeeGetEmployeeTimeClock(String number, Integer page, Integer count) throws ApiException {
        ApiResponse<List<DkCloudDataModelTimeClockEntryModel>> resp = employeeGetEmployeeTimeClockWithHttpInfo(number, page, count);
        return resp.getData();
    }

    /**
     * Time clock entries for an employee
     * 
     * @param number Employee number (required)
     * @param page Page number (default&#x3D;1) (required)
     * @param count Number of objects on page (default&#x3D;100) (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelTimeClockEntryModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelTimeClockEntryModel>> employeeGetEmployeeTimeClockWithHttpInfo(String number, Integer page, Integer count) throws ApiException {
        com.squareup.okhttp.Call call = employeeGetEmployeeTimeClockValidateBeforeCall(number, page, count, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelTimeClockEntryModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Time clock entries for an employee (asynchronously)
     * 
     * @param number Employee number (required)
     * @param page Page number (default&#x3D;1) (required)
     * @param count Number of objects on page (default&#x3D;100) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call employeeGetEmployeeTimeClockAsync(String number, Integer page, Integer count, final ApiCallback<List<DkCloudDataModelTimeClockEntryModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = employeeGetEmployeeTimeClockValidateBeforeCall(number, page, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelTimeClockEntryModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for employeeGetEmployees
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call employeeGetEmployeesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/general/employee";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call employeeGetEmployeesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = employeeGetEmployeesCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Using this method you can get all employee´s from the system
     * 
     * @return List&lt;DkCloudDataModelEmployeeEmployeeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelEmployeeEmployeeModel> employeeGetEmployees() throws ApiException {
        ApiResponse<List<DkCloudDataModelEmployeeEmployeeModel>> resp = employeeGetEmployeesWithHttpInfo();
        return resp.getData();
    }

    /**
     * Using this method you can get all employee´s from the system
     * 
     * @return ApiResponse&lt;List&lt;DkCloudDataModelEmployeeEmployeeModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelEmployeeEmployeeModel>> employeeGetEmployeesWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = employeeGetEmployeesValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelEmployeeEmployeeModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Using this method you can get all employee´s from the system (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call employeeGetEmployeesAsync(final ApiCallback<List<DkCloudDataModelEmployeeEmployeeModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = employeeGetEmployeesValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelEmployeeEmployeeModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for employeeGetProjectSupervisor
     * @param number Employee number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call employeeGetProjectSupervisorCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/general/employee/{number}/supervisor"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call employeeGetProjectSupervisorValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling employeeGetProjectSupervisor(Async)");
        }
        

        com.squareup.okhttp.Call call = employeeGetProjectSupervisorCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get projects where employee is assigned as a supervior
     * 
     * @param number Employee number (required)
     * @return List&lt;DkCloudDataModelProjectProjectModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProjectProjectModel> employeeGetProjectSupervisor(String number) throws ApiException {
        ApiResponse<List<DkCloudDataModelProjectProjectModel>> resp = employeeGetProjectSupervisorWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get projects where employee is assigned as a supervior
     * 
     * @param number Employee number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProjectProjectModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProjectProjectModel>> employeeGetProjectSupervisorWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = employeeGetProjectSupervisorValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get projects where employee is assigned as a supervior (asynchronously)
     * 
     * @param number Employee number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call employeeGetProjectSupervisorAsync(String number, final ApiCallback<List<DkCloudDataModelProjectProjectModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = employeeGetProjectSupervisorValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for employeeGetProjectWorker
     * @param number Employee number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call employeeGetProjectWorkerCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/general/employee/{number}/worker"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call employeeGetProjectWorkerValidateBeforeCall(String number, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling employeeGetProjectWorker(Async)");
        }
        

        com.squareup.okhttp.Call call = employeeGetProjectWorkerCall(number, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get projects where employee is assigned as a worker
     * 
     * @param number Employee number (required)
     * @return List&lt;DkCloudDataModelProjectProjectModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DkCloudDataModelProjectProjectModel> employeeGetProjectWorker(String number) throws ApiException {
        ApiResponse<List<DkCloudDataModelProjectProjectModel>> resp = employeeGetProjectWorkerWithHttpInfo(number);
        return resp.getData();
    }

    /**
     * Get projects where employee is assigned as a worker
     * 
     * @param number Employee number (required)
     * @return ApiResponse&lt;List&lt;DkCloudDataModelProjectProjectModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DkCloudDataModelProjectProjectModel>> employeeGetProjectWorkerWithHttpInfo(String number) throws ApiException {
        com.squareup.okhttp.Call call = employeeGetProjectWorkerValidateBeforeCall(number, null, null);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get projects where employee is assigned as a worker (asynchronously)
     * 
     * @param number Employee number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call employeeGetProjectWorkerAsync(String number, final ApiCallback<List<DkCloudDataModelProjectProjectModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = employeeGetProjectWorkerValidateBeforeCall(number, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DkCloudDataModelProjectProjectModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for employeeUpdate
     * @param number Employee number (required)
     * @param employee Employee Object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call employeeUpdateCall(String number, DkCloudDataModelEmployeeEmployeeModel employee, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = employee;

        // create path and map variables
        String localVarPath = "/api/v1/general/employee/{number}"
            .replaceAll("\\{" + "number" + "\\}", apiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call employeeUpdateValidateBeforeCall(String number, DkCloudDataModelEmployeeEmployeeModel employee, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling employeeUpdate(Async)");
        }
        
        // verify the required parameter 'employee' is set
        if (employee == null) {
            throw new ApiException("Missing the required parameter 'employee' when calling employeeUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = employeeUpdateCall(number, employee, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an employee
     * 
     * @param number Employee number (required)
     * @param employee Employee Object (required)
     * @return DkCloudDataModelEmployeeEmployeeModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DkCloudDataModelEmployeeEmployeeModel employeeUpdate(String number, DkCloudDataModelEmployeeEmployeeModel employee) throws ApiException {
        ApiResponse<DkCloudDataModelEmployeeEmployeeModel> resp = employeeUpdateWithHttpInfo(number, employee);
        return resp.getData();
    }

    /**
     * Update an employee
     * 
     * @param number Employee number (required)
     * @param employee Employee Object (required)
     * @return ApiResponse&lt;DkCloudDataModelEmployeeEmployeeModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DkCloudDataModelEmployeeEmployeeModel> employeeUpdateWithHttpInfo(String number, DkCloudDataModelEmployeeEmployeeModel employee) throws ApiException {
        com.squareup.okhttp.Call call = employeeUpdateValidateBeforeCall(number, employee, null, null);
        Type localVarReturnType = new TypeToken<DkCloudDataModelEmployeeEmployeeModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an employee (asynchronously)
     * 
     * @param number Employee number (required)
     * @param employee Employee Object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call employeeUpdateAsync(String number, DkCloudDataModelEmployeeEmployeeModel employee, final ApiCallback<DkCloudDataModelEmployeeEmployeeModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = employeeUpdateValidateBeforeCall(number, employee, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DkCloudDataModelEmployeeEmployeeModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for employeeWorkCreateEmployeeWork
     * @param employee Employee Number (required)
     * @param lines Journal Lines (required)
     * @param post Post Lines(Will be Locked and invoiced) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call employeeWorkCreateEmployeeWorkCall(String employee, List<DkPlusAPIModelsEmployeeEmployeeWork> lines, Boolean post, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = lines;

        // create path and map variables
        String localVarPath = "/api/v1/general/employee/{employee}/work"
            .replaceAll("\\{" + "employee" + "\\}", apiClient.escapeString(employee.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (post != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("post", post));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call employeeWorkCreateEmployeeWorkValidateBeforeCall(String employee, List<DkPlusAPIModelsEmployeeEmployeeWork> lines, Boolean post, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'employee' is set
        if (employee == null) {
            throw new ApiException("Missing the required parameter 'employee' when calling employeeWorkCreateEmployeeWork(Async)");
        }
        
        // verify the required parameter 'lines' is set
        if (lines == null) {
            throw new ApiException("Missing the required parameter 'lines' when calling employeeWorkCreateEmployeeWork(Async)");
        }
        

        com.squareup.okhttp.Call call = employeeWorkCreateEmployeeWorkCall(employee, lines, post, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add Employee Work Journal Entry
     * 
     * @param employee Employee Number (required)
     * @param lines Journal Lines (required)
     * @param post Post Lines(Will be Locked and invoiced) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void employeeWorkCreateEmployeeWork(String employee, List<DkPlusAPIModelsEmployeeEmployeeWork> lines, Boolean post) throws ApiException {
        employeeWorkCreateEmployeeWorkWithHttpInfo(employee, lines, post);
    }

    /**
     * Add Employee Work Journal Entry
     * 
     * @param employee Employee Number (required)
     * @param lines Journal Lines (required)
     * @param post Post Lines(Will be Locked and invoiced) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> employeeWorkCreateEmployeeWorkWithHttpInfo(String employee, List<DkPlusAPIModelsEmployeeEmployeeWork> lines, Boolean post) throws ApiException {
        com.squareup.okhttp.Call call = employeeWorkCreateEmployeeWorkValidateBeforeCall(employee, lines, post, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add Employee Work Journal Entry (asynchronously)
     * 
     * @param employee Employee Number (required)
     * @param lines Journal Lines (required)
     * @param post Post Lines(Will be Locked and invoiced) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call employeeWorkCreateEmployeeWorkAsync(String employee, List<DkPlusAPIModelsEmployeeEmployeeWork> lines, Boolean post, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = employeeWorkCreateEmployeeWorkValidateBeforeCall(employee, lines, post, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
