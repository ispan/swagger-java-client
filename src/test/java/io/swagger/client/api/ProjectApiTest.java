/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DkCloudDataModelGeneralLedgerTransaction;
import io.swagger.client.model.DkCloudDataModelProjectPhaseModel;
import io.swagger.client.model.DkCloudDataModelProjectProjectModel;
import io.swagger.client.model.DkCloudDataModelProjectTaskModel;
import io.swagger.client.model.DkCloudDataModelSalesInvoiceModel;
import io.swagger.client.model.DkPlusAPIModelsEmployeeEmployeeWork;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectApi
 */
@Ignore
public class ProjectApiTest {

    private final ProjectApi api = new ProjectApi();

    
    /**
     * Add Employee Work Journal Entry
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void employeeWorkCreateEmployeeWorkTest() throws ApiException {
        String employee = null;
        List<DkPlusAPIModelsEmployeeEmployeeWork> lines = null;
        Boolean post = null;
        api.employeeWorkCreateEmployeeWork(employee, lines, post);

        // TODO: test validations
    }
    
    /**
     * Create a Phase for the Project System
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void phasesCreatePhaseTest() throws ApiException {
        DkCloudDataModelProjectPhaseModel model = null;
        api.phasesCreatePhase(model);

        // TODO: test validations
    }
    
    /**
     * Get a phase
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void phasesGetPhaseTest() throws ApiException {
        String number = null;
        String include = null;
        List<DkCloudDataModelProjectPhaseModel> response = api.phasesGetPhase(number, include);

        // TODO: test validations
    }
    
    /**
     * Get Project Phases
     *
     * Note: On every project there is a list og Phases for that project. if that list is empty all Phases can be used.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void phasesGetPhasesTest() throws ApiException {
        Integer page = null;
        Integer count = null;
        OffsetDateTime modifiedBefore = null;
        OffsetDateTime modifiedAfter = null;
        String include = null;
        List<DkCloudDataModelProjectPhaseModel> response = api.phasesGetPhases(page, count, modifiedBefore, modifiedAfter, include);

        // TODO: test validations
    }
    
    /**
     * Update Project System Phase
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void phasesUpdatePhaseTest() throws ApiException {
        String number = null;
        DkCloudDataModelProjectPhaseModel model = null;
        api.phasesUpdatePhase(number, model);

        // TODO: test validations
    }
    
    /**
     * Method used to create a new Project(Job)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectCreateProjectTest() throws ApiException {
        DkCloudDataModelProjectProjectModel model = null;
        DkCloudDataModelProjectProjectModel response = api.projectCreateProject(model);

        // TODO: test validations
    }
    
    /**
     * Get modified Projects
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectGetModifiedTest() throws ApiException {
        OffsetDateTime modified = null;
        Integer page = null;
        Integer count = null;
        List<DkCloudDataModelProjectProjectModel> response = api.projectGetModified(modified, page, count);

        // TODO: test validations
    }
    
    /**
     * Get Projects Paged
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectGetPageTest() throws ApiException {
        Integer page = null;
        Integer count = null;
        OffsetDateTime modifiedBefore = null;
        OffsetDateTime modifiedAfter = null;
        String customer = null;
        String group = null;
        String dim1 = null;
        String dim2 = null;
        String dim3 = null;
        Integer type = null;
        Integer status = null;
        String include = null;
        List<DkCloudDataModelProjectProjectModel> response = api.projectGetPage(page, count, modifiedBefore, modifiedAfter, customer, group, dim1, dim2, dim3, type, status, include);

        // TODO: test validations
    }
    
    /**
     * Get Project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectGetProjectTest() throws ApiException {
        String number = null;
        DkCloudDataModelProjectProjectModel response = api.projectGetProject(number);

        // TODO: test validations
    }
    
    /**
     * Get Invoices for Project
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectGetProjectInvoicesTest() throws ApiException {
        String number = null;
        List<DkCloudDataModelSalesInvoiceModel> response = api.projectGetProjectInvoices(number);

        // TODO: test validations
    }
    
    /**
     * Get all Projects
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectGetProjectsTest() throws ApiException {
        OffsetDateTime modifiedBefore = null;
        OffsetDateTime modifiedAfter = null;
        String customer = null;
        String group = null;
        String dim1 = null;
        String dim2 = null;
        String dim3 = null;
        Integer type = null;
        Integer status = null;
        Integer max = null;
        String include = null;
        List<DkCloudDataModelProjectProjectModel> response = api.projectGetProjects(modifiedBefore, modifiedAfter, customer, group, dim1, dim2, dim3, type, status, max, include);

        // TODO: test validations
    }
    
    /**
     * Get Project Transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTransactionGetProjectTransactionPageTest() throws ApiException {
        Integer page = null;
        Integer count = null;
        String project = null;
        String account = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime modifiedAfter = null;
        OffsetDateTime modifiedBefore = null;
        String dim1 = null;
        String voucher = null;
        String reference = null;
        Integer recordid = null;
        String origin = null;
        String include = null;
        String sort = null;
        String sorttype = null;
        List<DkCloudDataModelGeneralLedgerTransaction> response = api.projectTransactionGetProjectTransactionPage(page, count, project, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dim1, voucher, reference, recordid, origin, include, sort, sorttype);

        // TODO: test validations
    }
    
    /**
     * Create a Task for the Project System
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tasksCreateTaskTest() throws ApiException {
        DkCloudDataModelProjectTaskModel model = null;
        api.tasksCreateTask(model);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tasksGetTaskTest() throws ApiException {
        String number = null;
        String include = null;
        List<DkCloudDataModelProjectTaskModel> response = api.tasksGetTask(number, include);

        // TODO: test validations
    }
    
    /**
     * Get Project Tasks
     *
     * Note: On every project there is a list og Tasks for that project. if that list is empty all tasks can be used.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tasksGetTasksTest() throws ApiException {
        Integer page = null;
        Integer count = null;
        OffsetDateTime modifiedBefore = null;
        OffsetDateTime modifiedAfter = null;
        String include = null;
        List<DkCloudDataModelProjectTaskModel> response = api.tasksGetTasks(page, count, modifiedBefore, modifiedAfter, include);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tasksUpdateTaskTest() throws ApiException {
        String number = null;
        DkCloudDataModelProjectTaskModel model = null;
        api.tasksUpdateTask(number, model);

        // TODO: test validations
    }
    
}
