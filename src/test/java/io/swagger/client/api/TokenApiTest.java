/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DkCloudDataModelUserTokenModel;
import io.swagger.client.model.DkPlusAPIModelsCompanyAccessModel;
import io.swagger.client.model.DkPlusAPIModelsCreateTokenCredentialModel;
import io.swagger.client.model.DkPlusMailModelMailInfo;
import org.threeten.bp.OffsetDateTime;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokenApi
 */
@Ignore
public class TokenApiTest {

    private final TokenApi api = new TokenApi();

    
    /**
     * Create Token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tokenCreateTokenTest() throws ApiException {
        DkPlusAPIModelsCreateTokenCredentialModel value = null;
        DkCloudDataModelUserTokenModel response = api.tokenCreateToken(value);

        // TODO: test validations
    }
    
    /**
     * Delete Token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tokenDeleteTest() throws ApiException {
        UUID id = null;
        api.tokenDelete(id);

        // TODO: test validations
    }
    
    /**
     * Get Companies that user has access to
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tokenGetMyCompaniesByTokenTest() throws ApiException {
        DkPlusAPIModelsCompanyAccessModel response = api.tokenGetMyCompaniesByToken();

        // TODO: test validations
    }
    
    /**
     * Get Tokens
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tokenGetMyTokensTest() throws ApiException {
        DkCloudDataModelUserTokenModel response = api.tokenGetMyTokens();

        // TODO: test validations
    }
    
    /**
     * Get Token Report
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tokenGetPDFTest() throws ApiException {
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        Object response = api.tokenGetPDF(from, to);

        // TODO: test validations
    }
    
    /**
     * Get Token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tokenGetTokenByIDTest() throws ApiException {
        UUID id = null;
        DkCloudDataModelUserTokenModel response = api.tokenGetTokenByID(id);

        // TODO: test validations
    }
    
    /**
     * Get Token Employee
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tokenGetUserInfoTest() throws ApiException {
        String userID = null;
        String companyID = null;
        String response = api.tokenGetUserInfo(userID, companyID);

        // TODO: test validations
    }
    
    /**
     * Send Token Report to Email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tokenSendEmailTest() throws ApiException {
        DkPlusMailModelMailInfo message = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        Object response = api.tokenSendEmail(message, from, to);

        // TODO: test validations
    }
    
    /**
     * Update Token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tokenUpdateTokenTest() throws ApiException {
        UUID id = null;
        DkPlusAPIModelsCreateTokenCredentialModel info = null;
        DkCloudDataModelUserTokenModel response = api.tokenUpdateToken(id, info);

        // TODO: test validations
    }
    
}
