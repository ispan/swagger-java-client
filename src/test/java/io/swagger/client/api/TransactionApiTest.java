/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DkCloudDataModelCustomersTransactionModel;
import io.swagger.client.model.DkCloudDataModelGeneralLedgerTransaction;
import io.swagger.client.model.DkCloudDataModelProductsTransactionsModel;
import io.swagger.client.model.DkCloudDataModelVendorsTransaction;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionApi
 */
@Ignore
public class TransactionApiTest {

    private final TransactionApi api = new TransactionApi();

    
    /**
     * Get General Ledger Transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void customerTransactionGetCustomerTransactionsTest() throws ApiException {
        Integer page = null;
        Integer count = null;
        OffsetDateTime modifiedAfter = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime dueAfter = null;
        String dim1 = null;
        String voucher = null;
        String reference = null;
        Integer recordid = null;
        String include = null;
        String customer = null;
        List<DkCloudDataModelCustomersTransactionModel> response = api.customerTransactionGetCustomerTransactions(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid, include, customer);

        // TODO: test validations
    }
    
    /**
     * Get General Ledger Transaction
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generalLedgerTransactionGetGeneralTransactionPageTest() throws ApiException {
        Integer page = null;
        Integer count = null;
        String account = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime modifiedAfter = null;
        OffsetDateTime modifiedBefore = null;
        OffsetDateTime dueAfter = null;
        String dim1 = null;
        String voucher = null;
        String reference = null;
        Integer recordid = null;
        String include = null;
        String sort = null;
        String sorttype = null;
        List<DkCloudDataModelGeneralLedgerTransaction> response = api.generalLedgerTransactionGetGeneralTransactionPage(page, count, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dueAfter, dim1, voucher, reference, recordid, include, sort, sorttype);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void productTransactionGetInventoryTransactionsPageTest() throws ApiException {
        Integer page = null;
        Integer count = null;
        OffsetDateTime modifiedAfter = null;
        OffsetDateTime modifiedBefore = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime createdBefore = null;
        String dim1 = null;
        String itemcode = null;
        String warehouse = null;
        String currency = null;
        String reference = null;
        String include = null;
        List<DkCloudDataModelProductsTransactionsModel> response = api.productTransactionGetInventoryTransactionsPage(page, count, modifiedAfter, modifiedBefore, createdAfter, createdBefore, dim1, itemcode, warehouse, currency, reference, include);

        // TODO: test validations
    }
    
    /**
     * Get Project Transactions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void projectTransactionGetProjectTransactionPageTest() throws ApiException {
        Integer page = null;
        Integer count = null;
        String project = null;
        String account = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime modifiedAfter = null;
        OffsetDateTime modifiedBefore = null;
        String dim1 = null;
        String voucher = null;
        String reference = null;
        Integer recordid = null;
        String origin = null;
        String include = null;
        String sort = null;
        String sorttype = null;
        List<DkCloudDataModelGeneralLedgerTransaction> response = api.projectTransactionGetProjectTransactionPage(page, count, project, account, createdAfter, createdBefore, modifiedAfter, modifiedBefore, dim1, voucher, reference, recordid, origin, include, sort, sorttype);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void vendorTransactionGetVendorTransactionsTest() throws ApiException {
        Integer page = null;
        Integer count = null;
        OffsetDateTime modifiedAfter = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime dueAfter = null;
        String dim1 = null;
        String voucher = null;
        String reference = null;
        Integer recordid = null;
        List<DkCloudDataModelVendorsTransaction> response = api.vendorTransactionGetVendorTransactions(page, count, modifiedAfter, createdAfter, createdBefore, dueAfter, dim1, voucher, reference, recordid);

        // TODO: test validations
    }
    
}
