/*
 * dkPlus.API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.DkCloudDataModelPurchaseHeadModel;
import io.swagger.client.model.DkCloudDataModelPurchaseLineModel;
import io.swagger.client.model.DkPlusAPIModelsPurchaseHead;
import org.threeten.bp.OffsetDateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PurchaseApi
 */
@Ignore
public class PurchaseApiTest {

    private final PurchaseApi api = new PurchaseApi();

    
    /**
     * Delete Purchase Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseDeleteTest() throws ApiException {
        Integer id = null;
        api.purchaseDelete(id);

        // TODO: test validations
    }
    
    /**
     * Delete Purchase Order Line
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseDeleteLineTest() throws ApiException {
        Integer id = null;
        Integer seq = null;
        api.purchaseDeleteLine(id, seq);

        // TODO: test validations
    }
    
    /**
     * Get Purchase Orders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseGetTest() throws ApiException {
        OffsetDateTime modified = null;
        List<DkCloudDataModelPurchaseHeadModel> response = api.purchaseGet(modified);

        // TODO: test validations
    }
    
    /**
     * Get Purchase Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseGetByIdTest() throws ApiException {
        Integer id = null;
        DkCloudDataModelPurchaseHeadModel response = api.purchaseGetById(id);

        // TODO: test validations
    }
    
    /**
     * Get Purchase Order By Number
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseGetByNumberTest() throws ApiException {
        String number = null;
        DkCloudDataModelPurchaseHeadModel response = api.purchaseGetByNumber(number);

        // TODO: test validations
    }
    
    /**
     * Get Purchase Order By Reference
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseGetByReferenceTest() throws ApiException {
        String number = null;
        DkCloudDataModelPurchaseHeadModel response = api.purchaseGetByReference(number);

        // TODO: test validations
    }
    
    /**
     * Update Purchase Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasePatchTest() throws ApiException {
        Integer id = null;
        DkPlusAPIModelsPurchaseHead order = null;
        api.purchasePatch(id, order);

        // TODO: test validations
    }
    
    /**
     * Update Purchase Order Line
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasePatchLineTest() throws ApiException {
        Integer id = null;
        Integer seq = null;
        DkCloudDataModelPurchaseLineModel line = null;
        api.purchasePatchLine(id, seq, line);

        // TODO: test validations
    }
    
    /**
     * Create Purchase Order
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasePostTest() throws ApiException {
        List<DkPlusAPIModelsPurchaseHead> orders = null;
        api.purchasePost(orders);

        // TODO: test validations
    }
    
}
